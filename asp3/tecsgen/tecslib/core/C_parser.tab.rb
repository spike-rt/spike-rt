#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class C_parser < Racc::Parser

module_eval(<<'...end C_parser.y.rb/module_eval...', 'C_parser.y.rb', 766)

  RESERVED = {
    # keyword
    'typedef' => :TYPEDEF,
    'struct' => :STRUCT,
    'union' => :UNION,
    'sizeof' => :SIZEOF,
    'throw' => :THROW,

    # specifier
    # types
    'void'    => :VOID,
    'char'    => :CHAR,
    'short'   => :SHORT,

    'volatile'=> :VOLATILE,
    'const'   => :CONST,
    'extern'   => :EXTERN,

    'long'    => :LONG,
    'float'   => :FLOAT,
    'double'  => :DOUBLE,
    'signed'  => :SIGNED,
    'unsigned'=> :UNSIGNED,

    'int'     => :INT,
    'enum'    => :ENUM,

    'if'      => :IF,
    'else'    => :ELSE,
    'while'   => :WHILE,
    'do'      => :DO,
    'for'     => :FOR,
    'case'    => :CASE,
    'default' => :DEFAULT,
    'goto'    => :GOTO,
    'continue' => :CONTINUE,
    'break'   => :BREAK,
    'return'  => :RETURN,
    '__inline__'  => :__INLINE__,
    'inline'  => :INLINE,
    '__inline'  => :__INLINE,
    'Inline'  => :CINLINE,        # inline starting with Capital letter
    'static'  => :STATIC,
    'register' => :REGISTER,
    'auto'    => :AUTO,
    '__extension__'    => :EXTENSION,
    '__asm__' => :_ASM

  }

  @@generator_nest = -1
  @@generator_stack = []
  @@current_locale = []

  def finalize

    # mikan Namespace.pop
    Celltype.pop
    Cell.pop
    CompositeCelltype.pop
    Region.pop

  end

  def set_plugin( plugin )
    @plugin = plugin
  end

  def self.get_plugin
    @@generator_stack[@@generator_nest].get_plugin
  end

  def get_plugin
    @plugin
  end

  def parse(files)

    # mikan Namespace.push
    Celltype.push
    Cell.push
    CompositeCelltype.push
    Region.push

    @@generator_nest += 1
    @@generator_stack[@@generator_nest] = self
    @b_no_type_name = false

   begin

    @q = []

    # typedef, struct のみ
    @in = false   # typedef, struct の途中
    @count = 0
    @prev_block_end = true

    comment = false
#    b_asm   = false

    # euc のコメントを utf8 として扱うと、コメントの終わりを誤る問題の対策
    TECS_LANG::set_kcode_binary

    # 800U, 0xffLL など (整数リテラルに共通の修飾子)
    integer_qualifier = "([Uu][Ll][Ll]|[Uu][Ll]|[Uu]|[Ll][Ll]|[Ll])?"

    files.each {|file|
      lineno = 1
     begin
#2.0       IO.foreach(file) {|line|
       TECSIO.foreach(file) {|line|
        col = 1
        line.rstrip!

        until line.empty?

          if comment
            case line
            # コメント終了
            when /\A\*\//
              comment = false
            when /\A./
              ;
            end
          else
            case line
            # 空白、プリプロセスディレクティブ
            when /\A\s+/
              ;
            # 識別子
            when /\A[a-zA-Z_]\w*/
              word = $&
              @q << [RESERVED[word] || :IDENTIFIER, Token.new(word.intern, file, lineno, col)]
            # 16 進数定数
            when /\A0x[0-9A-Fa-f]+#{integer_qualifier}/
              @q << [:HEX_CONSTANT, Token.new($&, file, lineno, col)]
            # 8 進数定数
            when /\A0[0-7]+#{integer_qualifier}/
              @q << [:OCTAL_CONSTANT, Token.new($&, file, lineno, col)]
            # 浮動小数定数
            when /\A[0-9]+\.([0-9]*)?([Ee][+-]?[0-9]+)?/
              @q << [:FLOATING_CONSTANT, Token.new($&, file, lineno, col)]
            # 整数定数
            when /\A\d+#{integer_qualifier}/
            # when /\A\d+/
              @q << [:INTEGER_CONSTANT, Token.new($&.to_i, file, lineno, col)]
            # 文字
            when /\A'(?:[^'\\]|\\.)'/
              @q << [:CHARACTER_LITERAL, Token.new($&, file, lineno, col)]
            # 文字列
#              "#include  #include #include \"../systask/logtask.cfg\"       最後の " 忘れ)で無限ループ
#            when /\A"(?:[^"\\]+|\\.)*"/
            when /\A"(?:[^"\\]|\\.)*"/   # これはうまく行くようだ
              @q << [:STRING_LITERAL, Token.new($&, file, lineno, col)]
            # 行コメント
            when /\A\/\/.*$/
              # 読み飛ばすだけ
            # コメント開始
            when /\A\/\*/
              comment = true
            when /\A>>=/, /\A<<=/, /\A>>/,  /\A<</
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A\+=/, /\A\-=/, /\A\*=/, /\A\/=/, /\A%=/, /\A&=/, /\A\|=/, /\A\^=/
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A::/, /\A==/, /\A!=/, /\A>=/, /\A<=/, /\A\->/, /\A\+\+/, /\A\-\-/
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A\|\|/, /\A\&\&/
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A./
              @q << [$&, Token.new($&, file, lineno, col)]
            else
              raise
            end
          end

          line = $'
          col += $&.length
        end

        lineno += 1
      }

     rescue => evar
       Generator.error( "B1002 while open or reading \'$1\'" , file )
       print_exception( evar )
     end
    }

    # 終了の印
    @q << nil

    @yydebug = true
    do_parse

   ensure
    @@generator_nest -= 1
    TECS_LANG::reset_kcode
   end

  end


  def next_token
    token = @q.shift
    # typedef, struct の宣言文のみ評価する
    if @in then
      @prev_block_end = false
      # ':' で 文の終わり
      if token[0] == '{' then
        @count += 1
      elsif token[0] == '}' then
        @count -= 1
      elsif token[0] == ';' && @count == 0 then
         @in = false
         @prev_block_end = true
      else
      end
    else
      while token
        if ( token[0] == :TYPEDEF || token[0] == :STRUCT ) && @prev_block_end == true then
          @in = true
          @prev_block_end = false
          break
        end
        if token[0] == ';' || token[0] == '}' then
          @prev_block_end = true
        else
          @prev_block_end = false
        end
        token = @q.shift
      end
    end

    if token then
      @@current_locale[@@generator_nest] = token[1].locale

      case token[1].val
      when ";", ":", ",", "(", ")", "{", "}"
        set_no_type_name false
      when ".", "->"
        set_no_type_name true
      end

      # TYPE_NAME トークンへ置き換え
      if @b_no_type_name == false
        if token[0] == :IDENTIFIER && Namespace.is_typename?( token[1].val ) then
          token[0] = :TYPE_NAME
          locale = @@current_locale[@@generator_nest]
#print( "#{locale[0]}: line #{locale[1]} : #{token[0]} '#{token[1].val}: type_name'\n" )
        end
      end

      if $debug then     # 070107 token 無効時ここを通さないようした (through 対応 -d の時に例外発生) 
        locale = @@current_locale[@@generator_nest]
        if token then
          print( "#{locale[0]}: line #{locale[1]} : #{token[0]} '#{token[1].val}'\n" )
        else
          print( "#{locale[0]}: line #{locale[1]} : EOF\n" )
        end
      end
    end

    token
  end

  def on_error(t, v, vstack)
    if v == "$" then
     Generator.error( "B1003 Unexpected EOF"  )
    else
     Generator.error( "B1004 syntax error near \'$1\'" , v.val )
    end

  end

  def self.current_locale
    @@current_locale[ @@generator_nest ]
  end

  def self.get_nest
    @@generator_nest
  end

  def set_no_type_name b_no_type_name
    # locale = @@current_locale[ @@generator_nest ]
    # print "b_no_type_name=#{b_no_type_name} #{locale[0]}: line #{locale[1]}\n"
    @b_no_type_name = b_no_type_name
  end

...end C_parser.y.rb/module_eval...
##### State transition tables begin ###

clist = [
'109,110,111,112,113,115,422,116,283,294,294,249,409,121,122,81,81,294',
'120,123,124,125,126,127,128,47,55,109,110,111,112,113,115,371,116,69',
'389,274,146,68,121,122,79,282,385,120,123,124,125,126,127,128,253,9',
'10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37',
'32,33,292,250,251,254,295,255,256,257,258,259,260,261,262,147,263,109',
'110,111,112,113,115,423,116,294,357,303,249,304,121,122,81,305,294,120',
'123,124,125,126,127,128,147,403,109,110,111,112,113,115,85,116,266,84',
'294,146,265,121,122,78,331,356,120,123,124,125,126,127,128,253,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,77',
'100,264,250,251,254,286,255,256,257,258,259,260,261,262,147,263,109',
'110,111,112,113,115,402,116,180,352,234,249,351,121,122,81,233,294,120',
'123,124,125,126,127,128,147,425,109,110,111,112,113,115,401,116,228',
'352,294,146,351,121,122,227,179,294,120,123,124,125,126,127,128,253',
'9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36',
'37,226,100,225,250,251,254,360,255,256,257,258,259,260,261,262,147,263',
'109,110,111,112,113,115,398,116,365,298,182,249,272,121,122,81,294,367',
'120,123,124,125,126,127,128,147,366,109,110,111,112,113,115,293,116',
'181,85,367,146,84,121,122,217,218,294,120,123,124,125,126,127,128,253',
'9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36',
'37,79,100,100,250,251,254,361,255,256,257,258,259,260,261,262,147,263',
'109,110,111,112,113,115,177,116,289,290,330,249,332,121,122,81,215,216',
'120,123,124,125,126,127,128,147,334,109,110,111,112,113,115,300,116',
'175,176,212,146,335,121,122,213,214,336,120,123,124,125,126,127,128',
'253,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35',
'36,37,223,224,337,250,251,254,100,255,256,257,258,259,260,261,262,147',
'263,109,110,111,112,113,115,339,116,215,216,340,249,341,121,122,81,328',
'329,120,123,124,125,126,127,128,147,342,109,110,111,112,113,115,168',
'116,217,218,212,146,167,121,122,213,214,3,120,123,124,125,126,127,128',
'253,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35',
'36,37,217,218,358,250,251,254,55,255,256,257,258,259,260,261,262,147',
'263,109,110,111,112,113,115,158,116,229,230,369,249,370,121,122,81,217',
'218,120,123,124,125,126,127,128,147,225,109,110,111,112,113,115,226',
'116,217,218,227,146,228,121,122,144,420,374,120,123,124,125,126,127',
'128,253,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34',
'35,36,37,410,411,376,250,251,254,101,255,256,257,258,259,260,261,262',
'147,263,109,110,111,112,113,115,100,116,215,216,145,249,97,121,122,81',
'252,381,120,123,124,125,126,127,128,147,384,109,110,111,112,113,115',
'419,116,284,285,212,146,386,121,122,213,214,387,120,123,124,125,126',
'127,128,253,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32',
'33,34,35,36,37,223,224,388,250,251,254,91,255,256,257,258,259,260,261',
'262,147,263,109,110,111,112,113,115,90,116,393,89,363,249,363,121,122',
'81,404,407,120,123,124,125,126,127,128,147,408,109,110,111,112,113,115',
'417,116,81,66,63,146,62,121,122,421,428,275,120,123,124,125,126,127',
'128,253,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34',
'35,36,37,,,,250,251,254,,255,256,257,258,259,260,261,262,147,263,109',
'110,111,112,113,115,,116,,,,249,,121,122,81,,,120,123,124,125,126,127',
'128,147,,109,110,111,112,113,115,,116,,,,146,,121,122,,,,120,123,124',
'125,126,127,128,253,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30',
'31,32,33,34,35,36,37,,,,250,251,254,,255,256,257,258,259,260,261,262',
'147,263,109,110,111,112,113,115,,116,,,,249,,121,122,81,,,120,123,124',
'125,126,127,128,147,,109,110,111,112,113,115,,116,,,,146,,121,122,,',
',120,123,124,125,126,127,128,253,9,10,11,12,13,14,15,16,17,18,19,20',
'21,22,26,28,30,31,32,33,34,35,36,37,,,253,250,251,254,,255,256,257,258',
'259,260,261,262,147,263,109,110,111,112,113,115,,116,,,,249,,121,122',
'81,,,120,123,124,125,126,127,128,147,,109,110,111,112,113,115,,116,',
',,146,,121,122,,,,120,123,124,125,126,127,128,253,9,10,11,12,13,14,15',
'16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,,,253,250,251,254',
',255,256,257,258,259,260,261,262,147,263,109,110,111,112,113,115,,116',
',,,146,,121,122,,,,120,123,124,125,126,127,128,147,109,110,111,112,113',
'115,268,116,,272,54,146,53,121,122,,53,,120,123,124,125,126,127,128',
'55,253,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34',
'35,36,37,109,110,111,112,113,115,70,116,,,71,146,,121,122,147,,83,120',
'123,124,125,126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122',
'144,147,,120,123,124,125,126,127,128,109,110,111,112,113,115,,116,,54',
',146,72,121,122,53,,,120,123,124,125,126,127,128,109,110,111,112,113',
'115,,116,,,54,146,,121,122,,53,147,120,123,124,125,126,127,128,55,,145',
',,109,110,111,112,113,115,,116,,,,146,147,121,122,,83,,120,123,124,125',
'126,127,128,109,110,111,112,113,115,,116,,,,146,147,121,122,,,,120,123',
'124,125,126,127,128,109,110,111,112,113,115,,116,,,,146,147,121,122',
'144,,,120,123,124,125,126,127,128,109,110,111,112,113,115,,116,,,,146',
',121,122,,,147,120,123,124,125,126,127,128,109,110,111,112,113,115,',
'116,,,54,146,,121,122,,53,147,120,123,124,125,126,127,128,55,,145,,',
'109,110,111,112,113,115,,116,,,,146,147,121,122,,,,120,123,124,125,126',
'127,128,268,54,54,272,54,,53,53,53,,53,298,147,,272,55,55,55,,55,109',
'110,111,112,113,115,55,116,,,54,146,,121,122,,53,147,120,123,124,125',
'126,127,128,55,219,220,221,222,109,110,111,112,113,115,,116,,,54,146',
',121,122,,53,147,120,123,124,125,126,127,128,55,,13,14,15,16,17,18,19',
'20,21,22,26,28,30,31,32,33,,,109,110,111,112,113,115,,116,,,54,146,',
'121,122,,53,147,120,123,124,125,126,127,128,55,219,220,221,222,109,110',
'111,112,113,115,,116,,,,146,,121,122,144,372,147,120,123,124,125,126',
'127,128,,,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,,,109,110',
'111,112,113,115,,116,,,54,146,,121,122,,53,147,120,123,124,125,126,127',
'128,55,219,220,221,222,,,145,,,109,110,111,112,113,115,,116,,,,146,147',
'121,122,144,,,120,123,124,125,126,127,128,109,110,111,112,113,115,,116',
',152,,146,,121,122,,,,120,123,124,125,126,127,128,,109,110,111,112,113',
'115,147,116,,,,146,,121,122,363,,,120,123,124,125,126,127,128,,145,',
',109,110,111,112,113,115,,116,,,,146,147,121,122,,,,120,123,124,125',
'126,127,128,109,110,111,112,113,115,,116,,353,,146,147,121,122,,,,120',
'123,124,125,126,127,128,,109,110,111,112,113,115,,116,,,,146,147,121',
'122,,,,120,123,124,125,126,127,128,109,110,111,112,113,115,,116,,,,146',
',121,122,,147,,120,123,124,125,126,127,128,,,344,,109,110,111,112,113',
'115,,116,,,,146,147,121,122,,,,120,123,124,125,126,127,128,,109,110',
'111,112,113,115,,116,,,,146,147,121,122,,,,120,123,124,125,126,127,128',
'109,110,111,112,113,115,,116,,,,146,147,121,122,,,,120,123,124,125,126',
'127,128,109,110,111,112,113,115,,116,,,,146,,121,122,,147,,120,123,124',
'125,126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122,,,147,120',
'123,124,125,126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122',
',,147,120,123,124,125,126,127,128,201,202,203,204,205,206,207,208,209',
'210,211,109,110,111,112,113,115,147,116,,,,146,,121,122,,,,120,123,124',
'125,126,127,128,109,110,111,112,113,115,147,116,,,,146,,121,122,,,,120',
'123,124,125,126,127,128,,,,,,,147,13,14,15,16,17,18,19,20,21,22,26,28',
'30,31,32,33,,,109,110,111,112,113,195,,116,,,,146,,121,122,,,147,120',
'123,124,125,126,127,128,109,110,111,112,113,197,,116,,,,146,,121,122',
',,147,120,123,124,125,126,127,128,109,110,111,112,113,197,,116,,,,146',
',121,122,,,,120,123,124,125,126,127,128,109,110,111,112,113,115,,116',
',,,146,,121,122,,,147,120,123,124,125,126,127,128,109,110,111,112,113',
'115,,116,,,,146,,121,122,,,147,120,123,124,125,126,127,128,109,110,111',
'112,113,115,,116,,,,146,,121,122,,,147,120,123,124,125,126,127,128,109',
'110,111,112,113,115,,116,,,,146,,121,122,,,147,120,123,124,125,126,127',
'128,109,110,111,112,113,115,,116,,,,146,,121,122,,,147,120,123,124,125',
'126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122,,,147,120,123',
'124,125,126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122,,,147',
'120,123,124,125,126,127,128,109,110,111,112,113,115,,116,,,,146,,121',
'122,,,147,120,123,124,125,126,127,128,,,,,,,,,,,,,,,,45,,147,,,,,,,',
',,188,,,187,,190,,191,192,193,,,,,,147,45,13,14,15,16,17,18,19,20,21',
'22,26,28,30,31,32,33,,,,,,,,147,44,9,10,11,12,13,14,15,16,17,18,19,20',
'21,22,26,28,30,31,32,33,34,35,36,37,32,33,46,44,9,10,11,12,13,14,15',
'16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,,40,46,298,349,,272',
',,,,,,,,,,,55,,,,,,,,,268,349,,272,,,53,,,,,,,,,55,,,,,,,,,9,10,11,12',
'13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11',
'12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,391,13',
'14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,,,,,,,,154,13,14,15,16',
'17,18,19,20,21,22,26,28,30,31,32,33,,,,,,,9,10,11,12,13,14,15,16,17',
'18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11,12,13,14,15,16',
'17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,345,9,10,11,12,13,14',
'15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,,,,,,355,,,,,',
',,,,,,,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34',
'35,36,37,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33',
'34,35,36,37,169,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,9,10,11,12,13',
'14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11,12',
'13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,281,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,,',
',,,,,,,,,,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33',
'34,35,36,37,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32',
'33,34,35,36,37,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31',
'32,33,34,35,36,37,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30',
'31,32,33,34,35,36,37,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28',
'30,31,32,33,34,35,36,37,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26',
'28,30,31,32,33,34,35,36,37,9,10,11,12,13,14,15,16,17,18,19,20,21,22',
'26,28,30,31,32,33,34,35,36,37' ]
        racc_action_table = arr = ::Array.new(3063, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'334,334,334,334,334,334,415,334,171,343,327,334,392,334,334,334,50,415',
'334,334,334,334,334,334,334,3,55,351,351,351,351,351,351,327,351,29',
'351,161,351,29,351,351,50,171,343,351,351,351,351,351,351,351,334,334',
'334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334',
'334,334,334,334,334,334,55,55,181,334,334,334,184,334,334,334,334,334',
'334,334,334,334,334,423,423,423,423,423,423,416,423,235,278,189,423',
'190,423,423,423,191,416,423,423,423,423,423,423,423,351,380,337,337',
'337,337,337,337,52,337,155,52,380,337,153,337,337,48,235,278,337,337',
'337,337,337,337,337,423,423,423,423,423,423,423,423,423,423,423,423',
'423,423,423,423,423,423,423,423,423,423,423,423,423,48,176,151,423,423',
'423,176,423,423,423,423,423,423,423,423,423,423,421,421,421,421,421',
'421,379,421,104,271,147,421,271,421,421,421,145,379,421,421,421,421',
'421,421,421,337,418,336,336,336,336,336,336,378,336,139,347,418,336',
'347,336,336,138,104,378,336,336,336,336,336,336,336,421,421,421,421',
'421,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421',
'421,421,421,421,137,285,136,421,421,421,285,421,421,421,421,421,421',
'421,421,421,421,419,419,419,419,419,419,368,419,299,297,114,419,297',
'419,419,419,299,368,419,419,419,419,419,419,419,336,301,335,335,335',
'335,335,335,183,335,108,82,301,335,82,335,335,316,316,183,335,335,335',
'335,335,335,335,419,419,419,419,419,419,419,419,419,419,419,419,419',
'419,419,419,419,419,419,419,419,419,419,419,419,107,290,101,419,419',
'419,290,419,419,419,419,419,419,419,419,419,419,403,403,403,403,403',
'403,100,403,178,178,233,403,249,403,403,403,315,315,403,403,403,403',
'403,403,403,335,251,188,188,188,188,188,188,188,188,98,98,312,188,254',
'188,188,312,312,255,188,188,188,188,188,188,188,403,403,403,403,403',
'403,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403',
'403,403,403,322,322,256,403,403,403,97,403,403,403,403,403,403,403,403',
'403,403,332,332,332,332,332,332,258,332,314,314,259,332,260,332,332',
'332,231,231,332,332,332,332,332,332,332,188,261,177,177,177,177,177',
'177,93,177,319,319,313,177,92,177,177,313,313,1,177,177,177,177,177',
'177,177,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332',
'332,332,332,332,332,332,332,332,332,332,318,318,280,332,332,332,87,332',
'332,332,332,332,332,332,332,332,332,401,401,401,401,401,401,86,401,140',
'140,306,401,307,401,401,401,317,317,401,401,401,401,401,401,401,177',
'323,411,411,411,411,411,411,324,411,133,133,325,411,326,411,411,411',
'411,330,411,411,411,411,411,411,411,401,401,401,401,401,401,401,401',
'401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401',
'396,396,333,401,401,401,72,401,401,401,401,401,401,401,401,401,401,148',
'148,148,148,148,148,71,148,132,132,411,148,70,148,148,148,148,338,148',
'148,148,148,148,148,148,411,340,406,406,406,406,406,406,406,406,174',
'174,131,406,345,406,406,131,131,348,406,406,406,406,406,406,406,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,148,148,135,135,350,148,148,148,67,148,148,148,148',
'148,148,148,148,148,148,417,417,417,417,417,417,65,417,354,64,369,417',
'370,417,417,417,381,386,417,417,417,417,417,417,417,406,390,405,405',
'405,405,405,405,405,405,402,27,25,405,23,405,405,412,422,162,405,405',
'405,405,405,405,405,417,417,417,417,417,417,417,417,417,417,417,417',
'417,417,417,417,417,417,417,417,417,417,417,417,417,,,,417,417,417,',
'417,417,417,417,417,417,417,417,417,417,425,425,425,425,425,425,,425',
',,,425,,425,425,425,,,425,425,425,425,425,425,425,405,,404,404,404,404',
'404,404,,404,,,,404,,404,404,,,,404,404,404,404,404,404,404,425,425',
'425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,425',
'425,425,425,425,425,425,,,,425,425,425,,425,425,425,425,425,425,425',
'425,425,425,376,376,376,376,376,376,,376,,,,376,,376,376,376,,,376,376',
'376,376,376,376,376,404,,383,383,383,383,383,383,,383,,,,383,,383,383',
',,,383,383,383,383,383,383,383,376,376,376,376,376,376,376,376,376,376',
'376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,,,383,376',
'376,376,,376,376,376,376,376,376,376,376,376,376,257,257,257,257,257',
'257,,257,,,,257,,257,257,257,,,257,257,257,257,257,257,257,383,,382',
'382,382,382,382,382,,382,,,,382,,382,382,,,,382,382,382,382,382,382',
'382,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,,,382,257,257,257,,257,257,257,257',
'257,257,257,257,257,257,339,339,339,339,339,339,,339,,,,339,,339,339',
',,,339,339,339,339,339,339,339,382,371,371,371,371,371,371,267,371,',
'267,54,371,267,371,371,,54,,371,371,371,371,371,371,371,54,339,339,339',
'339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339',
'339,339,339,339,339,367,367,367,367,367,367,31,367,,,31,367,,367,367',
'339,,267,367,367,367,367,367,367,367,363,363,363,363,363,363,,363,,',
',363,,363,363,363,371,,363,363,363,363,363,363,363,358,358,358,358,358',
'358,,358,,51,,358,31,358,358,51,,,358,358,358,358,358,358,358,216,216',
'216,216,216,216,,216,,,4,216,,216,216,,4,367,216,216,216,216,216,216',
'216,4,,363,,,215,215,215,215,215,215,,215,,,,215,363,215,215,,51,,215',
'215,215,215,215,215,215,214,214,214,214,214,214,,214,,,,214,358,214',
'214,,,,214,214,214,214,214,214,214,144,144,144,144,144,144,,144,,,,144',
'216,144,144,144,,,144,144,144,144,144,144,144,213,213,213,213,213,213',
',213,,,,213,,213,213,,,215,213,213,213,213,213,213,213,212,212,212,212',
'212,212,,212,,,236,212,,212,212,,236,214,212,212,212,212,212,212,212',
'236,,144,,,200,200,200,200,200,200,,200,,,,200,144,200,200,,,,200,200',
'200,200,200,200,200,157,76,180,157,165,,157,76,180,,165,186,213,,186',
'157,76,180,,165,197,197,197,197,197,197,186,197,,,78,197,,197,197,,78',
'212,197,197,197,197,197,197,197,78,134,134,134,134,187,187,187,187,187',
'187,,187,,,283,187,,187,187,,283,200,187,187,187,187,187,187,187,283',
',197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,,,195',
'195,195,195,195,195,,195,,,96,195,,195,195,,96,197,195,195,195,195,195',
'195,195,96,321,321,321,321,329,329,329,329,329,329,,329,,,,329,,329',
'329,329,329,187,329,329,329,329,329,329,329,,,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,,,303,303,303,303,303,303,,303',
',,357,303,,303,303,,357,195,303,303,303,303,303,303,303,357,320,320',
'320,320,,,329,,,79,79,79,79,79,79,,79,,,,79,329,79,79,79,,,79,79,79',
'79,79,79,79,84,84,84,84,84,84,,84,,84,,84,,84,84,,,,84,84,84,84,84,84',
'84,,295,295,295,295,295,295,303,295,,,,295,,295,295,295,,,295,295,295',
'295,295,295,295,,79,,,294,294,294,294,294,294,,294,,,,294,79,294,294',
',,,294,294,294,294,294,294,294,272,272,272,272,272,272,,272,,272,,272',
'84,272,272,,,,272,272,272,272,272,272,272,,262,262,262,262,262,262,',
'262,,,,262,295,262,262,,,,262,262,262,262,262,262,262,250,250,250,250',
'250,250,,250,,,,250,,250,250,,294,,250,250,250,250,250,250,250,,,262',
',230,230,230,230,230,230,,230,,,,230,272,230,230,,,,230,230,230,230',
'230,230,230,,229,229,229,229,229,229,,229,,,,229,262,229,229,,,,229',
'229,229,229,229,229,229,228,228,228,228,228,228,,228,,,,228,250,228',
'228,,,,228,228,228,228,228,228,228,227,227,227,227,227,227,,227,,,,227',
',227,227,,230,,227,227,227,227,227,227,227,226,226,226,226,226,226,',
'226,,,,226,,226,226,,,229,226,226,226,226,226,226,226,225,225,225,225',
'225,225,,225,,,,225,,225,225,,,228,225,225,225,225,225,225,225,129,129',
'129,129,129,129,129,129,129,129,129,115,115,115,115,115,115,227,115',
',,,115,,115,115,,,,115,115,115,115,115,115,115,119,119,119,119,119,119',
'226,119,,,,119,,119,119,,,,119,119,119,119,119,119,119,,,,,,,225,115',
'115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,,,120,120',
'120,120,120,120,,120,,,,120,,120,120,,,115,120,120,120,120,120,120,120',
'121,121,121,121,121,121,,121,,,,121,,121,121,,,119,121,121,121,121,121',
'121,121,122,122,122,122,122,122,,122,,,,122,,122,122,,,,122,122,122',
'122,122,122,122,224,224,224,224,224,224,,224,,,,224,,224,224,,,120,224',
'224,224,224,224,224,224,223,223,223,223,223,223,,223,,,,223,,223,223',
',,121,223,223,223,223,223,223,223,222,222,222,222,222,222,,222,,,,222',
',222,222,,,122,222,222,222,222,222,222,222,221,221,221,221,221,221,',
'221,,,,221,,221,221,,,224,221,221,221,221,221,221,221,220,220,220,220',
'220,220,,220,,,,220,,220,220,,,223,220,220,220,220,220,220,220,219,219',
'219,219,219,219,,219,,,,219,,219,219,,,222,219,219,219,219,219,219,219',
'218,218,218,218,218,218,,218,,,,218,,218,218,,,221,218,218,218,218,218',
'218,218,217,217,217,217,217,217,,217,,,,217,,217,217,,,220,217,217,217',
'217,217,217,217,,,,,,,,,,,,,,,,40,,219,,,,,,,,,,118,,,118,,118,,118',
'118,118,,,,,,218,2,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,',
',,,,,,217,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,40,40,118,118,40,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'2,2,2,2,,2,2,298,298,,298,,,,,,,,,,,,298,,,,,,,,,268,268,,268,,,268',
',,,,,,,,268,,,,,,,,,298,298,298,298,298,298,298,298,298,298,298,298',
'298,298,298,298,298,298,298,298,298,298,298,298,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,352,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,,,,,85',
'46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,,,,,,,352,352,352,352',
'352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352',
'352,352,352,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85',
'85,85,85,85,85,266,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,,,,,,273,,,,,,,,,,,,,266,266,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266',
'273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273',
'273,273,273,273,273,273,273,94,,,,,,,,,,,,,,,,,,,,,,,,163,,,,,,,,,,',
',,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94',
'94,94,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163',
'163,163,163,163,163,163,163,163,166,90,90,90,90,90,90,90,90,90,90,90',
'90,90,90,90,90,90,90,90,90,90,90,90,90,,,,,,,,,,,,,166,166,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,166,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,160,160,160',
'160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160',
'160,160,160,160,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7',
'7,7,7,7,7,7,7,7,7,7,7,7,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68',
'68,68,68,68,68,68,68,68,68' ]
        racc_action_check = arr = ::Array.new(3063, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   514,  2409,    25,  1283,  2912,  2864,  2960,  2936,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   737,   nil,   735,   nil,   775,   nil,    22,
   nil,  1198,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  2381,   nil,   nil,   nil,   nil,   nil,  2553,   nil,   117,   nil,
    -1,  1257,   120,   nil,  1157,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   744,   741,   nil,   724,  2984,   nil,
   653,   651,   630,   nil,  2529,  2352,  1459,   nil,  1488,  1668,
   nil,   nil,   311,   nil,  1693,  2603,   562,   531,   nil,   nil,
  2804,  2628,   455,   449,  2755,   nil,  1563,   446,   393,   nil,
   339,   348,   nil,   nil,   177,   nil,   nil,   316,   223,   nil,
   nil,   nil,   nil,   nil,   283,  2015,   nil,   nil,  2387,  2040,
  2090,  2115,  2140,   nil,   nil,   nil,   nil,   nil,   nil,  1963,
   nil,   673,   643,   570,  1480,   700,   246,   228,   192,   184,
   532,   nil,   nil,   nil,  1358,   197,   nil,   185,   656,   nil,
   nil,   162,   nil,   125,   nil,   110,   nil,  1458,   nil,   nil,
  2888,   -17,   742,  2779,   nil,  1462,  2840,   nil,   nil,   nil,
   nil,   -11,   nil,   nil,   675,   nil,   159,   495,   366,   nil,
  1460,    66,   nil,   307,    75,   nil,  1469,  1513,   401,    97,
    93,    97,   nil,   nil,   nil,  1558,   nil,  1483,   nil,   nil,
  1438,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1408,  1383,  1333,  1308,  1278,  2340,  2315,  2290,
  2265,  2240,  2215,  2190,  2165,  1979,  1954,  1929,  1904,  1879,
  1853,   468,   nil,   377,   nil,    83,  1413,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   346,
  1824,   360,   nil,   nil,   408,   413,   448,  1032,   469,   467,
   428,   442,  1799,   nil,   nil,   nil,  2670,  1153,  2508,   nil,
   nil,   190,  1773,  2694,   nil,   nil,   nil,   nil,    84,   nil,
   507,   nil,   nil,  1518,   nil,   253,   nil,   nil,   nil,   nil,
   347,   nil,   nil,   nil,  1748,  1719,   nil,   284,  2484,   279,
   nil,   300,   nil,  1633,   nil,   nil,   566,   568,   nil,   nil,
   nil,   nil,   391,   485,   455,   369,   295,   551,   518,   476,
  1630,  1555,   418,   569,   560,   563,   564,    -9,   nil,  1588,
   600,   nil,   468,   601,    -2,   307,   213,   119,   588,  1126,
   630,   nil,   nil,   -10,   nil,   685,   nil,   217,   694,   nil,
   729,    25,  2579,   nil,   749,   nil,   nil,  1638,  1253,   nil,
   nil,   nil,   nil,  1228,   nil,   nil,   nil,  1203,   280,   745,
   747,  1152,   nil,   nil,   nil,   nil,   938,   nil,   213,   186,
   112,   761,  1059,   965,   nil,   nil,   757,   nil,   nil,   nil,
   767,   nil,     4,   nil,   nil,   nil,   623,   nil,   nil,   nil,
   nil,   562,   770,   374,   871,   777,   683,   nil,   nil,   nil,
   nil,   589,   709,   nil,   nil,    -2,    92,   750,   206,   280,
   nil,   186,   741,    92,   nil,   844,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
  -207,  -259,    -1,  -259,  -259,   -86,   -87,   -88,   -92,   -98,
   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -107,  -108,
  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -118,  -121,  -259,
  -139,  -259,  -161,  -162,  -163,  -164,  -165,  -166,  -208,  -209,
  -259,  -211,  -212,  -215,  -216,  -217,  -259,   431,  -259,   -94,
   -96,  -259,  -168,  -170,  -259,  -176,   -89,  -112,  -114,   -90,
   -91,   -93,  -214,  -213,  -120,  -259,  -124,  -138,  -259,  -142,
  -149,  -259,  -156,  -210,  -128,  -130,  -259,   -85,  -259,  -259,
  -221,  -222,  -167,  -169,  -259,  -259,  -259,  -177,  -178,  -116,
  -259,  -259,  -112,  -113,  -259,  -140,  -259,  -259,  -259,  -157,
  -159,  -259,  -129,  -131,  -259,  -219,   -95,   -96,    -2,    -3,
    -4,    -5,    -6,    -7,    -8,  -259,   -10,   -12,   -25,  -259,
  -259,  -259,  -259,   -31,   -32,   -33,   -34,   -35,   -36,   -37,
   -39,   -43,   -46,   -49,   -54,   -57,   -59,   -61,   -63,   -65,
   -67,   -69,   -97,  -201,  -259,  -259,  -255,  -259,  -259,   -37,
   -84,  -259,  -173,  -259,  -175,  -180,  -182,  -186,  -171,  -179,
  -259,  -112,  -113,  -259,  -122,  -259,  -259,  -145,  -144,  -137,
  -141,  -259,  -146,  -148,  -259,  -150,  -259,  -259,  -259,  -218,
  -259,  -259,   -11,  -259,  -259,   -82,  -187,  -259,  -259,  -259,
  -259,  -259,   -19,   -20,   -26,  -259,   -27,  -259,   -29,   -30,
  -259,   -71,   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,
   -80,   -81,  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,
  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,
  -259,  -259,  -205,  -259,  -256,  -259,  -259,  -223,  -224,  -225,
  -226,  -227,  -228,  -229,  -230,  -231,  -232,  -233,  -234,  -255,
  -259,  -259,  -238,  -239,  -259,  -259,  -259,  -259,  -259,  -259,
  -259,  -259,  -259,  -258,  -172,  -174,  -259,  -189,  -259,  -184,
  -185,  -190,  -259,  -259,  -127,  -126,  -119,  -123,  -259,  -132,
  -134,  -136,  -143,  -259,  -152,  -259,  -151,  -158,  -160,  -154,
  -259,  -220,  -257,    -9,  -259,  -259,  -188,  -189,  -259,  -259,
   -14,  -259,   -23,  -259,   -17,   -18,  -259,  -259,   -70,   -40,
   -41,   -42,   -44,   -45,   -47,   -48,   -50,   -51,   -52,   -53,
   -55,   -56,   -58,   -60,   -62,   -64,   -66,  -259,  -202,  -259,
  -259,  -240,  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,
  -259,  -251,  -252,  -259,  -253,  -259,  -183,  -191,  -259,  -197,
  -259,  -259,  -259,  -193,  -259,  -117,  -125,  -259,  -259,  -147,
  -153,  -155,   -83,  -259,   -38,   -13,   -15,  -259,  -259,   -28,
  -259,  -259,  -203,  -206,  -204,  -235,  -259,  -237,  -259,  -259,
  -259,  -259,  -259,  -259,  -250,  -254,  -259,  -192,  -198,  -195,
  -259,  -199,  -259,  -194,  -133,  -135,  -259,   -24,   -16,   -68,
  -236,  -259,  -259,  -259,  -259,  -259,  -259,  -181,  -196,  -200,
   -21,  -259,  -241,  -243,  -244,  -259,  -259,  -259,  -259,  -259,
   -22,  -259,  -259,  -259,  -246,  -259,  -248,  -242,  -245,  -247,
  -249 ]

racc_goto_table = [
    50,     4,    80,    43,    56,    59,    60,    61,    82,   142,
   143,   151,   150,   153,    88,   172,   231,   301,   277,   183,
   184,   287,   170,    39,   171,   163,    25,   270,   347,    98,
   279,    93,    23,   325,    75,   382,     2,    76,   324,     4,
    74,    43,   323,    87,   314,   315,   159,   237,    94,   316,
   317,   318,   319,   162,    93,   174,   296,    93,   347,   178,
   322,    73,    75,    75,    25,   102,   103,    96,    74,    74,
    23,   166,   105,   346,   107,   143,   149,   194,   405,   406,
   320,   321,   312,   313,   157,     1,    38,   104,   148,   165,
    96,   299,   173,    96,   170,   273,   160,    64,    92,   183,
   306,   183,   307,    75,   288,   150,   189,    65,   106,    74,
   278,   149,   196,   198,   199,   200,   267,    67,   326,   302,
   161,    92,   nil,   162,    92,   nil,   162,   nil,   277,    93,
   287,   308,   368,   nil,   327,   287,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   297,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   269,   nil,   nil,   338,   nil,   nil,   165,
   nil,   280,   165,   nil,   nil,    96,   343,   nil,   nil,   149,
   309,   310,   311,   nil,   nil,   nil,   291,   333,   150,   nil,
   nil,   nil,   nil,    75,   nil,    75,   nil,   nil,   nil,    74,
   161,    74,   nil,   161,   nil,   nil,    92,   nil,   nil,   nil,
   nil,   nil,   359,   354,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   394,   nil,    82,   362,   nil,   267,   nil,   nil,
   nil,   375,   107,   377,   302,   396,   162,   nil,   nil,   378,
   379,   380,   149,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   364,   nil,   nil,   nil,   297,   nil,   373,
   143,   nil,   nil,   nil,   nil,   157,   nil,   157,   nil,   nil,
   nil,   nil,   165,   nil,   nil,   400,   nil,   nil,   nil,   173,
   392,   nil,   390,   nil,   nil,   395,   150,   149,   nil,   nil,
   nil,   nil,   nil,   nil,   143,   nil,   nil,   157,   397,   399,
   412,   nil,   414,   161,   nil,   nil,   nil,   nil,   415,   416,
   418,   nil,   nil,   nil,   nil,   nil,   424,   nil,   426,   nil,
   427,   nil,   429,   nil,   430,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   383,   373,   143,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   149,   157,   nil,   280,   413,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   149 ]

racc_goto_check = [
    36,    30,    70,    29,    30,    30,    30,    30,    59,    37,
    12,    28,    26,    60,    58,    55,    11,     8,    46,     6,
    10,    57,    53,    66,    54,    43,    40,    63,    64,    56,
    49,    39,    38,    23,     9,    80,     2,    48,    22,    30,
    33,    29,    21,     9,    17,    17,    58,    72,    52,    18,
    18,    18,    18,    39,    39,    56,    63,    39,    64,    56,
    20,    66,     9,     9,    40,    48,    48,    30,    33,    33,
    38,    52,    36,    62,    36,    12,    13,    15,    80,    80,
    19,    19,    16,    16,    30,     1,    65,    69,    71,    30,
    30,     6,    36,    30,    53,    43,    44,    42,    38,     6,
    10,     6,    10,     9,    28,    26,     9,    45,    35,    33,
    47,    13,    13,    13,    13,    27,    58,    51,    24,    12,
    38,    38,   nil,    39,    38,   nil,    39,   nil,    46,    39,
    57,    12,     8,   nil,     6,    57,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    58,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    36,   nil,   nil,    72,   nil,   nil,    30,
   nil,    36,    30,   nil,   nil,    30,     6,   nil,   nil,    13,
    15,    15,    15,   nil,   nil,   nil,    36,    28,    26,   nil,
   nil,   nil,   nil,     9,   nil,     9,   nil,   nil,   nil,    33,
    38,    33,   nil,    38,   nil,   nil,    38,   nil,   nil,   nil,
   nil,   nil,    55,    12,    13,    13,    13,    13,    13,    13,
    13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    13,    13,    49,   nil,    59,    12,   nil,    58,   nil,   nil,
   nil,    72,    36,    72,    12,    11,    39,   nil,   nil,     6,
     6,     6,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,    58,   nil,    37,
    12,   nil,   nil,   nil,   nil,    30,   nil,    30,   nil,   nil,
   nil,   nil,    30,   nil,   nil,    72,   nil,   nil,   nil,    36,
    60,   nil,    12,   nil,   nil,    28,    26,    13,   nil,   nil,
   nil,   nil,   nil,   nil,    12,   nil,   nil,    30,    12,    26,
    72,   nil,    72,    38,   nil,   nil,   nil,   nil,     6,     6,
     6,   nil,   nil,   nil,   nil,   nil,    72,   nil,    72,   nil,
    72,   nil,    72,   nil,    72,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,    37,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    13,    30,   nil,    36,    70,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    13 ]

racc_goto_pointer = [
   nil,    85,    36,   nil,   nil,   nil,   -96,   nil,  -171,   -12,
   -95,  -128,   -69,    -8,   nil,   -42,  -133,  -173,  -170,  -143,
  -165,  -184,  -189,  -195,  -111,   nil,   -72,   -14,   -73,     1,
    -1,   nil,   nil,    -6,   nil,    30,    -4,   -70,    30,   -37,
    24,   nil,    70,   -65,     7,    80,  -145,   -55,    -9,  -135,
   nil,    88,   -20,   -72,   -72,   -81,   -42,  -155,   -41,   -43,
   -72,   nil,  -193,  -130,  -239,    84,    21,   nil,   nil,    11,
   -48,     7,  -101,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -304,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   117,   108,   114,   235,   118,   nil,     7,
   nil,   nil,   185,   129,   119,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   nil,   nil,   238,
   236,    48,     5,     6,     8,    49,    86,   232,    57,    24,
    58,    27,   nil,   nil,   nil,   nil,   164,   nil,   186,   nil,
    29,   nil,   nil,    95,   nil,   nil,   nil,    99,    51,    52,
   350,   155,   156,   348,   271,   nil,   nil,    41,    42,   nil,
   245,   nil,   nil,   239,   240,   241,   242,   243,   244,   246,
   247,   248 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 97, :_reduce_none,
  1, 99, :_reduce_2,
  1, 99, :_reduce_3,
  1, 99, :_reduce_4,
  1, 99, :_reduce_5,
  1, 99, :_reduce_6,
  1, 99, :_reduce_7,
  1, 99, :_reduce_8,
  3, 99, :_reduce_9,
  1, 101, :_reduce_10,
  2, 101, :_reduce_11,
  1, 103, :_reduce_none,
  4, 103, :_reduce_13,
  3, 103, :_reduce_none,
  4, 103, :_reduce_none,
  5, 103, :_reduce_none,
  3, 103, :_reduce_17,
  3, 103, :_reduce_18,
  2, 103, :_reduce_19,
  2, 103, :_reduce_20,
  6, 103, :_reduce_none,
  7, 103, :_reduce_none,
  1, 104, :_reduce_none,
  3, 104, :_reduce_none,
  1, 109, :_reduce_none,
  2, 109, :_reduce_26,
  2, 109, :_reduce_27,
  4, 109, :_reduce_28,
  2, 109, :_reduce_29,
  2, 109, :_reduce_30,
  1, 110, :_reduce_31,
  1, 110, :_reduce_32,
  1, 110, :_reduce_33,
  1, 110, :_reduce_34,
  1, 110, :_reduce_35,
  1, 110, :_reduce_36,
  1, 111, :_reduce_none,
  4, 111, :_reduce_38,
  1, 112, :_reduce_none,
  3, 112, :_reduce_40,
  3, 112, :_reduce_41,
  3, 112, :_reduce_42,
  1, 113, :_reduce_none,
  3, 113, :_reduce_44,
  3, 113, :_reduce_45,
  1, 114, :_reduce_none,
  3, 114, :_reduce_47,
  3, 114, :_reduce_48,
  1, 115, :_reduce_none,
  3, 115, :_reduce_50,
  3, 115, :_reduce_51,
  3, 115, :_reduce_52,
  3, 115, :_reduce_53,
  1, 116, :_reduce_none,
  3, 116, :_reduce_55,
  3, 116, :_reduce_56,
  1, 117, :_reduce_none,
  3, 117, :_reduce_58,
  1, 118, :_reduce_none,
  3, 118, :_reduce_60,
  1, 119, :_reduce_none,
  3, 119, :_reduce_62,
  1, 120, :_reduce_none,
  3, 120, :_reduce_64,
  1, 121, :_reduce_none,
  3, 121, :_reduce_66,
  1, 122, :_reduce_none,
  5, 122, :_reduce_68,
  1, 108, :_reduce_none,
  3, 108, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 102, :_reduce_82,
  3, 102, :_reduce_83,
  1, 124, :_reduce_84,
  3, 125, :_reduce_none,
  1, 126, :_reduce_86,
  1, 126, :_reduce_none,
  1, 126, :_reduce_88,
  2, 126, :_reduce_89,
  2, 126, :_reduce_90,
  2, 126, :_reduce_91,
  1, 126, :_reduce_none,
  2, 126, :_reduce_none,
  1, 127, :_reduce_94,
  3, 127, :_reduce_95,
  1, 131, :_reduce_none,
  3, 131, :_reduce_97,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 129, :_reduce_102,
  1, 129, :_reduce_103,
  1, 129, :_reduce_104,
  1, 129, :_reduce_105,
  1, 129, :_reduce_106,
  1, 129, :_reduce_107,
  1, 129, :_reduce_108,
  1, 129, :_reduce_109,
  1, 129, :_reduce_110,
  1, 129, :_reduce_111,
  1, 129, :_reduce_112,
  1, 129, :_reduce_113,
  1, 129, :_reduce_114,
  1, 129, :_reduce_115,
  0, 140, :_reduce_116,
  6, 134, :_reduce_117,
  0, 141, :_reduce_118,
  5, 134, :_reduce_119,
  2, 134, :_reduce_120,
  1, 137, :_reduce_121,
  1, 139, :_reduce_none,
  2, 139, :_reduce_none,
  1, 138, :_reduce_124,
  3, 142, :_reduce_125,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_129,
  1, 144, :_reduce_130,
  2, 144, :_reduce_131,
  1, 143, :_reduce_132,
  3, 143, :_reduce_133,
  1, 145, :_reduce_none,
  3, 145, :_reduce_none,
  5, 135, :_reduce_136,
  4, 135, :_reduce_137,
  2, 135, :_reduce_138,
  1, 146, :_reduce_139,
  1, 148, :_reduce_none,
  2, 148, :_reduce_none,
  1, 147, :_reduce_none,
  3, 149, :_reduce_none,
  2, 149, :_reduce_none,
  2, 149, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_none,
  1, 151, :_reduce_none,
  2, 136, :_reduce_none,
  4, 136, :_reduce_none,
  5, 136, :_reduce_none,
  5, 136, :_reduce_none,
  6, 136, :_reduce_none,
  5, 136, :_reduce_none,
  6, 136, :_reduce_none,
  2, 136, :_reduce_none,
  1, 152, :_reduce_none,
  3, 152, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_none,
  1, 105, :_reduce_161,
  1, 105, :_reduce_162,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  2, 132, :_reduce_167,
  1, 132, :_reduce_none,
  2, 132, :_reduce_169,
  1, 155, :_reduce_170,
  3, 155, :_reduce_171,
  4, 155, :_reduce_172,
  3, 155, :_reduce_173,
  4, 155, :_reduce_174,
  3, 155, :_reduce_175,
  1, 154, :_reduce_176,
  2, 154, :_reduce_177,
  2, 154, :_reduce_178,
  3, 154, :_reduce_179,
  1, 156, :_reduce_none,
  5, 156, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_none,
  2, 158, :_reduce_none,
  2, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 106, :_reduce_none,
  2, 106, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 160, :_reduce_none,
  2, 160, :_reduce_none,
  3, 160, :_reduce_none,
  3, 160, :_reduce_none,
  4, 160, :_reduce_none,
  2, 160, :_reduce_197,
  3, 160, :_reduce_none,
  3, 160, :_reduce_199,
  4, 160, :_reduce_none,
  1, 133, :_reduce_201,
  3, 133, :_reduce_202,
  4, 133, :_reduce_203,
  4, 133, :_reduce_204,
  1, 107, :_reduce_205,
  3, 107, :_reduce_206,
  0, 98, :_reduce_none,
  2, 98, :_reduce_none,
  1, 161, :_reduce_209,
  2, 161, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  2, 162, :_reduce_none,
  2, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  4, 163, :_reduce_218,
  1, 165, :_reduce_219,
  3, 165, :_reduce_220,
  3, 164, :_reduce_none,
  0, 167, :_reduce_none,
  2, 167, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  3, 174, :_reduce_none,
  4, 174, :_reduce_none,
  3, 174, :_reduce_none,
  3, 166, :_reduce_none,
  1, 176, :_reduce_none,
  2, 176, :_reduce_none,
  5, 169, :_reduce_none,
  7, 169, :_reduce_none,
  5, 173, :_reduce_none,
  5, 170, :_reduce_none,
  7, 171, :_reduce_none,
  6, 172, :_reduce_none,
  7, 172, :_reduce_none,
  6, 172, :_reduce_none,
  7, 172, :_reduce_none,
  3, 175, :_reduce_none,
  2, 175, :_reduce_none,
  2, 175, :_reduce_none,
  2, 175, :_reduce_none,
  3, 175, :_reduce_none,
  1, 100, :_reduce_255,
  2, 100, :_reduce_256,
  3, 100, :_reduce_257,
  1, 177, :_reduce_258 ]

racc_reduce_n = 259

racc_shift_n = 431

racc_token_table = {
  false => 0,
  :error => 1,
  :INTEGER_CONSTANT => 2,
  :FLOATING_CONSTANT => 3,
  :OCTAL_CONSTANT => 4,
  :HEX_CONSTANT => 5,
  :CHARACTER_LITERAL => 6,
  "(" => 7,
  ")" => 8,
  :STRING_LITERAL => 9,
  "[" => 10,
  "]" => 11,
  "." => 12,
  :IDENTIFIER => 13,
  "->" => 14,
  "++" => 15,
  "--" => 16,
  "{" => 17,
  "}" => 18,
  "," => 19,
  :SIZEOF => 20,
  "&" => 21,
  "*" => 22,
  "+" => 23,
  "-" => 24,
  "~" => 25,
  "!" => 26,
  "/" => 27,
  "%" => 28,
  "<<" => 29,
  ">>" => 30,
  "<" => 31,
  ">" => 32,
  "<=" => 33,
  ">=" => 34,
  "==" => 35,
  "!=" => 36,
  "^" => 37,
  "|" => 38,
  "&&" => 39,
  "||" => 40,
  "?" => 41,
  ":" => 42,
  "=" => 43,
  "+=" => 44,
  "-=" => 45,
  "*=" => 46,
  "/=" => 47,
  "%=" => 48,
  "<<=" => 49,
  ">>=" => 50,
  "&=" => 51,
  "|=" => 52,
  "^=" => 53,
  ";" => 54,
  :EXTERN => 55,
  :STATIC => 56,
  :AUTO => 57,
  :REGISTER => 58,
  :VOID => 59,
  :CHAR => 60,
  :SHORT => 61,
  :INT => 62,
  :LONG => 63,
  :SIGNED => 64,
  :UNSIGNED => 65,
  :FLOAT => 66,
  :DOUBLE => 67,
  :BOOL => 68,
  :TYPE_NAME => 69,
  :STRUCT => 70,
  :UNION => 71,
  :ENUM => 72,
  :CONST => 73,
  :VOLATILE => 74,
  :__INLINE__ => 75,
  :INLINE => 76,
  :__INLINE => 77,
  :CINLINE => 78,
  :C_EXP => 79,
  :EXTENSION => 80,
  :TYPEDEF => 81,
  :CASE => 82,
  :DEFAULT => 83,
  :IF => 84,
  :ELSE => 85,
  :SWITCH => 86,
  :WHILE => 87,
  :DO => 88,
  :FOR => 89,
  :GOTO => 90,
  :CONTINUE => 91,
  :BREAK => 92,
  :RETURN => 93,
  "::" => 94,
  :_ASM => 95 }

racc_nt_base = 96

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INTEGER_CONSTANT",
  "FLOATING_CONSTANT",
  "OCTAL_CONSTANT",
  "HEX_CONSTANT",
  "CHARACTER_LITERAL",
  "\"(\"",
  "\")\"",
  "STRING_LITERAL",
  "\"[\"",
  "\"]\"",
  "\".\"",
  "IDENTIFIER",
  "\"->\"",
  "\"++\"",
  "\"--\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "SIZEOF",
  "\"&\"",
  "\"*\"",
  "\"+\"",
  "\"-\"",
  "\"~\"",
  "\"!\"",
  "\"/\"",
  "\"%\"",
  "\"<<\"",
  "\">>\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "\"^\"",
  "\"|\"",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\":\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\"*=\"",
  "\"/=\"",
  "\"%=\"",
  "\"<<=\"",
  "\">>=\"",
  "\"&=\"",
  "\"|=\"",
  "\"^=\"",
  "\";\"",
  "EXTERN",
  "STATIC",
  "AUTO",
  "REGISTER",
  "VOID",
  "CHAR",
  "SHORT",
  "INT",
  "LONG",
  "SIGNED",
  "UNSIGNED",
  "FLOAT",
  "DOUBLE",
  "BOOL",
  "TYPE_NAME",
  "STRUCT",
  "UNION",
  "ENUM",
  "CONST",
  "VOLATILE",
  "__INLINE__",
  "INLINE",
  "__INLINE",
  "CINLINE",
  "C_EXP",
  "EXTENSION",
  "TYPEDEF",
  "CASE",
  "DEFAULT",
  "IF",
  "ELSE",
  "SWITCH",
  "WHILE",
  "DO",
  "FOR",
  "GOTO",
  "CONTINUE",
  "BREAK",
  "RETURN",
  "\"::\"",
  "_ASM",
  "$start",
  "all",
  "C_parser",
  "primary_expression",
  "namespace_identifier",
  "string_literal_list",
  "expression",
  "postfix_expression",
  "argument_list",
  "type_qualifier",
  "type_name",
  "initializer_list",
  "assignment_expression",
  "unary_expression",
  "unary_operator",
  "cast_expression",
  "multiplicative_expression",
  "additive_expression",
  "shift_expression",
  "relational_expression",
  "equality_expression",
  "and_expression",
  "exclusive_or_expression",
  "inclusive_or_expression",
  "logical_and_expression",
  "logical_or_expression",
  "conditional_expression",
  "assignment_operator",
  "constant_expression",
  "declaration",
  "declaration_specifiers",
  "init_declarator_list",
  "storage_class",
  "type_specifier",
  "function_specifier",
  "init_declarator",
  "declarator",
  "initializer",
  "struct_specifier",
  "union_specifier",
  "enum_specifier",
  "struct_term",
  "struct_tag",
  "struct_declaration_list",
  "@1",
  "@2",
  "struct_declaration",
  "struct_declarator_list",
  "type_specifier_qualifier_list",
  "struct_declarator",
  "union_term",
  "union_tag",
  "union_declaration_list",
  "union_declaration",
  "union_declarator_list",
  "union_declarator",
  "enumerator_list",
  "enumerator",
  "pointer",
  "direct_declarator",
  "parameter_type_list",
  "parameter_list",
  "parameter_declaration",
  "abstract_declarator",
  "direct_abstract_declarator",
  "extension_statement",
  "statement",
  "typedef",
  "func_def",
  "declarator_list",
  "compoundstatement",
  "infunc_statement_list",
  "infunc_statement",
  "ifstatement",
  "whilestatement",
  "dowhilestatement",
  "forstatement",
  "switchstatement",
  "labelstatement",
  "gotostatement",
  "expressionstatement",
  "asm_statement" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 52)
  def _reduce_2(val, _values, result)
     result = [ :IDENTIFIER, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 60)
  def _reduce_3(val, _values, result)
     result = [ :INTEGER_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 62)
  def _reduce_4(val, _values, result)
     result = [ :FLOATING_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 64)
  def _reduce_5(val, _values, result)
     result = [ :OCTAL_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 66)
  def _reduce_6(val, _values, result)
     result = [ :HEX_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 68)
  def _reduce_7(val, _values, result)
     result = [ :CHARACTER_LITERAL, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 70)
  def _reduce_8(val, _values, result)
     result = [ :STRING_LITERAL_LIST, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 72)
  def _reduce_9(val, _values, result)
     result = [ :PARENTHESES, val[1].get_elements ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 76)
  def _reduce_10(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 78)
  def _reduce_11(val, _values, result)
     result << val[1] 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 84)
  def _reduce_13(val, _values, result)
     result = [ :OP_SUBSC, val[0], val[2] ] 
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 89)
  def _reduce_17(val, _values, result)
     result = [ :OP_DOT, val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 91)
  def _reduce_18(val, _values, result)
     result = [ :OP_REF, val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 92)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 93)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 106)
  def _reduce_26(val, _values, result)
     result = [ val[0], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 108)
  def _reduce_27(val, _values, result)
     result = [ :OP_SIZEOF_EXPR, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 110)
  def _reduce_28(val, _values, result)
     result = [ :OP_SIZEOF_TYPE, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 111)
  def _reduce_29(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 112)
  def _reduce_30(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 115)
  def _reduce_31(val, _values, result)
     result = :OP_U_AMP 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 116)
  def _reduce_32(val, _values, result)
     result = :OP_U_ASTER 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 117)
  def _reduce_33(val, _values, result)
     result = :OP_U_PLUS 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 118)
  def _reduce_34(val, _values, result)
     result = :OP_U_MINUS 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 119)
  def _reduce_35(val, _values, result)
     result = :OP_U_TILDE 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 120)
  def _reduce_36(val, _values, result)
     result = :OP_U_EXCLAM 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 125)
  def _reduce_38(val, _values, result)
      result = [ :CAST, val[1], val[3] ] 
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 130)
  def _reduce_40(val, _values, result)
     result = [ :OP_MULT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 132)
  def _reduce_41(val, _values, result)
     result = [ :OP_DIV, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 134)
  def _reduce_42(val, _values, result)
     result = [ :OP_REMAIN, val[0], val[2] ]  
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 139)
  def _reduce_44(val, _values, result)
     result = [ :OP_ADD, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 141)
  def _reduce_45(val, _values, result)
     result = [ :OP_SUB, val[0], val[2] ]  
    result
  end
.,.,

# reduce 46 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 146)
  def _reduce_47(val, _values, result)
     result = [ :OP_LSFT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 148)
  def _reduce_48(val, _values, result)
     result = [ :OP_RSFT, val[0], val[2] ]  
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 153)
  def _reduce_50(val, _values, result)
     result = [ :OP_LT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 155)
  def _reduce_51(val, _values, result)
     result = [ :OP_GT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 157)
  def _reduce_52(val, _values, result)
     result = [ :OP_LE, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 159)
  def _reduce_53(val, _values, result)
     result = [ :OP_GE, val[0], val[2] ]  
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 164)
  def _reduce_55(val, _values, result)
     result = [ :OP_EQ, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 166)
  def _reduce_56(val, _values, result)
     result = [ :OP_NE, val[0], val[2] ]  
    result
  end
.,.,

# reduce 57 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 171)
  def _reduce_58(val, _values, result)
     result = [ :OP_AND, val[0], val[2] ]  
    result
  end
.,.,

# reduce 59 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 176)
  def _reduce_60(val, _values, result)
     result = [ :OP_EOR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 61 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 181)
  def _reduce_62(val, _values, result)
     result = [ :OP_OR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 186)
  def _reduce_64(val, _values, result)
     result = [ :OP_LAND, val[0], val[2] ]  
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 191)
  def _reduce_66(val, _values, result)
     result = [ :OP_LOR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 196)
  def _reduce_68(val, _values, result)
     result = [ :OP_CEX, val[0], val[2].get_elements, val[4] ]  
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 218)
  def _reduce_82(val, _values, result)
    			result = Expression.new( val[0] )
			# result.print
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 223)
  def _reduce_83(val, _values, result)
    			result = Expression.new( val[2] )    # ',' の後ろを採用
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 229)
  def _reduce_84(val, _values, result)
    			result = Expression.new( val[0] )
			# result.print
#			res = result.eval_const( nil )

			# if res then
			#   puts "val: #{res}"
			# else
			#   puts "val: nil"
			# end
		
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 258)
  def _reduce_86(val, _values, result)
    			result = CIntType.new( -3 )    # storage class は無視
		
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 263)
  def _reduce_88(val, _values, result)
    			result = CIntType.new( -3 )
			result.set_qualifier val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 268)
  def _reduce_89(val, _values, result)
    			result = val[1]                # storage class は無視
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 272)
  def _reduce_90(val, _values, result)
    			result = val[1].merge val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 276)
  def _reduce_91(val, _values, result)
    			val[1].set_qualifier val[0]
                        result = val[1]
		
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 285)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 287)
  def _reduce_95(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 96 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 292)
  def _reduce_97(val, _values, result)
     val[0].set_initializer( val[2] ) 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 303)
  def _reduce_102(val, _values, result)
     set_no_type_name true; result = CVoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 305)
  def _reduce_103(val, _values, result)
     set_no_type_name true; result = CIntType.new(-11 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 307)
  def _reduce_104(val, _values, result)
     set_no_type_name true; result = CIntType.new( -2 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 309)
  def _reduce_105(val, _values, result)
     set_no_type_name true; result = CIntType.new( -3 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 311)
  def _reduce_106(val, _values, result)
     set_no_type_name true; result = CIntType.new( -4 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 314)
  def _reduce_107(val, _values, result)
              set_no_type_name true
         	result = CIntType.new( -3 )
          result.set_sign :SIGNED
        
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 320)
  def _reduce_108(val, _values, result)
              set_no_type_name true
          result = CIntType.new( -3 )
          result.set_sign :UNSIGNED
        
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 325)
  def _reduce_109(val, _values, result)
     set_no_type_name true; result = CFloatType.new(-32) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 327)
  def _reduce_110(val, _values, result)
     set_no_type_name true; result = CFloatType.new(-64) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 329)
  def _reduce_111(val, _values, result)
     set_no_type_name true; result = CBoolType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 331)
  def _reduce_112(val, _values, result)
     set_no_type_name true; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 333)
  def _reduce_113(val, _values, result)
     set_no_type_name true; result = CVoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 335)
  def _reduce_114(val, _values, result)
     set_no_type_name true; result = CVoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 337)
  def _reduce_115(val, _values, result)
     set_no_type_name true; result = CDefinedType.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 343)
  def _reduce_116(val, _values, result)
     StructType.set_define( true )  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 346)
  def _reduce_117(val, _values, result)
    			StructType.end_of_parse
      set_no_type_name true
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 353)
  def _reduce_118(val, _values, result)
    			result = CStructType.new()
			StructType.set_define( true )
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 358)
  def _reduce_119(val, _values, result)
    			StructType.end_of_parse
      set_no_type_name true
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 364)
  def _reduce_120(val, _values, result)
    			StructType.set_define( false )
			StructType.end_of_parse
      set_no_type_name true
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 371)
  def _reduce_121(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 380)
  def _reduce_124(val, _values, result)
    			result = CStructType.new( val[0].val )
			set_no_type_name true
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 389)
  def _reduce_125(val, _values, result)
    			val[1].each { |i|	# i: Decl
				i.set_type( val[0] )
				i.set_kind( :MEMBER )
				i.check
				CStructType.new_member( i )
			}
			result = val[1]
		
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 408)
  def _reduce_129(val, _values, result)
    			result = val[1].merge val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 412)
  def _reduce_130(val, _values, result)
    			result = CIntType.new( -3 )
			result.set_qualifier val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 417)
  def _reduce_131(val, _values, result)
    			val[1].set_qualifier val[0]
                        result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 423)
  def _reduce_132(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 425)
  def _reduce_133(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 435)
  def _reduce_136(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 436)
  def _reduce_137(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 437)
  def _reduce_138(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 440)
  def _reduce_139(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 483)
  def _reduce_161(val, _values, result)
     result = :CONST 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 484)
  def _reduce_162(val, _values, result)
     result = :VOLATILE 
    result
  end
.,.,

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 495)
  def _reduce_167(val, _values, result)
    			val[1].set_type( val[0] )
			result = val[1]
		
    result
  end
.,.,

# reduce 168 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 501)
  def _reduce_169(val, _values, result)
    			result = Decl.new( val[1].val )
			result.set_type( val[0] )
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 507)
  def _reduce_170(val, _values, result)
     result = Decl.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 509)
  def _reduce_171(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 512)
  def _reduce_172(val, _values, result)
    			val[0].set_type( CArrayType.new( val[2] ) )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 517)
  def _reduce_173(val, _values, result)
    			val[0].set_type( CArrayType.new )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 522)
  def _reduce_174(val, _values, result)
    		# 	Generator.warning( "W6001 need 'void' for no parameter"  )
			val[0].set_type( CFuncType.new )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 530)
  def _reduce_175(val, _values, result)
    		# 	Generator.warning( "W6002 need 'void' for no parameter"  )
			val[0].set_type( CFuncType.new )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 537)
  def _reduce_176(val, _values, result)
     result = CPtrType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 540)
  def _reduce_177(val, _values, result)
    			result = CPtrType.new
			result.set_qualifier( val[1] )
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 545)
  def _reduce_178(val, _values, result)
    			val[1].set_type(CPtrType.new)
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 550)
  def _reduce_179(val, _values, result)
    			ptrtype = CPtrType.new
			ptrtype.set_qualifier( val[1] )
			val[2].set_type( ptrtype )
			result = val[2]
		
    result
  end
.,.,

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 614)
  def _reduce_197(val, _values, result)
    			Generator.warning( "W6003 need 'void' for no parameter"  )
		
    result
  end
.,.,

# reduce 198 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 619)
  def _reduce_199(val, _values, result)
    			Generator.warning( "W6004 need 'void' for no parameter"  )
		
    result
  end
.,.,

# reduce 200 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 626)
  def _reduce_201(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 628)
  def _reduce_202(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 630)
  def _reduce_203(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 632)
  def _reduce_204(val, _values, result)
     result = C_EXP.new( val[2] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 637)
  def _reduce_205(val, _values, result)
    			result = [ val[0] ]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 641)
  def _reduce_206(val, _values, result)
    			val[0] << val[2]
			result = val[0]
		
    result
  end
.,.,

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 654)
  def _reduce_209(val, _values, result)
     set_no_type_name false 
    result
  end
.,.,

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 669)
  def _reduce_218(val, _values, result)
    			val[2].each{ |i|
			   i.set_kind( :TYPEDEF )
			}
			Typedef.new_decl_list( val[1], val[2] )
                        # val[1].show_tree 0
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 678)
  def _reduce_219(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 680)
  def _reduce_220(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 743)
  def _reduce_255(val, _values, result)
     result = NamespacePath.new( val[0].val, false ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 744)
  def _reduce_256(val, _values, result)
     result = NamespacePath.new( val[1].val, true ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 746)
  def _reduce_257(val, _values, result)
     result = val[0].append!( val[2].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 750)
  def _reduce_258(val, _values, result)
            while true
          # ';' が表れるまで、トークンを読み飛ばす。
          # gcc の構文拡張に対応すべきだが、単純な実装として、';' まで読み飛ばす。
          # トークン単位で読み飛ばしているので、文字列やコメント内の ';' は対象にならない。
          token = next_token
          if token[1].val == ";"
            break
          end
		      # p "skip: #{token[1].val}" 
        end
      
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class C_parser


