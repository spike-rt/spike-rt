#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Generator < Racc::Parser

module_eval(<<'...end bnf.y.rb/module_eval...', 'bnf.y.rb', 1517)

  RESERVED = {
    # keyword
    'namespace' => :NAMESPACE,
    'signature' => :SIGNATURE,
    'celltype' => :CELLTYPE,
    'cell' => :CELL,
    'attr' => :ATTRIBUTE,
    'var' => :VAR,
    'call' => :CALL,
    'entry' => :ENTRY,
    'composite' => :COMPOSITE,
    'require' => :REQUIRE,
    'factory' => :FACTORY,
    'FACTORY' => :CTFACTORY,
    'typedef' => :TYPEDEF,
    'struct' => :STRUCT,
    'region' => :REGION,
    'import' => :IMPORT,
    'import_C' => :IMPORT_C,
    'generate' => :GENERATE,
    '__tool_info__' => :TOOL_INFO,

    # types
    'void'    => :VOID,

    'volatile'=> :VOLATILE,
    'const'   => :CONST,

    'signed'  => :SIGNED,
    'unsigned'=> :UNSIGNED,

    'int8_t'    => :INT8_T,
    'int16_t'   => :INT16_T,
    'int32_t'   => :INT32_T,
    'int64_t'   => :INT64_T,
    'int128_t'  => :INT128_T,
    'uint8_t'   => :UINT8_T,
    'uint16_t'  => :UINT16_T,
    'uint32_t'  => :UINT32_T,
    'uint64_t'  => :UINT64_T,
    'uint128_t' => :UINT128_T,

    'float32_t'   => :FLOAT32_T,
    'double64_t'  => :DOUBLE64_T,
    'bool_t'      => :BOOL_T,
    'char_t'  => :CHAR_T,
    'schar_t'  => :SCHAR_T,
    'uchar_t'  => :UCHAR_T,

    # unrecommened types
    'int'     => :INT,
#   'intptr'  => :INTPTR,
    'short'   => :SHORT,
    'long'    => :LONG,

    # obsolete types
    'char'    => :CHAR,
#    'int8'    => :INT8,
#    'int16'   => :INT16,
#    'int32'   => :INT32,
#    'int64'   => :INT64,
#    'int128'  => :INT128,
#    'float'   => :FLOAT,
#    'double'  => :DOUBLE,
#    'bool'    => :BOOL,

    'enum'    => :ENUM,
    'enum8'   => :ENUM8,
    'enum16'  => :ENUM16,
    'enum32'  => :ENUM32,
    'enum64'  => :ENUM64,

    'true'    => :TRUE,
    'false'   => :FALSE,

    'C_EXP'   => :C_EXP,

    'Descriptor'   => :DESCRIPTOR,
  }

  # 指定子 '[]' 内でのみ使用できるキーワード
  RESERVED2 = {
    # specifier
    'id' => :ID,

    # signature
    'callback' => :CALLBACK,
    'context' => :CONTEXT,
    'deviate' => :DEVIATE,

    # celltype
    'singleton' => :SINGLETON,
    'idx_is_id' => :IDX_IS_ID,
    'active' => :ACTIVE,
    'pseudo_active' => :PSEUDO_ACTIVE,

    # port (entry)
    'inline' => :INLINE,
    'ref_desc' => :REF_DESC,   # call も可

    # port (call)
    'optional' => :OPTIONAL,
    'dynamic' => :DYNAMIC,

    # port (call), attribute
    'omit' => :OMIT,

    # attribute
    'choice' => :CHOICE,

    # cell
    'allocator' => :ALLOCATOR,
    'prototype' => :PROTOTYPE,
    'restrict'  => :RESTRICT,

    # FuncType
    'oneway' => :ONEWAY,

    # parameter (basic)
    'in' => :IN,
    'out' => :OUT,
    'inout' => :INOUT,
    'send' => :SEND,
    'receive' => :RECEIVE,

    # parameter 
    'size_is' => :SIZE_IS,
    'count_is' => :COUNT_IS,
    'string' => :STRING,
    'nullable' => :NULLABLE,

    'through' => :THROUGH,
    'in_through' => :IN_THROUGH,
    'out_through' => :OUT_THROUGH,
    'to_through' => :TO_THROUGH,
    'from_through' => :FROM_THROUGH,

    'node' => :NODE,
    'linkunit' => :LINKUNIT ,
    'domain' => :DOMAIN,
    'class' => :CLASS,
  }

  # 再帰的なパーサのためのスタック
  @@generator_nest = -1
  @@generator_stack = []
  @@current_locale = []

  # import_C 中である
  @@import_C = false

  # すべての構文解析が完了した
  @@b_end_all_parse = false

  # tag なし struct
  @@no_struct_tag_num = 0

  def self.parse( file_name, plugin = nil, b_reuse = false )
    # パーサインスタンスを生成(別パーサで読み込む)
    parser = Generator.new

    # plugin から import されている場合の plugin 設定
    parser.set_plugin plugin

    # reuse フラグを設定
    parser.set_reuse b_reuse

    # cdl をパース
    parser.parse( [file_name] )

    # 終期化　パーサスタックを戻す
    parser.finalize
  end

  def finalize

    # mikan Namespace.pop
    Namespace.pop
    Signature.pop
    Celltype.pop
    Cell.pop
    CompositeCelltype.pop
  end

  def set_plugin( plugin )
    @plugin = plugin
  end

  def self.get_plugin
    if @@generator_stack[@@generator_nest] then
      # tecsgen 引数の cdl が import される場合は nil
      return @@generator_stack[@@generator_nest].get_plugin
    else
      return nil
    end
  end

  def get_plugin
    @plugin
  end

  def set_reuse( b_reuse )
    @b_reuse = b_reuse
  end

  def self.is_reuse?
    if @@generator_stack[@@generator_nest] then
      # tecsgen 引数の cdl が import される場合は nil
      return @@generator_stack[@@generator_nest].is_reuse?
    else
      return false
    end
  end

  def is_reuse?
    @b_reuse
  end

  def parse(files)

    # mikan Namespace.push
    Namespace.push
    Signature.push
    Celltype.push
    Cell.push
    CompositeCelltype.push

    @@generator_nest += 1
    @@generator_stack[@@generator_nest] = self
    @in_specifier = false

    begin

      @q = []
      b_in_comment = false
      b_in_comment2 = false
      b_in_string = false

      # euc のコメントを utf8 として扱うと、コメントの終わりを誤る問題の対策
      TECS_LANG::set_kcode_binary

      files.each {|file|
    lineno = 1
    begin
      string = ""
#2.0      IO.foreach(file) {|line|
      TECSIO.foreach(file) {|line|
        col = 1
#        line.rstrip!     改行含む文字列を扱うようになったので、ここで空白を取り除けなくなった

        until line.empty?

          if b_in_comment || b_in_comment2 then
        case line
          # コメント終了
        when /\A\*\//
          if b_in_comment then
            b_in_comment = false
          end
        when /\A\-\-\-\+/
          if b_in_comment2 then
            b_in_comment2 = false
          end
        when /\A./
          ;
        when /\s+/     # line.rstrip! を止めたため \n などの空白文字とまっちするルールが必要になった
          ;
        end
          elsif b_in_string
        if line =~ /\A(?:[^"\\]|\\.)*"/
          string = "#{string}#{$&}"
          @q <<  [:STRING_LITERAL, Token.new(string, file, lineno, col)]
          b_in_string = false
        elsif line =~ /\A.*\\\n/     # 改行 \n は '.' にマッチしない
          string += $&
        elsif line =~ /\A.*\n/     # 改行 \n は '.' にマッチしない
          string += line
          # この位置では error メソッドは使えない (token 読出し前)
          puts "#{file}:#{lineno}:#{col}: error: string literal has newline without escape"
          @@n_error += 1
        end
          else
        case line
        # 空白、プリプロセスディレクティブ
        when /\A\s+/
          ;
        # 識別子
        when /\A[a-zA-Z_]\w*/
          word = $&
          @q << [RESERVED[word] || :IDENTIFIER, Token.new(word.intern, file, lineno, col)]
        # 16 進数定数
        when /\A0x[0-9A-Fa-f]+/
          @q << [:HEX_CONSTANT, Token.new($&, file, lineno, col)]
        # 8 進数定数
        when /\A0[0-7]+/
          @q << [:OCTAL_CONSTANT, Token.new($&, file, lineno, col)]
        # 浮動小数定数
        when /\A[0-9]+\.([0-9]*)?([Ee][+-]?[0-9]+)?/
          @q << [:FLOATING_CONSTANT, Token.new($&, file, lineno, col)]
        # 整数定数
        when /\A\d+/
          @q << [:INTEGER_CONSTANT, Token.new($&.to_i, file, lineno, col)]
        # 文字定数
        when /\A'(?:[^'\\]|\\.)'/
          @q << [:CHARACTER_LITERAL, Token.new($&, file, lineno, col)]
        # 文字列
#        "#include  #include #include \"../systask/logtask.cfg\"       最後の " 忘れ)で無限ループ
#        when /\A"(?:[^"\\]+|\\.)*"/
        when /\A"(?:[^"\\]|\\.)*"/   # これはうまく行くようだ
          @q << [:STRING_LITERAL, Token.new($&, file, lineno, col)]
        # 文字列 (改行あり)
        when /\A"(?:[^"\\]|\\.)*\\\n$/
          string = $&
          b_in_string = true
        # 文字列 (改行あり, escape なし)
        when /\A("(?:[^"\\]|\e\.)*)\n$/
          string = $1 + "\\\n"
          b_in_string = true
          # この位置では error メソッドは使えない (token 読出し前) # mikan cdl_error ではない
          puts "#{file}:#{lineno}:#{col}: error: string literal has newline without escape"
          @@n_error += 1
        # 山括弧で囲まれた文字列
        # when /\A<[0-9A-Za-z_\. \/]+>/   # AB: angle bracke
        when /\A<(?:[^>\\]|\\.)*>/   # これはうまく行くようだ
          @q << [:AB_STRING_LITERAL, Token.new($&, file, lineno, col)]
        # 行コメント
        when /\A\/\/.*$/
          # 読み飛ばすだけ
        # コメント開始
        when /\A\/\*/
          b_in_comment = true
        when /^\+\-\-\-/
          b_in_comment2 = true
        # '>>', '<<' など
        when /\A>>/, /\A<</, /\A==/, /\A!=/, /\A\&\&/, /\A\|\|/
          @q << [$&, Token.new($&, file, lineno, col)]
        when /\A::/, /\A=>/, /\A<=/, /\A>=/
          @q << [$&, Token.new($&, file, lineno, col)]
        # '(', ')' など一文字の記号、または未知の記号
        when /\A./
          @q << [$&, Token.new($&, file, lineno, col)]
        else
          raise
        end
          end

          line = $'
          col += $&.length
        end

        lineno += 1
      }

    rescue => evar
      Generator.error( "G1014 while open or reading \'$1\'" , file )
      if $debug then
        p puts( evar )
        pp $@
      end
    end
      }

      # 終了の印
      @q << nil

      @yydebug = true
      do_parse

    ensure
      @@generator_nest -= 1
      TECS_LANG::reset_kcode
    end

  end

  def next_token
    token = @q.shift

    if token then
      @@current_locale[@@generator_nest] = token[1].locale

      if token[0] == :IDENTIFIER then
        # TYPE_NAME トークンへ置換え
        if Namespace.is_typename?( token[1].val ) then
        token[0] = :TYPE_NAME
        elsif @in_specifier && RESERVED2[ token[1].val.to_s ] then
        # 指定子キーワード（ '[', ']' 内でのみ有効)
        token[0] = RESERVED2[ token[1].val.to_s ]
        end
      end

      if $debug then     # 070107 token 無効時ここを通さないようした (through 対応 -d の時に例外発生) 
        locale = @@current_locale[@@generator_nest]
        if token then
            print( "#{locale[0]}: line #{locale[1]} : #{token[0]} '#{token[1].val}'\n" )
        else
            print( "#{locale[0]}: line #{locale[1]} : EOF\n" )
        end
      end
    else
      token = [ false, false ]
    end

    token
  end

  def on_error(t, v, vstack)
    # p t, token_to_str(t), vstack
    if token_to_str(t) == "$end" then
      Generator.error( "G1015 Unexpected EOF"  )
    else
      Generator.error( "G1016 syntax error near \'$1\'" , v.val )
    end
  end

  def self.current_locale
    @@current_locale[ @@generator_nest ]
  end

  @@n_error = 0
  @@n_warning = 0
  @@n_info = 0

  # このメソッドは構文解析、意味解析からのみ呼出し可（コード生成でエラー発生は不適切）
  def self.error( msg, *arg )
    locale = nil
    self.error2( locale, msg, *arg )
  end

  def self.error2( locale, msg, *arg )
    @@n_error += 1

    msg = TECSMsg.get_error_message( msg )
    # $1, $2, ... を arg で置換
    count = 1
    arg.each{ |a|
      str = TECSIO.str_code_convert( msg, a.to_s )
      msg.sub!( /\$#{count}/, str )
      count += 1
    }

    # import_C の中でのエラー？
    if @@import_C then
      # C_parser.error( msg )
      locale = C_parser.current_locale
    else

      # Node の記憶する 位置 (locale) を使用した場合、変更以前に比べ、
      # 問題発生箇所と異なる位置にエラーが出るため、構文解析中のエラー
      # は、解析中の位置を出力する．(new_XXX で owner が子要素のチェッ
      # クをすると owner の行番号が出てしまう点で、ずれが生じている)

      if @@b_end_all_parse == false || locale == nil then
    locale = @@current_locale[ @@generator_nest ]
      end
    end
    if locale then
      Console.puts "#{locale[0]}:#{locale[1]}:#{locale[2]}: error: #{msg}"
    else
      Console.puts "error: #{msg}"
    end
  end

  # このメソッドは構文解析、意味解析からのみ呼出し可（コード生成でウォーニング発生は不適切）
  def self.warning( msg, *arg )
    locale = nil
    self.warning2( locale, msg, *arg )
  end

  def self.warning2( locale, msg, *arg )
    @@n_warning += 1

    msg = TECSMsg.get_warning_message( msg )
    # $1, $2, ... を arg で置換
    count = 1
    arg.each{ |a|
      str = TECSIO.str_code_convert( msg, a.to_s )
      msg.sub!( /\$#{count}/, str )
      count += 1
    }

    # import_C の中でのウォーニング？
    if @@import_C then
      # C_parser.warning( msg )
      locale = C_parser.current_locale
    else
      if @@b_end_all_parse == false || locale == nil then
    locale = @@current_locale[ @@generator_nest ]
      end
    end
    if locale then
      Console.puts "#{locale[0]}:#{locale[1]}:#{locale[2]}: warning: #{msg}"
    else
      Console.puts "warning: #{msg}"
    end
  end

  # このメソッドは構文解析、意味解析からのみ呼出し可
  def self.info( msg, *arg )
    locale = nil
    self.info2( locale, msg, *arg )
  end

  def self.info2( locale, msg, *arg )
    @@n_info += 1

    msg = TECSMsg.get_info_message( msg )
    # $1, $2, ... を arg で置換
    count = 1
    arg.each{ |a|
      str = TECSIO.str_code_convert( msg, a.to_s )
      msg.sub!( /\$#{count}/, str )
      count += 1
    }

    # import_C の中でのウォーニング？
    if @@import_C then
      # C_parser.info( msg )
      locale = C_parser.current_locale
    else
      if @@b_end_all_parse == false || locale == nil then
    locale = @@current_locale[ @@generator_nest ]
      end
    end
    if locale then
      Console.puts "#{locale[0]}:#{locale[1]}:#{locale[2]}: info: #{msg}"
    else
      Console.puts "info: #{msg}"
    end
  end

  def self.get_n_error
    @@n_error
  end

  def self.get_n_warning
    @@n_warning
  end

  def self.get_n_info
    @@n_info
  end

  def self.get_nest
    @@generator_nest
  end

  def self.parsing_C?
    @@import_C
  end

  #===  '[' specifier 始め
  def set_in_specifier
    # p "set_in_specifier"
    @in_specifier = true
  end

  #=== ']' specifier 終わり
  def unset_in_specifier
    # p "unset_in_specifier"
    @in_specifier = false
  end

  # statement_specifier は構文解釈途中で参照したいため
  @@statement_specifier_stack = []
  def self.add_statement_specifier( ss )
    if( @@statement_specifier_stack[ @@generator_nest ] == nil )then
      @@statement_specifier_stack[ @@generator_nest ] = [ ss ]
    else
      @@statement_specifier_stack[ @@generator_nest ] << ss
    end
  end


  def self.get_statement_specifier
    spec_list = @@statement_specifier_stack[ @@generator_nest ]
    @@statement_specifier_stack[ @@generator_nest ] = nil
    return spec_list
  end

  #=== すべての構文解析が完了したことを報告
  def self.end_all_parse
    @@b_end_all_parse = true
  end

...end bnf.y.rb/module_eval...
##### State transition tables begin ###

clist = [
'65,688,687,334,568,548,77,773,821,334,77,77,201,202,203,204,205,206',
'207,209,87,210,825,251,139,139,822,214,215,216,217,218,219,220,180,724',
'99,876,658,139,139,139,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24',
'25,26,27,28,29,30,31,32,33,34,35,38,470,164,77,139,192,42,43,44,45,46',
'47,48,49,48,49,847,139,334,139,139,139,823,98,139,139,655,69,846,65',
'163,192,192,192,192,67,68,77,70,71,77,72,824,73,310,311,330,866,139',
'192,137,137,331,333,192,738,74,74,75,76,76,181,192,704,192,137,137,137',
'698,78,417,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28',
'29,30,31,32,33,34,35,38,137,430,416,757,521,42,43,44,45,46,47,48,49',
'137,450,137,137,137,65,74,137,137,76,310,311,330,69,351,352,77,77,331',
'333,826,67,68,139,70,71,139,72,404,73,403,137,310,311,312,86,313,314',
'316,317,839,85,77,74,75,665,76,5,6,7,10,13,14,15,16,17,18,19,20,21,22',
'23,24,25,26,27,28,29,30,31,32,33,34,35,38,419,647,827,843,164,42,43',
'44,45,46,47,48,49,672,151,278,288,150,65,677,183,137,690,701,710,280',
'69,659,844,77,183,418,172,732,67,68,590,70,71,589,72,848,73,137,671',
'646,137,289,77,648,676,334,267,691,700,711,74,75,77,76,5,6,7,10,13,14',
'15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,734',
'507,320,353,354,42,43,44,45,46,47,48,49,701,872,86,590,86,871,589,455',
'85,258,85,841,87,69,87,359,360,436,711,506,319,67,68,-391,70,71,856',
'72,258,73,401,804,201,202,203,204,205,206,207,209,257,210,840,74,75',
'139,76,214,215,216,217,218,219,220,310,311,330,857,164,400,850,402,331',
'333,310,311,312,880,313,314,316,317,201,202,203,204,205,206,207,209',
'459,210,353,354,408,139,574,214,215,216,217,218,219,220,481,851,481',
'482,881,482,852,236,461,462,463,460,87,201,202,203,204,205,206,207,209',
'409,210,395,396,397,139,237,214,215,216,217,218,219,220,201,202,203',
'204,205,206,207,209,641,210,459,137,404,139,709,214,215,216,217,218',
'219,220,348,293,294,348,642,349,350,788,349,350,461,462,463,460,640',
'201,202,203,204,205,206,207,209,834,210,395,396,397,139,137,214,215',
'216,217,218,219,220,201,202,203,204,205,206,207,209,441,210,405,337',
'854,139,835,214,215,216,217,218,219,220,887,813,546,210,886,137,544',
'440,442,443,444,445,860,201,202,203,204,205,206,207,209,164,210,365',
'366,863,139,137,214,215,216,217,218,219,220,201,202,203,204,205,206',
'207,209,889,210,441,353,354,139,523,214,215,216,217,218,219,220,348',
'355,356,357,358,349,350,137,869,440,442,443,444,445,888,201,202,203',
'204,205,206,207,209,164,210,873,784,874,139,137,214,215,216,217,218',
'219,220,201,202,203,204,205,206,207,209,342,210,343,875,344,139,163',
'214,215,216,217,218,219,220,86,86,86,353,354,137,85,85,85,878,87,87',
'87,201,202,203,204,205,206,207,209,164,210,602,337,879,139,137,214,215',
'216,217,218,219,220,201,202,203,204,205,206,207,209,164,210,383,384',
'385,139,557,214,215,216,217,218,219,220,378,379,380,381,382,386,846',
'137,355,356,357,358,146,147,513,201,202,203,204,205,206,207,209,164',
'210,351,352,267,139,137,214,215,216,217,218,219,220,201,202,203,204',
'205,206,207,209,151,210,883,150,334,139,782,214,215,216,217,218,219',
'220,86,86,86,353,354,137,85,85,85,885,87,87,87,201,202,203,204,205,206',
'207,209,411,210,890,239,891,139,137,214,215,216,217,218,219,220,201',
'202,203,204,205,206,207,209,615,210,520,521,893,139,410,214,215,216',
'217,218,219,220,86,3,807,86,799,800,85,137,894,85,87,797,798,87,806',
'201,202,203,204,205,206,207,209,865,210,631,294,79,139,137,214,215,216',
'217,218,219,220,201,202,203,204,205,206,207,209,88,210,351,352,89,139',
'864,214,215,216,217,218,219,220,86,86,86,359,360,137,85,85,85,90,87',
'87,87,201,202,203,204,205,206,207,209,94,210,125,126,127,139,137,214',
'215,216,217,218,219,220,201,202,203,204,205,206,207,209,131,210,383',
'384,385,139,133,214,215,216,217,218,219,220,378,379,380,381,382,386',
'135,137,355,356,357,358,142,144,145,201,202,203,204,205,206,207,209',
'148,210,156,157,160,139,137,214,215,216,217,218,219,220,201,202,203',
'204,205,206,207,209,161,210,165,166,167,139,168,214,215,216,217,218',
'219,220,169,170,310,311,312,137,313,314,316,317,173,174,175,201,202',
'203,204,205,206,207,209,176,210,177,178,179,139,137,214,215,216,217',
'218,219,220,201,202,203,204,205,206,207,209,183,210,187,188,189,139',
'190,214,215,216,217,218,219,220,139,192,194,195,196,198,249,137,87,259',
'160,267,210,183,267,201,202,203,204,205,206,207,209,267,210,275,282',
'282,139,137,214,215,216,217,218,219,220,201,202,203,204,205,206,207',
'209,285,210,287,290,291,139,292,214,215,216,217,218,219,220,295,296',
'139,336,192,137,337,361,362,363,364,369,370,201,202,203,204,205,206',
'207,209,372,210,373,160,406,139,137,214,215,216,217,218,219,220,201',
'202,203,204,205,206,207,209,407,210,412,144,414,139,415,214,215,216',
'217,218,219,220,420,421,422,423,424,425,448,137,449,453,464,467,468',
'475,476,201,202,203,204,205,206,207,209,477,210,236,484,485,139,137',
'214,215,216,217,218,219,220,201,202,203,204,205,206,207,209,237,210',
'236,210,514,139,515,214,215,216,217,218,219,220,516,517,518,524,525',
'137,526,267,237,529,210,267,534,201,202,203,204,205,206,207,209,529',
'210,183,537,210,139,137,214,215,216,217,218,219,220,201,202,203,204',
'205,206,207,209,210,210,183,183,543,139,547,214,215,216,217,218,219',
'220,550,551,552,554,555,558,192,137,267,-236,569,572,575,192,579,201',
'202,203,204,205,206,207,209,581,210,334,584,198,139,137,214,215,216',
'217,218,219,220,201,202,203,204,205,206,207,209,597,210,598,361,362',
'139,363,214,215,216,217,218,219,220,364,599,615,616,337,137,617,620',
'621,623,624,625,626,201,202,203,204,205,206,207,209,627,210,628,712',
'629,139,137,214,215,216,217,218,219,220,201,202,203,204,205,206,207',
'209,210,210,632,164,267,139,652,214,215,216,217,218,219,220,267,267',
'673,674,678,683,684,137,685,689,692,694,695,696,698,201,202,203,204',
'205,206,207,209,699,210,192,702,210,139,137,214,215,216,217,218,219',
'220,201,202,203,204,205,206,207,209,210,210,210,707,716,139,164,214',
'215,216,217,218,219,220,718,719,720,164,722,137,723,725,726,727,730',
'735,738,201,202,203,204,205,206,207,209,581,210,74,198,754,139,137,214',
'215,216,217,218,219,220,102,103,104,105,106,107,108,109,110,111,112',
'113,114,755,758,201,202,203,204,205,206,207,209,529,210,762,763,764',
'139,137,214,215,216,217,218,219,220,765,766,117,118,119,120,121,122',
'123,124,529,267,771,772,137,776,267,783,791,5,6,7,10,13,14,15,16,17',
'18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,792,793,137',
'801,803,42,43,44,45,46,47,48,49,201,202,203,204,205,206,207,209,192',
'210,805,595,808,139,809,214,215,216,217,218,219,220,810,813,814,815',
'137,201,202,203,204,205,206,207,209,816,210,665,730,183,139,,214,215',
'216,217,218,219,220,201,202,203,204,205,206,207,209,,210,,,,139,731',
'214,215,216,217,218,219,220,201,202,203,204,205,206,207,209,,210,733',
',,139,,214,215,216,217,218,219,220,732,201,202,203,204,205,206,207,209',
',210,,,,139,137,214,215,216,217,218,219,220,117,118,119,120,121,122',
'123,124,,,,201,202,203,204,205,206,207,346,137,210,,,,139,,214,215,216',
'217,218,219,220,117,118,119,120,121,122,123,124,137,,,,,,,,201,202,203',
'204,205,206,207,209,,210,,,,139,137,214,215,216,217,218,219,220,20,21',
'22,23,24,25,26,27,28,29,30,31,32,33,,137,,,,5,6,7,10,13,14,15,16,17',
'18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,,137,,,,42',
'43,44,45,46,47,48,49,201,202,203,204,205,206,207,209,,210,,,,139,,214',
'215,216,217,218,219,220,,,,,137,201,202,203,204,205,206,207,209,,210',
',,,139,,214,215,216,217,218,219,220,,,,,,,201,202,203,204,205,206,207',
'209,,210,,784,,139,236,214,215,216,217,218,219,220,201,202,203,204,205',
'206,207,209,,210,,,237,139,,214,215,216,217,218,219,220,,201,202,203',
'204,205,206,207,209,137,210,,,,139,,214,215,216,217,218,219,220,,201',
'202,203,204,205,206,207,209,,210,,,137,139,,214,215,216,217,218,219',
'220,,,,,201,202,203,204,205,206,207,209,,210,,,,139,137,214,215,216',
'217,218,219,220,747,748,750,751,,,,,,198,749,795,,,137,,,,753,752,,236',
'600,,,,,,,,,,,747,748,750,751,137,,,,237,198,749,,,,236,,,,753,752,',
',,,,,,137,,,,,,,237,,475,,,201,202,203,204,205,206,207,209,,210,,679',
',139,137,214,215,216,217,218,219,220,201,202,203,204,205,206,207,209',
'475,210,,595,,139,,214,215,216,217,218,219,220,201,202,203,204,205,206',
'207,209,,210,,,,139,,214,215,216,217,218,219,220,201,202,203,204,205',
'206,207,209,,210,,,,139,,214,215,216,217,218,219,220,747,748,750,751',
'747,748,750,751,,198,749,,,198,749,,,,753,752,137,,753,752,,236,,,,',
',201,202,203,204,205,206,207,209,,210,,137,,139,237,214,215,216,217',
'218,219,220,,,,,,,,,,,,137,,,,,475,,,,475,,,,,,,,,,,,,137,102,103,104',
'105,106,107,108,109,110,111,112,113,114,236,,,,,,481,593,,592,,,,,,',
'87,,,,237,,,,,,117,118,119,120,121,122,123,124,,,,,,137,5,6,7,10,13',
'14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38',
'681,,77,,,42,43,44,45,46,47,48,49,102,103,104,105,106,107,108,109,110',
'111,112,113,114,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24',
'25,26,27,28,29,30,31,32,33,34,35,38,243,,77,,,42,43,44,45,46,47,48,49',
',,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25',
'26,27,28,29,30,31,32,33,34,35,38,77,,,,,42,43,44,45,46,47,48,49,,,,',
',,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27',
'28,29,30,31,32,33,34,35,38,77,,,,,42,43,44,45,46,47,48,49,509,,,,,,',
',,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28',
'29,30,31,32,33,34,35,38,77,,,,,42,43,44,45,46,47,48,49,,,,,,,,,,,,,',
',,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30',
'31,32,33,34,35,38,77,,,,,42,43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5',
'6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33',
'34,35,38,129,669,,,,42,43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6,7',
'10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34',
'35,38,77,,,,,42,43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14',
'15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,77',
'649,,,,42,43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16',
'17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,77,643,',
',,42,43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17',
'18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,77,432,,,,42',
'43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19',
'20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,77,519,,,,42,43,44',
'45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21',
'22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,77,,,,,42,43,44,45,46,47',
'48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24',
'25,26,27,28,29,30,31,32,33,34,35,38,77,388,,,,42,43,44,45,46,47,48,49',
',,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26',
'27,28,29,30,31,32,33,34,35,38,77,,,,,42,43,44,45,46,47,48,49,,,,,,,',
',,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28',
'29,30,31,32,33,34,35,38,,,,,,42,43,44,45,46,47,48,49,5,6,7,10,13,14',
'15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,,',
',,,42,43,44,45,46,47,48,49,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23',
'24,25,26,27,28,29,30,31,32,33,34,35,38,,,,,,42,43,44,45,46,47,48,49',
'5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32',
'33,34,35,38,,,,,,42,43,44,45,46,47,48,49,5,6,7,10,13,14,15,16,17,18',
'19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,,,,,,42,43,44',
'45,46,47,48,49,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27',
'28,29,30,31,32,33,34,35,38,,,,,,42,43,44,45,46,47,48,49,5,6,7,10,13',
'14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38',
',,,,,42,43,44,45,46,47,48,49,5,6,7,10,13,14,15,16,17,18,19,20,21,22',
'23,24,25,26,27,28,29,30,31,32,33,34,35,38,,,,,,42,43,44,45,46,47,48',
'49,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31',
'32,33,34,35,38,,,,,,42,43,44,45,46,47' ]
        racc_action_table = arr = ::Array.new(3601, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'2,605,604,851,451,426,195,715,784,195,335,2,846,846,846,846,846,846',
'846,846,87,846,789,155,642,846,785,846,846,846,846,846,846,846,126,654',
'41,862,570,331,534,702,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'2,2,2,2,2,335,100,622,292,426,2,2,2,2,2,2,2,2,87,87,822,309,573,701',
'74,90,787,41,847,514,570,2,822,297,100,451,605,604,715,2,2,190,2,2,297',
'2,788,2,195,195,195,851,515,789,642,846,195,195,155,792,335,2,2,335',
'2,126,654,622,862,331,534,702,803,2,281,297,297,297,297,297,297,297',
'297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297',
'297,297,297,297,292,297,281,693,693,297,297,297,297,297,297,297,297',
'309,314,701,74,90,162,622,847,514,622,573,573,573,297,492,492,162,790',
'573,573,790,297,297,733,297,297,569,297,266,297,266,515,190,190,190',
'83,190,190,190,190,809,83,571,297,297,571,297,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,283,563,790,818,115,162,162,162,162,162,162,162',
'162,578,149,173,179,149,188,585,173,314,607,618,637,174,162,571,820',
'188,174,283,115,818,162,162,480,162,162,480,162,824,162,733,578,563',
'569,179,321,563,585,321,825,607,618,637,162,162,300,162,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,668,367,193,494,494,188,188,188,188',
'188,188,188,188,761,857,255,588,374,857,588,321,255,158,374,811,255',
'188,374,500,500,300,668,367,193,188,188,826,188,188,842,188,260,188',
'264,761,732,732,732,732,732,732,732,732,158,732,811,188,188,732,188',
'732,732,732,732,732,732,732,321,321,321,842,457,260,827,264,321,321',
'300,300,300,870,300,300,300,300,366,366,366,366,366,366,366,366,324',
'366,495,495,271,366,457,366,366,366,366,366,366,366,479,831,341,479',
'870,341,832,732,324,324,324,324,341,365,365,365,365,365,365,365,365',
'271,365,256,256,256,365,732,365,365,365,365,365,365,365,516,516,516',
'516,516,516,516,516,559,516,574,732,636,516,636,516,516,516,516,516',
'516,516,490,184,184,491,559,490,490,732,491,491,574,574,574,574,559',
'517,517,517,517,517,517,517,517,794,517,523,523,523,517,366,517,517',
'517,517,517,517,517,518,518,518,518,518,518,518,518,557,518,268,268',
'836,518,794,518,518,518,518,518,518,518,881,841,421,844,881,365,421',
'557,557,557,557,557,845,259,259,259,259,259,259,259,259,393,259,232',
'232,848,259,516,259,259,259,259,259,259,259,364,364,364,364,364,364',
'364,364,882,364,303,497,497,364,393,364,364,364,364,364,364,364,223',
'226,226,226,226,223,223,517,856,303,303,303,303,303,882,843,843,843',
'843,843,843,843,843,583,843,858,843,859,843,518,843,843,843,843,843',
'843,843,524,524,524,524,524,524,524,524,212,524,212,861,212,524,583',
'524,524,524,524,524,524,524,708,147,86,496,496,259,708,147,86,866,708',
'147,86,525,525,525,525,525,525,525,525,438,525,508,508,867,525,364,525',
'525,525,525,525,525,525,526,526,526,526,526,526,526,526,376,526,248',
'248,248,526,438,526,526,526,526,526,526,526,248,248,248,248,248,248',
'873,843,499,499,499,499,80,80,376,363,363,363,363,363,363,363,363,728',
'363,224,224,876,363,524,363,363,363,363,363,363,363,889,889,889,889',
'889,889,889,889,84,889,877,84,878,889,728,889,889,889,889,889,889,889',
'128,610,428,225,225,525,128,610,428,880,128,610,428,150,150,150,150',
'150,150,150,150,273,150,883,150,884,150,526,150,150,150,150,150,150',
'150,865,865,865,865,865,865,865,865,768,865,390,390,892,865,273,865',
'865,865,865,865,865,865,434,1,768,521,753,753,434,363,893,521,434,752',
'752,521,768,404,404,404,404,404,404,404,404,849,404,549,549,3,404,889',
'404,404,404,404,404,404,404,362,362,362,362,362,362,362,362,8,362,493',
'493,9,362,849,362,362,362,362,362,362,362,247,294,4,227,227,150,247',
'294,4,16,247,294,4,361,361,361,361,361,361,361,361,38,361,67,68,69,361',
'865,361,361,361,361,361,361,361,360,360,360,360,360,360,360,360,71,360',
'513,513,513,360,72,360,360,360,360,360,360,360,513,513,513,513,513,513',
'73,404,498,498,498,498,75,76,78,359,359,359,359,359,359,359,359,82,359',
'92,93,98,359,362,359,359,359,359,359,359,359,821,821,821,821,821,821',
'821,821,99,821,103,105,107,821,108,821,821,821,821,821,821,821,112,114',
'556,556,556,361,556,556,556,556,117,118,119,358,358,358,358,358,358',
'358,358,120,358,123,124,125,358,360,358,358,358,358,358,358,358,296',
'296,296,296,296,296,296,296,127,296,129,130,132,296,134,296,296,296',
'296,296,296,296,137,138,140,141,143,145,152,359,153,160,161,165,166',
'167,169,357,357,357,357,357,357,357,357,170,357,171,175,176,357,821',
'357,357,357,357,357,357,357,816,816,816,816,816,816,816,816,177,816',
'178,180,181,816,182,816,816,816,816,816,816,816,186,187,192,197,200',
'358,208,228,229,230,231,237,238,807,807,807,807,807,807,807,807,242',
'807,244,258,269,807,296,807,807,807,807,807,807,807,806,806,806,806',
'806,806,806,806,270,806,274,275,277,806,279,806,806,806,806,806,806',
'806,284,286,288,289,290,291,312,357,313,315,330,332,333,336,338,356',
'356,356,356,356,356,356,356,339,356,807,343,344,356,816,356,356,356',
'356,356,356,356,355,355,355,355,355,355,355,355,807,355,806,369,381',
'355,382,355,355,355,355,355,355,355,383,384,385,395,396,807,397,402',
'806,403,406,409,410,354,354,354,354,354,354,354,354,411,354,412,413',
'414,354,806,354,354,354,354,354,354,354,353,353,353,353,353,353,353',
'353,415,353,416,418,420,353,423,353,353,353,353,353,353,353,429,430',
'432,435,436,441,446,356,447,450,452,455,459,465,466,352,352,352,352',
'352,352,352,352,467,352,468,470,475,352,355,352,352,352,352,352,352',
'352,351,351,351,351,351,351,351,351,483,351,486,501,502,351,503,351',
'351,351,351,351,351,351,504,505,528,530,531,354,532,535,536,538,539',
'540,541,641,641,641,641,641,641,641,641,542,641,545,641,547,641,353',
'641,641,641,641,641,641,641,350,350,350,350,350,350,350,350,548,350',
'553,554,558,350,567,350,350,350,350,350,350,350,568,575,580,582,586',
'591,594,352,596,606,608,612,613,614,615,349,349,349,349,349,349,349',
'349,616,349,619,620,621,349,351,349,349,349,349,349,349,349,348,348',
'348,348,348,348,348,348,625,348,626,630,643,348,645,348,348,348,348',
'348,348,348,647,648,649,651,652,641,653,655,657,659,662,669,673,726',
'726,726,726,726,726,726,726,674,726,675,677,680,726,350,726,726,726',
'726,726,726,726,469,469,469,469,469,469,469,469,469,469,469,469,469',
'682,697,346,346,346,346,346,346,346,346,699,346,703,704,705,346,349',
'346,346,346,346,346,346,346,706,707,469,469,469,469,469,469,469,469',
'709,711,712,713,348,719,724,730,737,346,346,346,346,346,346,346,346',
'346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346',
'346,346,346,739,741,726,756,759,346,346,346,346,346,346,346,346,482',
'482,482,482,482,482,482,482,760,482,767,482,772,482,773,482,482,482',
'482,482,482,482,775,776,778,779,346,477,477,477,477,477,477,477,477',
'780,477,781,782,783,477,,477,477,477,477,477,477,477,599,599,599,599',
'599,599,599,599,,599,,,,599,664,599,599,599,599,599,599,599,213,213',
'213,213,213,213,213,213,,213,664,,,213,,213,213,213,213,213,213,213',
'664,722,722,722,722,722,722,722,722,,722,,,,722,482,722,722,722,722',
'722,722,722,262,262,262,262,262,262,262,262,,,,214,214,214,214,214,214',
'214,214,477,214,,,,214,,214,214,214,214,214,214,214,172,172,172,172',
'172,172,172,172,599,,,,,,,,209,209,209,209,209,209,209,209,,209,,,,209',
'213,209,209,209,209,209,209,209,36,36,36,36,36,36,36,36,36,36,36,36',
'36,36,,722,,,,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,,214,,,,209',
'209,209,209,209,209,209,209,854,854,854,854,854,854,854,854,,854,,,',
'854,,854,854,854,854,854,854,854,,,,,209,718,718,718,718,718,718,718',
'718,,718,,,,718,,718,718,718,718,718,718,718,,,,,,,731,731,731,731,731',
'731,731,731,,731,,731,,731,854,731,731,731,731,731,731,731,168,168,168',
'168,168,168,168,168,,168,,,854,168,,168,168,168,168,168,168,168,,691',
'691,691,691,691,691,691,691,854,691,,,,691,,691,691,691,691,691,691',
'691,,507,507,507,507,507,507,507,507,,507,,,718,507,,507,507,507,507',
'507,507,507,,,,,148,148,148,148,148,148,148,148,,148,,,,148,731,148',
'148,148,148,148,148,148,749,749,749,749,,,,,,749,749,749,,,168,,,,749',
'749,,507,507,,,,,,,,,,,793,793,793,793,691,,,,507,793,793,,,,148,,,',
'793,793,,,,,,,,507,,,,,,,148,,749,,,589,589,589,589,589,589,589,589',
',589,,589,,589,148,589,589,589,589,589,589,589,592,592,592,592,592,592',
'592,592,793,592,,592,,592,,592,592,592,592,592,592,592,236,236,236,236',
'236,236,236,236,,236,,,,236,,236,236,236,236,236,236,236,342,342,342',
'342,342,342,342,342,,342,,,,342,,342,342,342,342,342,342,342,835,835',
'835,835,678,678,678,678,,835,835,,,678,678,,,,835,835,589,,678,678,',
'236,,,,,,758,758,758,758,758,758,758,758,,758,,592,,758,236,758,758',
'758,758,758,758,758,,,,,,,,,,,,236,,,,,835,,,,678,,,,,,,,,,,,,342,53',
'53,53,53,53,53,53,53,53,53,53,53,53,758,,,,,,481,481,,481,,,,,,,481',
',,,758,,,,,,53,53,53,53,53,53,53,53,,,,,,758,481,481,481,481,481,481',
'481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481',
'481,481,481,481,481,590,,590,,,481,481,481,481,481,481,481,481,163,163',
'163,163,163,163,163,163,163,163,163,163,163,,,,,,,,590,590,590,590,590',
'590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,590',
'590,590,590,590,590,590,151,,151,,,590,590,590,590,590,590,590,590,',
',,,,,,,,,,,,,,,,,,,151,151,151,151,151,151,151,151,151,151,151,151,151',
'151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,373,,,,',
'151,151,151,151,151,151,151,151,,,,,,,,,,,,,,,,,,,373,373,373,373,373',
'373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,373,448,,,,,373,373,373,373,373,373,373,373,373',
',,,,,,,,,,,,,,,,,448,448,448,448,448,448,448,448,448,448,448,448,448',
'448,448,448,448,448,448,448,448,448,448,448,448,448,448,448,157,,,,',
'448,448,448,448,448,448,448,448,,,,,,,,,,,,,,,,,,,157,157,157,157,157',
'157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,157,157,576,,,,,157,157,157,157,157,157,157,157,,,,',
',,,,,,,,,,,,,,576,576,576,576,576,576,576,576,576,576,576,576,576,576',
'576,576,576,576,576,576,576,576,576,576,576,576,576,576,70,576,,,,576',
'576,576,576,576,576,576,576,,,,,,,,,,,,,,,,,,,70,70,70,70,70,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,564,,,,',
'70,70,70,70,70,70,70,70,,,,,,,,,,,,,,,,,,,564,564,564,564,564,564,564',
'564,564,564,564,564,564,564,564,564,564,564,564,564,564,564,564,564',
'564,564,564,564,560,564,,,,564,564,564,564,564,564,564,564,,,,,,,,,',
',,,,,,,,,560,560,560,560,560,560,560,560,560,560,560,560,560,560,560',
'560,560,560,560,560,560,560,560,560,560,560,560,560,299,560,,,,560,560',
'560,560,560,560,560,560,,,,,,,,,,,,,,,,,,,299,299,299,299,299,299,299',
'299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299',
'299,299,299,299,387,299,,,,299,299,299,299,299,299,299,299,,,,,,,,,',
',,,,,,,,,387,387,387,387,387,387,387,387,387,387,387,387,387,387,387',
'387,387,387,387,387,387,387,387,387,387,387,387,387,252,387,,,,387,387',
'387,387,387,387,387,387,,,,,,,,,,,,,,,,,,,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,253,,,,,252,252,252,252,252,252,252,252,,,,,,,,,,,,',
',,,,,,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,449,253,,,,253,253,253',
'253,253,253,253,253,,,,,,,,,,,,,,,,,,,449,449,449,449,449,449,449,449',
'449,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449',
'449,449,449,464,,,,,449,449,449,449,449,449,449,449,,,,,,,,,,,,,,,,',
',,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464',
'464,464,464,464,464,464,464,464,464,464,464,,,,,,464,464,464,464,464',
'464,464,464,717,717,717,717,717,717,717,717,717,717,717,717,717,717',
'717,717,717,717,717,717,717,717,717,717,717,717,717,717,,,,,,717,717',
'717,717,717,717,717,717,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,40,40,40,40,40,40,40,40,40,40,,,,,,40,40,40,40,40,40,40,40',
'522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522',
'522,522,522,522,522,522,522,522,522,522,522,,,,,,522,522,522,522,522',
'522,522,522,633,633,633,633,633,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,633,633,633,633,633,633,633,,,,,,633,633',
'633,633,633,633,633,633,721,721,721,721,721,721,721,721,721,721,721',
'721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721',
',,,,,721,721,721,721,721,721,721,721,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,,,,,,295,295,295,295,295,295,295,295,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,246,241,241',
'241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241',
'241,241,241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241' ]
        racc_action_check = arr = ::Array.new(3601, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   857,    -1,   883,   908,   nil,   nil,   nil,   861,   865,
   nil,   nil,   nil,   nil,   nil,   nil,   915,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1760,   nil,   921,   nil,
  3273,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  2200,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   929,   930,   931,
  2719,   943,   949,   963,    74,   969,   970,   nil,   977,   nil,
   712,   nil,   953,   207,   776,   nil,   676,     1,   nil,   nil,
    75,   nil,   926,   927,   nil,   nil,   nil,   nil,   984,   946,
    58,   nil,   nil,  1010,   nil,  1011,   nil,  1012,  1014,   nil,
   nil,   nil,  1022,   nil,  1023,   247,   nil,  1032,  1033,  1034,
  1043,   nil,   nil,  1045,  1046,  1045,    23,  1059,   790,  1003,
  1006,   nil,  1007,   nil,  1009,   nil,   nil,  1073,   979,   nil,
  1075,  1020,   nil,  1021,   nil,  1082,   nil,   675,  2021,   261,
   810,  2424,  1084,  1077,   nil,    13,   nil,  2601,   325,   nil,
  1055,  1083,   185,  2294,   nil,  1084,  1089,  1086,  1949,  1087,
  1096,   983,  1645,   261,   271,  1099,  1100,  1118,  1120,   262,
  1126,  1127,  1098,   nil,   469,   nil,  1134,  1139,   273,   nil,
    94,   nil,  1134,   306,   nil,    -6,   nil,  1140,   nil,   nil,
  1041,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1142,  1790,
   nil,   nil,   657,  1696,  1752,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   605,   745,   776,   597,   886,  1136,  1121,
  1121,  1121,   553,   nil,   nil,   nil,  2159,  1149,  1146,   nil,
   nil,  3519,  1158,   nil,  1129,   nil,  3478,   906,   655,   nil,
   nil,   nil,  3014,  3073,   nil,   350,   401,   nil,  1156,   578,
   344,   nil,  1612,   nil,   377,   nil,   197,   nil,   545,  1131,
  1180,   431,   nil,   806,  1151,  1178,   nil,  1153,   nil,  1155,
   nil,   129,   nil,   246,  1163,   nil,  1164,   nil,  1166,  1196,
  1168,  1169,    58,   nil,   907,  3437,  1064,    97,   nil,  2896,
   302,   nil,   nil,   519,   nil,   nil,   nil,   nil,   nil,    71,
   nil,   nil,  1139,  1141,   167,  1142,   nil,   nil,   nil,   nil,
   nil,   292,   nil,   nil,   344,   nil,   nil,   nil,   nil,   nil,
  1143,    24,  1086,  1202,   nil,    -2,  1146,   nil,  1208,  1217,
   nil,   444,  2181,  1215,  1216,   nil,  1543,   nil,  1471,  1449,
  1412,  1355,  1333,  1296,  1274,  1239,  1217,  1101,  1042,   985,
   948,   926,   891,   753,   600,   462,   427,   304,   nil,  1241,
   nil,   nil,   nil,  2483,   352,   nil,   713,   nil,   nil,   nil,
   nil,  1244,  1246,  1254,  1255,  1256,   nil,  2955,   nil,   nil,
   804,   nil,   nil,   575,   nil,  1257,  1258,  1260,   nil,   nil,
   nil,   nil,  1255,  1257,   869,   nil,  1262,   nil,   nil,  1259,
  1204,  1269,  1271,  1216,  1277,  1295,  1293,   nil,  1294,   nil,
  1299,   558,   nil,  1302,   nil,   nil,   -36,   nil,   792,  1310,
  1281,   nil,  1282,   nil,   847,  1211,  1284,   nil,   691,   nil,
   nil,  1316,   nil,   nil,   nil,   nil,  1216,  1313,  2542,  3132,
  1287,   -10,  1288,   nil,   nil,  1291,   nil,   402,   nil,  1323,
   nil,   nil,   nil,   nil,  3191,  1223,  1319,  1328,  1330,  1438,
  1306,   nil,   nil,   nil,   nil,  1336,   nil,  1652,   nil,   442,
   283,  2302,  1625,  1352,   nil,   nil,  1357,   nil,   nil,   nil,
   489,   492,   175,   883,   321,   413,   660,   587,   952,   720,
   340,  1350,  1335,  1336,  1343,  1341,   nil,  1995,   696,   nil,
   nil,   nil,   nil,   887,    79,   102,   484,   521,   543,   nil,
   nil,   850,  3314,   460,   659,   694,   716,   nil,  1367,   nil,
  1369,  1372,  1375,   nil,    25,  1344,  1346,   nil,  1378,  1379,
  1349,  1350,  1390,   nil,   nil,  1392,   nil,  1364,  1411,   841,
   nil,   nil,   nil,  1384,  1412,   nil,   914,   460,  1411,   482,
  2837,   nil,   nil,   183,  2778,   nil,   nil,  1354,  1421,   192,
    23,   211,   nil,    72,   403,  1422,  2660,   nil,   229,   nil,
  1424,   nil,  1310,   634,   nil,   234,  1401,   nil,   351,  2115,
  2363,  1431,  2137,   nil,  1432,   nil,  1431,   nil,   nil,  1674,
   nil,   nil,   nil,   nil,    -8,    -9,  1435,   268,  1436,   nil,
   791,   nil,  1437,  1438,  1439,  1435,  1445,   nil,   238,  1351,
  1391,  1452,    60,   nil,   nil,  1470,  1472,   nil,   nil,   nil,
  1474,   nil,   nil,  3355,   nil,   nil,   486,   270,   nil,   nil,
   nil,  1390,     9,  1445,   nil,  1474,   nil,  1486,  1454,  1457,
   nil,  1485,  1490,  1461,    21,  1462,   nil,  1494,   nil,  1464,
   nil,   nil,  1401,   nil,  1678,   nil,   nil,   nil,   334,  1466,
   nil,   nil,   nil,  1492,  1501,  1391,   nil,  1508,  2207,   nil,
  1507,   nil,  1533,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1972,   nil,   131,   nil,   nil,   nil,  1502,   nil,  1538,
   nil,    73,    26,  1545,  1516,  1547,  1557,  1528,   674,  1562,
   nil,  1563,  1539,  1567,   nil,    -7,   nil,  3232,  1899,  1511,
   nil,  3396,  1719,   nil,  1568,   nil,  1506,   nil,   750,   nil,
  1575,  1927,   387,   189,   nil,   nil,   nil,  1545,   nil,  1600,
   nil,  1576,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  2043,
   nil,   nil,   863,   856,   nil,   nil,  1607,   nil,  2234,  1604,
  1525,   316,   nil,   nil,   nil,   nil,   nil,  1597,   828,   nil,
   nil,   nil,  1599,  1626,   nil,  1639,  1639,   nil,  1641,  1612,
  1621,  1649,  1561,  1651,   -34,    13,   nil,    51,    97,     8,
   186,   nil,   109,  2076,   518,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   122,   nil,   nil,  1180,  1158,   nil,   181,
   nil,   327,   nil,   nil,   nil,   nil,  1123,   nil,   247,   nil,
   243,  1007,    55,   nil,   282,   293,   251,   377,   nil,   nil,
   nil,   323,   417,   nil,   nil,  2203,   515,   nil,   nil,   nil,
   nil,   557,   373,   637,   559,   539,    10,    78,   552,   867,
   nil,   -12,   nil,   nil,  1872,   nil,   592,   347,   636,   641,
   nil,   632,    23,   nil,   nil,   832,   678,   668,   nil,   nil,
   414,   nil,   nil,   704,   nil,   nil,   752,   774,   774,   nil,
   768,   556,   598,   782,   784,   nil,   nil,   nil,   nil,   775,
   nil,   nil,   833,   824,   nil ]

racc_action_default = [
  -194,  -442,    -1,  -442,  -442,   -69,   -70,   -71,   -72,   -73,
   -74,   -75,   -76,   -77,   -78,   -79,  -442,   -81,   -82,   -83,
   -84,   -85,   -86,   -87,   -88,   -89,   -90,   -91,   -92,   -93,
   -94,   -95,   -96,   -97,   -98,   -99,  -442,  -101,  -104,  -118,
  -442,  -442,  -126,  -127,  -128,  -129,  -130,  -131,  -136,  -137,
  -192,  -193,  -195,  -442,  -197,  -198,  -199,  -200,  -201,  -202,
  -203,  -206,  -207,  -208,  -209,  -210,  -240,  -442,  -442,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -419,  -442,   895,
  -442,   -65,   -67,  -442,  -139,  -140,  -442,  -146,  -205,  -204,
  -442,  -100,  -106,  -442,  -109,   -72,   -73,  -119,  -442,  -125,
  -442,  -211,  -213,  -442,  -215,  -442,  -217,  -442,  -442,  -220,
  -221,  -222,  -442,  -224,  -442,  -442,  -394,  -442,  -442,  -442,
  -442,  -404,  -405,  -442,  -442,  -442,  -442,  -442,  -442,  -442,
  -442,  -253,  -442,  -261,  -442,  -267,  -256,  -442,  -333,  -259,
  -442,  -442,  -356,  -442,  -408,  -442,   -62,  -442,  -442,  -138,
  -442,  -442,  -442,  -147,  -148,  -442,  -102,  -442,  -442,  -132,
  -134,  -442,  -442,  -442,  -420,  -442,  -442,  -442,  -442,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,
  -442,  -442,  -442,  -343,  -442,  -250,  -442,  -248,  -442,  -262,
  -442,  -257,  -442,  -442,  -334,  -442,  -413,  -442,  -435,   -66,
    -2,    -3,    -4,    -5,    -6,    -7,    -8,    -9,   -10,  -442,
   -12,   -14,   -18,  -442,  -442,   -22,   -23,   -24,   -25,   -26,
   -27,   -28,   -30,   -34,   -37,   -40,   -45,   -48,   -50,   -52,
   -54,   -56,   -58,   -61,   -68,  -186,  -442,  -442,  -442,  -143,
   -63,  -442,  -442,  -145,  -150,  -152,  -442,  -156,  -442,  -141,
  -149,   -80,  -442,  -442,  -107,  -442,  -442,  -123,  -442,  -442,
  -442,  -196,  -442,  -212,  -442,  -226,  -442,  -236,  -442,  -442,
  -442,  -442,  -230,  -442,  -442,  -442,  -395,  -442,  -397,  -442,
  -399,  -442,  -418,  -442,  -442,  -409,  -442,  -411,  -442,  -442,
  -442,  -442,  -442,  -246,  -442,  -442,  -442,  -442,  -254,  -442,
  -442,  -268,  -270,  -442,  -272,  -273,  -274,  -275,  -276,  -442,
  -295,  -296,  -442,  -442,  -442,  -442,  -319,  -320,  -258,  -330,
  -332,  -442,  -357,  -359,  -442,  -361,  -362,  -363,  -364,  -372,
  -442,  -442,  -442,  -442,  -389,  -442,  -442,   -13,  -442,  -442,
   -60,  -172,  -442,  -442,  -442,   -19,  -442,   -20,  -442,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -190,  -442,
  -142,   -64,  -144,  -442,  -157,  -155,  -442,  -159,  -161,  -162,
  -163,  -442,  -442,  -166,  -442,  -442,  -171,  -442,  -105,  -108,
  -442,  -120,  -122,  -442,  -112,  -114,  -442,  -442,  -133,  -135,
  -124,  -214,  -442,  -442,  -442,  -216,  -442,  -219,  -223,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -401,  -442,  -403,
  -442,  -442,  -241,  -442,  -243,  -244,  -442,  -251,  -442,  -442,
  -442,  -255,  -442,  -263,  -442,  -442,  -442,  -269,  -442,  -277,
  -279,  -442,  -281,  -282,  -283,  -284,  -297,  -442,  -442,  -442,
  -259,  -442,  -442,  -321,  -335,  -442,  -358,  -442,  -365,  -442,
  -368,  -369,  -370,  -371,  -442,  -379,  -442,  -442,  -442,  -442,
  -442,  -414,  -415,  -416,  -421,  -442,   -11,  -442,  -173,  -174,
  -175,  -442,  -442,  -442,   -16,   -17,  -442,   -31,   -32,   -33,
   -35,   -36,   -38,   -39,   -41,   -42,   -43,   -44,   -46,   -47,
   -49,   -51,   -53,   -55,   -57,  -442,  -187,  -442,  -442,  -151,
  -153,  -154,  -158,  -442,  -442,  -442,  -442,  -442,  -442,  -103,
  -110,  -442,  -442,  -442,  -442,  -442,  -442,  -227,  -442,  -237,
  -442,  -344,  -442,  -231,  -442,  -442,  -442,  -413,  -442,  -442,
  -442,  -442,  -442,  -410,  -239,  -442,  -412,  -442,  -442,  -442,
  -249,  -252,  -260,  -442,  -442,  -266,  -442,  -442,  -442,  -442,
  -442,  -300,  -302,  -442,  -442,  -311,  -313,  -442,  -442,  -442,
  -442,  -442,  -355,  -442,  -442,  -442,  -442,  -374,  -442,  -380,
  -442,  -390,  -442,  -442,  -393,  -442,  -442,   -29,  -176,  -442,
  -442,  -442,  -419,  -182,  -442,  -178,  -442,   -15,   -21,  -442,
  -188,  -191,  -189,  -160,  -442,  -442,  -442,  -442,  -442,  -121,
  -442,  -113,  -442,  -442,  -442,  -442,  -442,  -218,  -442,  -234,
  -442,  -442,  -442,  -396,  -398,  -442,  -442,  -406,  -407,  -242,
  -442,  -247,  -264,  -442,  -271,  -278,  -442,  -442,  -285,  -286,
  -291,  -442,  -442,  -442,  -301,  -442,  -304,  -442,  -442,  -442,
  -312,  -442,  -442,  -442,  -442,  -442,  -322,  -442,  -325,  -442,
  -336,  -337,  -442,  -339,  -442,  -349,  -360,  -366,  -442,  -442,
  -375,  -376,  -378,  -442,  -442,  -442,  -422,  -442,  -442,  -180,
  -442,  -184,  -442,  -177,  -183,  -179,   -59,  -164,  -165,  -167,
  -168,  -442,  -170,  -442,  -115,  -116,  -117,  -442,  -238,  -442,
  -232,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,
  -280,  -442,  -442,  -442,  -298,  -442,  -299,  -442,  -442,  -442,
  -310,  -442,  -442,  -316,  -442,  -318,  -442,  -331,  -442,  -341,
  -442,  -442,  -442,  -442,  -367,  -373,  -381,  -442,  -391,  -442,
  -417,  -442,  -423,  -425,  -426,  -427,  -428,  -429,  -430,  -442,
  -436,  -437,  -442,  -442,  -181,  -185,  -442,  -111,  -442,  -442,
  -235,  -442,  -225,  -392,  -400,  -402,  -245,  -442,  -442,  -287,
  -288,  -292,  -442,  -442,  -303,  -442,  -442,  -314,  -442,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -354,  -442,  -442,  -442,
  -442,  -387,  -442,  -442,  -442,  -432,  -433,  -438,  -439,  -440,
  -441,  -169,  -228,  -442,  -233,  -265,  -442,  -442,  -293,  -442,
  -305,  -442,  -308,  -309,  -315,  -317,  -442,  -338,  -442,  -340,
  -442,  -442,  -442,  -347,  -442,  -442,  -349,  -442,  -382,  -383,
  -384,  -442,  -442,  -424,  -431,  -442,  -442,  -289,  -290,  -294,
  -306,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,
  -377,  -442,  -388,  -434,  -442,  -307,  -442,  -442,  -442,  -442,
  -345,  -442,  -442,  -348,  -350,  -442,  -442,  -442,  -229,  -323,
  -442,  -326,  -328,  -442,  -342,  -346,  -442,  -442,  -442,  -386,
  -442,  -442,  -442,  -442,  -442,  -324,  -327,  -329,  -352,  -442,
  -351,  -385,  -442,  -442,  -353 ]

racc_goto_table = [
    53,   234,    82,   138,   266,   340,   268,   265,   273,   274,
   238,   182,   532,   197,   240,   242,   390,   100,   153,   155,
   538,   539,   329,   335,   154,   162,   582,   184,   270,   473,
   528,   439,   458,    50,     8,   580,     9,   472,   535,   394,
   171,   272,   377,   661,    97,   345,   660,   429,   143,   697,
   618,   269,   478,   742,    81,   389,   729,   277,   279,   561,
   565,   339,   785,   301,   322,   812,   737,   191,   253,   158,
   637,   281,   283,   829,   128,   577,   498,   499,   276,   562,
   566,   284,   241,   542,   152,   492,   493,   668,   286,   368,
   250,   474,   340,   483,   585,   562,   494,   495,   496,   497,
   490,   491,     1,   794,   371,     2,   347,   500,   501,   240,
   502,   503,   504,    80,   374,    91,    92,   505,   252,   399,
    93,   393,   318,   609,   796,   398,   185,   149,   510,   376,
   855,   588,   260,   367,    51,   261,   263,   264,   340,   271,
   545,   186,   340,   130,   297,    82,   132,   299,   329,   433,
   134,   300,   634,   452,   630,   256,   438,   769,   447,   713,
   262,   255,   340,   387,   560,   645,   811,   564,   833,   651,
   570,   644,   656,   437,   858,   650,   819,   241,   657,   870,
   487,   488,   489,   831,   140,   832,    53,   670,   303,   389,
   456,   562,   591,   324,     8,   566,     9,   199,   486,   193,
   571,   454,   728,   817,   818,   141,   321,   562,   666,   508,
   853,   457,   576,   341,   466,   578,   790,   736,   761,   298,
     8,   426,     9,   nil,   nil,   nil,   nil,   703,   nil,   nil,
   nil,   705,   706,   nil,   nil,   nil,   240,   836,   446,   nil,
   nil,   266,   739,   451,   527,   375,   531,   413,   273,   nil,
   256,   256,   nil,   nil,   531,   531,   255,   255,   nil,   nil,
   465,   nil,   830,   nil,   530,   828,   nil,   606,   607,   608,
   nil,   nil,   nil,   nil,   nil,   612,   613,   614,   479,   nil,
   nil,   533,   667,   nil,   nil,   635,   559,   nil,   nil,   nil,
   nil,   nil,   427,   nil,   nil,    53,   536,   435,   303,   428,
   540,   512,   541,   434,   241,   nil,   611,   603,   nil,   587,
   nil,   nil,   340,   340,   340,   nil,   473,   nil,   522,   324,
   340,   340,   340,   nil,   472,   nil,   759,   549,   431,     8,
   nil,     9,   nil,   469,   nil,   nil,   768,   nil,   nil,   nil,
   nil,   nil,   596,   586,   240,   594,   nil,   nil,   774,   nil,
   341,   nil,   777,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   601,   nil,   nil,   556,   622,   nil,   nil,   nil,   nil,   740,
   nil,   693,   511,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   573,   nil,   nil,   256,   nil,   nil,   531,   nil,
   nil,   255,   nil,   nil,   nil,   686,   nil,   nil,   nil,   nil,
   329,   nil,   nil,   nil,   nil,   nil,   nil,   653,   nil,   867,
   nil,   nil,   241,   nil,   nil,   nil,   nil,   nil,   479,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   185,   nil,   nil,   nil,
   nil,   nil,   553,   583,   nil,   nil,   884,   nil,   nil,   nil,
   nil,   nil,   nil,   604,   605,   nil,   563,   567,   nil,   680,
   859,   nil,   596,   240,   682,   nil,   nil,   nil,   nil,   nil,
   nil,   531,   563,   619,   nil,   531,   531,   nil,   nil,   775,
   nil,   nil,   nil,   778,   nil,   nil,   nil,   nil,   nil,   633,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   654,   nil,
   nil,   714,   nil,   nil,   nil,   nil,   nil,   nil,   675,   nil,
   nil,   nil,   nil,   nil,   340,   nil,   nil,   nil,   340,   nil,
   nil,   241,   nil,   nil,   nil,   nil,   610,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   741,   nil,   nil,   nil,   nil,
   nil,   756,   nil,   770,   nil,   nil,   nil,   nil,   563,   nil,
   nil,   nil,   567,   779,   nil,   nil,   nil,   nil,   nil,   662,
   717,   715,   845,   nil,   563,   nil,   721,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   787,   780,   nil,   nil,   nil,
   nil,   786,   nil,   nil,   nil,   nil,   nil,   861,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   802,   nil,   nil,   nil,   nil,   877,   340,   nil,   nil,
   469,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   760,   619,   nil,   nil,   nil,   nil,   nil,   708,   nil,   nil,
   892,   nil,   340,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   781,   nil,   nil,   nil,   nil,   nil,   837,
   838,   340,   789,   nil,   849,   nil,   nil,   820,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   842,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   531,   340,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   786,   nil,   nil,   767,   868,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   882,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   862,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   662 ]

racc_goto_check = [
    45,    32,    31,     4,    84,    22,     5,    85,    84,    84,
    23,    81,    82,   167,    28,    55,    44,    67,    29,     4,
    82,    82,   104,   160,    53,    47,   156,    91,    23,    73,
    86,   109,   148,    64,    33,   157,    34,    75,    86,    48,
    47,    88,    60,   133,    25,    10,   132,     6,   159,    87,
    89,    81,    61,   170,    30,    43,   136,    81,    81,   116,
   121,    11,   138,   101,   141,   119,   155,    95,    40,    51,
   110,   162,   162,   154,    25,   116,    15,    15,   161,    24,
    24,   163,    29,   164,    31,    13,    13,   110,   165,    32,
    53,   168,    22,     6,   169,    24,    14,    14,    14,    14,
    12,    12,     1,   173,    28,     2,     8,    16,    17,    28,
    18,    19,    20,    26,    27,    37,    39,     6,    41,    23,
    42,    46,    95,    49,   170,    52,    31,    54,    57,    59,
   119,    62,    51,    63,    65,    66,    79,    80,    22,    83,
    90,    92,    22,    93,    94,    31,    96,    97,   104,    98,
    99,   100,   102,    84,    82,    45,   103,   111,   113,   114,
    45,    25,    22,    40,   115,   117,   118,   120,   170,   122,
   124,   116,   125,   101,   138,   121,   136,    29,   126,   127,
    10,    10,    10,   155,   128,   155,    45,   116,    45,    43,
   141,    24,    61,    45,    33,    24,    34,    30,    11,   129,
   130,   131,   134,   135,   137,   139,   140,    24,   142,     5,
   170,   143,   149,    25,   150,   151,   152,   153,    89,    64,
    33,     4,    34,   nil,   nil,   nil,   nil,    82,   nil,   nil,
   nil,    82,    82,   nil,   nil,   nil,    28,    87,     4,   nil,
   nil,    84,   157,     4,    85,    31,     5,   159,    84,   nil,
    45,    45,   nil,   nil,     5,     5,    25,    25,   nil,   nil,
     4,   nil,   133,   nil,    23,   132,   nil,     6,     6,     6,
   nil,   nil,   nil,   nil,   nil,     6,     6,     6,    53,   nil,
   nil,    88,   148,   nil,   nil,   109,    84,   nil,   nil,   nil,
   nil,   nil,    31,   nil,   nil,    45,    81,    45,    45,    25,
    81,    47,    81,    25,    29,   nil,    48,    60,   nil,    10,
   nil,   nil,    22,    22,    22,   nil,    73,   nil,    47,    45,
    22,    22,    22,   nil,    75,   nil,    86,    91,    64,    33,
   nil,    34,   nil,    45,   nil,   nil,    86,   nil,   nil,   nil,
   nil,   nil,    23,   167,    28,    55,   nil,   nil,    24,   nil,
    25,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,    47,   160,   nil,   nil,   nil,   nil,    73,
   nil,    44,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,   nil,   nil,    45,   nil,   nil,     5,   nil,
   nil,    25,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   104,   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,   156,
   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,    53,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,    31,    67,   nil,   nil,   156,   nil,   nil,   nil,
   nil,   nil,   nil,     4,     4,   nil,    45,    45,   nil,    23,
    82,   nil,    23,    28,    55,   nil,   nil,   nil,   nil,   nil,
   nil,     5,    45,     4,   nil,     5,     5,   nil,   nil,     6,
   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,    22,   nil,
   nil,    29,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   167,   nil,   nil,   nil,   nil,
   nil,    23,   nil,    85,   nil,   nil,   nil,   nil,    45,   nil,
   nil,   nil,    45,    84,   nil,   nil,   nil,   nil,   nil,    45,
    47,     4,     6,   nil,    45,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,    23,   nil,   nil,   nil,
   nil,    23,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,   nil,     6,    22,   nil,   nil,
    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,     4,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
     6,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,    32,
    32,    22,     4,   nil,    84,   nil,   nil,    81,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     5,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    23,   nil,   nil,    31,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    84,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45 ]

racc_goto_pointer = [
   nil,   102,   105,   nil,   -71,  -160,  -249,   nil,  -108,   nil,
  -168,  -148,  -251,  -268,  -259,  -283,  -254,  -254,  -253,  -253,
  -253,   nil,  -204,  -140,  -369,     4,   109,  -132,  -137,   -69,
    50,    -2,  -147,    32,    34,   nil,   nil,    79,   nil,    78,
   -89,   -38,    82,  -198,  -239,    -2,  -135,   -75,  -217,  -398,
   nil,   -29,  -133,   -63,    44,  -136,   nil,  -245,   nil,  -119,
  -206,  -289,  -348,  -103,    31,   132,   -27,   -36,   nil,   nil,
   nil,   nil,   nil,  -306,   nil,  -298,   nil,   nil,   nil,   -27,
   -28,  -116,  -394,   -30,  -161,  -158,  -373,  -566,  -128,  -484,
  -281,  -101,    12,    72,   -44,   -70,    74,   -42,  -150,    77,
   -39,  -127,  -404,  -147,  -173,   nil,   nil,   nil,   nil,  -272,
  -488,  -554,   nil,  -151,  -482,  -284,  -389,  -398,  -610,  -711,
  -282,  -389,  -398,   nil,  -283,  -398,  -392,  -678,   110,    59,
  -254,  -118,  -525,  -528,  -460,  -578,  -606,  -577,  -669,   130,
    11,  -131,  -365,  -113,   nil,   nil,   nil,   nil,  -292,  -252,
  -117,  -251,  -520,  -454,  -717,  -607,  -442,  -432,   nil,   -28,
  -173,   -94,  -104,   -96,  -337,   -90,   nil,  -132,  -245,  -381,
  -625,   nil,   nil,  -646 ]

racc_goto_default = [
   nil,   nil,   nil,   211,   200,   208,   338,   212,   221,   213,
   222,   nil,   223,   224,   225,   226,   227,   228,   229,   230,
   231,   232,   233,   235,    66,     4,   nil,   247,    39,    40,
   nil,   392,   nil,    95,    96,    11,    12,    37,    36,   nil,
   nil,   nil,   nil,   254,   nil,   248,   nil,   nil,   nil,   391,
    41,   nil,   159,    83,    84,   nil,   244,   245,   246,   nil,
   nil,   nil,   480,   nil,   nil,   nil,    52,   nil,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,   101,
   nil,   nil,   nil,   nil,   636,   639,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   136,   nil,   nil,   nil,   nil,
   nil,   nil,   302,   nil,   304,   305,   306,   307,   308,   nil,
   nil,   638,   309,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   315,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   663,   nil,   664,   nil,   nil,
   nil,   nil,   323,   nil,   325,   326,   327,   328,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   332,   nil,   115,   nil,
   nil,   116,   nil,   nil,   nil,   nil,   471,   743,   745,   nil,
   nil,   744,   746,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 141, :_reduce_none,
  1, 143, :_reduce_2,
  1, 143, :_reduce_3,
  1, 143, :_reduce_4,
  1, 143, :_reduce_5,
  1, 143, :_reduce_6,
  1, 143, :_reduce_7,
  1, 143, :_reduce_8,
  1, 143, :_reduce_9,
  1, 143, :_reduce_10,
  3, 143, :_reduce_11,
  1, 145, :_reduce_none,
  2, 145, :_reduce_13,
  1, 147, :_reduce_none,
  4, 147, :_reduce_15,
  3, 147, :_reduce_16,
  3, 147, :_reduce_17,
  1, 148, :_reduce_none,
  2, 148, :_reduce_19,
  2, 148, :_reduce_20,
  4, 148, :_reduce_21,
  1, 149, :_reduce_22,
  1, 149, :_reduce_23,
  1, 149, :_reduce_24,
  1, 149, :_reduce_25,
  1, 149, :_reduce_26,
  1, 149, :_reduce_27,
  1, 150, :_reduce_none,
  4, 150, :_reduce_29,
  1, 152, :_reduce_none,
  3, 152, :_reduce_31,
  3, 152, :_reduce_32,
  3, 152, :_reduce_33,
  1, 153, :_reduce_none,
  3, 153, :_reduce_35,
  3, 153, :_reduce_36,
  1, 154, :_reduce_none,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 155, :_reduce_none,
  3, 155, :_reduce_41,
  3, 155, :_reduce_42,
  3, 155, :_reduce_43,
  3, 155, :_reduce_44,
  1, 156, :_reduce_none,
  3, 156, :_reduce_46,
  3, 156, :_reduce_47,
  1, 157, :_reduce_none,
  3, 157, :_reduce_49,
  1, 158, :_reduce_none,
  3, 158, :_reduce_51,
  1, 159, :_reduce_none,
  3, 159, :_reduce_53,
  1, 160, :_reduce_none,
  3, 160, :_reduce_55,
  1, 161, :_reduce_none,
  3, 161, :_reduce_57,
  1, 162, :_reduce_none,
  5, 162, :_reduce_59,
  1, 146, :_reduce_60,
  1, 163, :_reduce_61,
  3, 164, :_reduce_62,
  1, 167, :_reduce_none,
  2, 167, :_reduce_64,
  1, 166, :_reduce_65,
  3, 166, :_reduce_66,
  1, 170, :_reduce_none,
  3, 170, :_reduce_68,
  1, 168, :_reduce_69,
  1, 168, :_reduce_70,
  1, 168, :_reduce_71,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_74,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_77,
  1, 168, :_reduce_78,
  1, 168, :_reduce_79,
  4, 168, :_reduce_80,
  1, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 176, :_reduce_83,
  1, 177, :_reduce_84,
  1, 177, :_reduce_85,
  1, 177, :_reduce_86,
  1, 177, :_reduce_87,
  1, 177, :_reduce_88,
  1, 177, :_reduce_89,
  1, 177, :_reduce_90,
  1, 177, :_reduce_91,
  1, 177, :_reduce_92,
  1, 177, :_reduce_93,
  1, 177, :_reduce_94,
  1, 177, :_reduce_95,
  1, 177, :_reduce_96,
  1, 177, :_reduce_97,
  1, 178, :_reduce_98,
  1, 178, :_reduce_99,
  2, 175, :_reduce_100,
  1, 175, :_reduce_none,
  0, 181, :_reduce_102,
  6, 173, :_reduce_103,
  0, 182, :_reduce_104,
  5, 173, :_reduce_105,
  2, 173, :_reduce_106,
  1, 180, :_reduce_none,
  2, 180, :_reduce_none,
  1, 179, :_reduce_109,
  3, 183, :_reduce_110,
  6, 183, :_reduce_111,
  1, 186, :_reduce_112,
  3, 186, :_reduce_113,
  1, 188, :_reduce_114,
  4, 188, :_reduce_115,
  4, 188, :_reduce_116,
  4, 188, :_reduce_117,
  1, 165, :_reduce_none,
  2, 165, :_reduce_119,
  1, 184, :_reduce_120,
  3, 184, :_reduce_121,
  1, 189, :_reduce_none,
  4, 174, :_reduce_none,
  5, 174, :_reduce_none,
  2, 174, :_reduce_none,
  1, 190, :_reduce_126,
  1, 190, :_reduce_127,
  1, 190, :_reduce_128,
  1, 190, :_reduce_129,
  1, 190, :_reduce_130,
  1, 190, :_reduce_131,
  1, 191, :_reduce_none,
  3, 191, :_reduce_none,
  1, 192, :_reduce_none,
  3, 192, :_reduce_none,
  1, 169, :_reduce_136,
  1, 169, :_reduce_137,
  2, 171, :_reduce_138,
  1, 171, :_reduce_none,
  1, 194, :_reduce_140,
  3, 194, :_reduce_141,
  4, 194, :_reduce_142,
  3, 194, :_reduce_143,
  4, 194, :_reduce_144,
  3, 194, :_reduce_145,
  1, 193, :_reduce_146,
  2, 193, :_reduce_147,
  2, 193, :_reduce_148,
  3, 193, :_reduce_149,
  1, 195, :_reduce_none,
  3, 195, :_reduce_none,
  1, 196, :_reduce_152,
  3, 196, :_reduce_153,
  3, 197, :_reduce_154,
  2, 197, :_reduce_155,
  1, 197, :_reduce_156,
  2, 197, :_reduce_157,
  3, 198, :_reduce_158,
  1, 199, :_reduce_159,
  3, 199, :_reduce_160,
  1, 200, :_reduce_161,
  1, 200, :_reduce_162,
  1, 200, :_reduce_163,
  4, 200, :_reduce_164,
  4, 200, :_reduce_165,
  1, 200, :_reduce_166,
  4, 200, :_reduce_167,
  4, 200, :_reduce_168,
  6, 200, :_reduce_169,
  4, 200, :_reduce_170,
  1, 200, :_reduce_171,
  1, 151, :_reduce_none,
  2, 151, :_reduce_173,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  2, 201, :_reduce_none,
  3, 202, :_reduce_177,
  2, 202, :_reduce_178,
  3, 202, :_reduce_179,
  3, 202, :_reduce_180,
  4, 202, :_reduce_181,
  2, 202, :_reduce_182,
  3, 202, :_reduce_none,
  3, 202, :_reduce_184,
  4, 202, :_reduce_185,
  1, 172, :_reduce_186,
  3, 172, :_reduce_187,
  4, 172, :_reduce_188,
  4, 172, :_reduce_189,
  1, 203, :_reduce_190,
  3, 203, :_reduce_191,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  0, 142, :_reduce_none,
  1, 204, :_reduce_none,
  4, 204, :_reduce_196,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  2, 206, :_reduce_none,
  2, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 207, :_reduce_211,
  3, 207, :_reduce_212,
  1, 219, :_reduce_213,
  4, 219, :_reduce_214,
  1, 219, :_reduce_215,
  4, 219, :_reduce_216,
  1, 219, :_reduce_217,
  6, 219, :_reduce_218,
  4, 219, :_reduce_219,
  1, 219, :_reduce_220,
  1, 219, :_reduce_221,
  1, 219, :_reduce_222,
  4, 219, :_reduce_223,
  1, 219, :_reduce_224,
  8, 219, :_reduce_225,
  1, 220, :_reduce_226,
  3, 220, :_reduce_227,
  7, 225, :_reduce_228,
  10, 225, :_reduce_229,
  1, 223, :_reduce_230,
  3, 223, :_reduce_231,
  5, 228, :_reduce_232,
  7, 228, :_reduce_233,
  1, 229, :_reduce_234,
  3, 229, :_reduce_235,
  1, 224, :_reduce_none,
  1, 226, :_reduce_none,
  1, 227, :_reduce_none,
  1, 230, :_reduce_none,
  1, 209, :_reduce_240,
  5, 217, :_reduce_241,
  7, 217, :_reduce_242,
  5, 216, :_reduce_243,
  5, 216, :_reduce_244,
  9, 218, :_reduce_245,
  4, 208, :_reduce_246,
  7, 208, :_reduce_247,
  1, 232, :_reduce_none,
  4, 232, :_reduce_none,
  1, 231, :_reduce_250,
  3, 231, :_reduce_251,
  6, 210, :_reduce_252,
  1, 233, :_reduce_253,
  1, 234, :_reduce_none,
  2, 234, :_reduce_none,
  1, 144, :_reduce_256,
  2, 144, :_reduce_257,
  3, 144, :_reduce_258,
  1, 235, :_reduce_none,
  6, 211, :_reduce_260,
  1, 236, :_reduce_261,
  0, 237, :_reduce_262,
  2, 237, :_reduce_263,
  3, 238, :_reduce_264,
  6, 238, :_reduce_265,
  6, 212, :_reduce_266,
  1, 239, :_reduce_267,
  1, 240, :_reduce_none,
  2, 240, :_reduce_none,
  1, 241, :_reduce_270,
  4, 241, :_reduce_271,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 243, :_reduce_277,
  3, 243, :_reduce_278,
  1, 249, :_reduce_279,
  4, 249, :_reduce_280,
  1, 249, :_reduce_281,
  1, 249, :_reduce_282,
  1, 249, :_reduce_283,
  1, 249, :_reduce_284,
  1, 250, :_reduce_285,
  1, 250, :_reduce_286,
  3, 250, :_reduce_287,
  3, 250, :_reduce_288,
  5, 251, :_reduce_289,
  5, 251, :_reduce_290,
  4, 244, :_reduce_291,
  6, 244, :_reduce_292,
  7, 244, :_reduce_293,
  8, 244, :_reduce_294,
  1, 252, :_reduce_295,
  1, 252, :_reduce_296,
  1, 253, :_reduce_297,
  1, 254, :_reduce_none,
  5, 245, :_reduce_299,
  1, 255, :_reduce_300,
  2, 255, :_reduce_301,
  1, 256, :_reduce_302,
  4, 256, :_reduce_303,
  1, 257, :_reduce_304,
  4, 257, :_reduce_305,
  5, 257, :_reduce_306,
  3, 258, :_reduce_307,
  1, 258, :_reduce_308,
  1, 259, :_reduce_none,
  5, 246, :_reduce_310,
  1, 260, :_reduce_311,
  2, 260, :_reduce_312,
  1, 261, :_reduce_313,
  4, 261, :_reduce_314,
  4, 262, :_reduce_315,
  5, 247, :_reduce_316,
  7, 247, :_reduce_317,
  5, 248, :_reduce_none,
  1, 263, :_reduce_319,
  1, 263, :_reduce_320,
  0, 264, :_reduce_none,
  2, 264, :_reduce_none,
  7, 265, :_reduce_323,
  9, 265, :_reduce_324,
  1, 266, :_reduce_none,
  1, 267, :_reduce_326,
  3, 267, :_reduce_327,
  1, 267, :_reduce_328,
  3, 267, :_reduce_329,
  0, 271, :_reduce_330,
  8, 213, :_reduce_331,
  4, 213, :_reduce_332,
  1, 268, :_reduce_333,
  1, 269, :_reduce_334,
  0, 270, :_reduce_none,
  2, 270, :_reduce_none,
  2, 270, :_reduce_none,
  4, 272, :_reduce_338,
  1, 272, :_reduce_339,
  3, 274, :_reduce_340,
  1, 274, :_reduce_341,
  6, 276, :_reduce_342,
  1, 221, :_reduce_none,
  1, 222, :_reduce_none,
  6, 275, :_reduce_345,
  7, 275, :_reduce_346,
  4, 275, :_reduce_347,
  6, 275, :_reduce_348,
  1, 277, :_reduce_none,
  6, 273, :_reduce_350,
  9, 273, :_reduce_351,
  9, 273, :_reduce_352,
  12, 273, :_reduce_353,
  1, 278, :_reduce_none,
  6, 214, :_reduce_355,
  1, 279, :_reduce_356,
  1, 280, :_reduce_none,
  2, 280, :_reduce_none,
  1, 281, :_reduce_359,
  4, 281, :_reduce_360,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 283, :_reduce_365,
  3, 283, :_reduce_366,
  4, 288, :_reduce_367,
  1, 288, :_reduce_368,
  1, 288, :_reduce_369,
  1, 288, :_reduce_370,
  1, 288, :_reduce_371,
  1, 284, :_reduce_372,
  5, 285, :_reduce_373,
  1, 289, :_reduce_374,
  2, 289, :_reduce_375,
  0, 293, :_reduce_376,
  8, 286, :_reduce_377,
  4, 286, :_reduce_378,
  1, 290, :_reduce_379,
  1, 291, :_reduce_380,
  0, 292, :_reduce_none,
  2, 292, :_reduce_none,
  2, 292, :_reduce_none,
  2, 292, :_reduce_none,
  6, 294, :_reduce_385,
  4, 294, :_reduce_386,
  6, 287, :_reduce_387,
  8, 287, :_reduce_388,
  1, 296, :_reduce_none,
  1, 297, :_reduce_none,
  1, 295, :_reduce_none,
  9, 215, :_reduce_392,
  6, 215, :_reduce_393,
  1, 298, :_reduce_none,
  3, 298, :_reduce_none,
  6, 301, :_reduce_396,
  3, 301, :_reduce_397,
  6, 301, :_reduce_398,
  3, 301, :_reduce_399,
  8, 301, :_reduce_400,
  4, 301, :_reduce_401,
  8, 301, :_reduce_402,
  4, 301, :_reduce_403,
  1, 301, :_reduce_404,
  1, 301, :_reduce_405,
  6, 301, :_reduce_406,
  6, 301, :_reduce_407,
  1, 299, :_reduce_408,
  1, 303, :_reduce_none,
  1, 304, :_reduce_none,
  1, 305, :_reduce_none,
  1, 230, :_reduce_none,
  0, 300, :_reduce_none,
  2, 300, :_reduce_none,
  2, 300, :_reduce_none,
  1, 306, :_reduce_none,
  4, 306, :_reduce_417,
  1, 302, :_reduce_418,
  1, 185, :_reduce_419,
  1, 187, :_reduce_420,
  5, 205, :_reduce_421,
  3, 308, :_reduce_422,
  3, 309, :_reduce_423,
  5, 309, :_reduce_424,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  1, 310, :_reduce_429,
  1, 310, :_reduce_430,
  3, 312, :_reduce_431,
  2, 312, :_reduce_432,
  1, 313, :_reduce_433,
  3, 313, :_reduce_434,
  1, 307, :_reduce_435,
  1, 311, :_reduce_436,
  1, 311, :_reduce_437,
  2, 311, :_reduce_438,
  2, 311, :_reduce_439,
  2, 311, :_reduce_440,
  2, 311, :_reduce_441 ]

racc_reduce_n = 442

racc_shift_n = 895

racc_token_table = {
  false => 0,
  :error => 1,
  :TRUE => 2,
  :FALSE => 3,
  :INTEGER_CONSTANT => 4,
  :FLOATING_CONSTANT => 5,
  :OCTAL_CONSTANT => 6,
  :HEX_CONSTANT => 7,
  :CHARACTER_LITERAL => 8,
  "(" => 9,
  ")" => 10,
  :STRING_LITERAL => 11,
  "[" => 12,
  "]" => 13,
  "." => 14,
  :IDENTIFIER => 15,
  "->" => 16,
  :SIZEOF => 17,
  "&" => 18,
  "*" => 19,
  "+" => 20,
  "-" => 21,
  "~" => 22,
  "!" => 23,
  "/" => 24,
  "%" => 25,
  "<<" => 26,
  ">>" => 27,
  "<" => 28,
  ">" => 29,
  "<=" => 30,
  ">=" => 31,
  "==" => 32,
  "!=" => 33,
  "^" => 34,
  "|" => 35,
  "&&" => 36,
  "||" => 37,
  "?" => 38,
  ":" => 39,
  ";" => 40,
  "," => 41,
  "=" => 42,
  :VOID => 43,
  :FLOAT32_T => 44,
  :DOUBLE64_T => 45,
  :TYPE_NAME => 46,
  :BOOL_T => 47,
  :FLOAT => 48,
  :DOUBLE => 49,
  :DESCRIPTOR => 50,
  :CHAR_T => 51,
  :SCHAR_T => 52,
  :UCHAR_T => 53,
  :CHAR => 54,
  :SHORT => 55,
  :INT => 56,
  :LONG => 57,
  :INT8_T => 58,
  :INT16_T => 59,
  :INT32_T => 60,
  :INT64_T => 61,
  :INT128_T => 62,
  :UINT8_T => 63,
  :UINT16_T => 64,
  :UINT32_T => 65,
  :UINT64_T => 66,
  :UINT128_T => 67,
  :SIGNED => 68,
  :UNSIGNED => 69,
  :STRUCT => 70,
  "{" => 71,
  "}" => 72,
  :STRING => 73,
  :SIZE_IS => 74,
  :COUNT_IS => 75,
  :ENUM => 76,
  :ENUM8 => 77,
  :ENUM16 => 78,
  :ENUM32 => 79,
  :ENUM64 => 80,
  :ENUM128 => 81,
  :CONST => 82,
  :VOLATILE => 83,
  "..." => 84,
  :IN => 85,
  :OUT => 86,
  :INOUT => 87,
  :SEND => 88,
  :RECEIVE => 89,
  :NULLABLE => 90,
  :C_EXP => 91,
  :ACTIVE => 92,
  :ALLOCATOR => 93,
  :CALLBACK => 94,
  :CONTEXT => 95,
  :DEVIATE => 96,
  :GENERATE => 97,
  :ID => 98,
  :IDX_IS_ID => 99,
  :PROTOTYPE => 100,
  :PSEUDO_ACTIVE => 101,
  :RESTRICT => 102,
  :SINGLETON => 103,
  :THROUGH => 104,
  :IMPORT_C => 105,
  :IMPORT => 106,
  :AB_STRING_LITERAL => 107,
  :TYPEDEF => 108,
  :NAMESPACE => 109,
  "::" => 110,
  :SIGNATURE => 111,
  :ONEWAY => 112,
  :CELLTYPE => 113,
  :INLINE => 114,
  :OPTIONAL => 115,
  :REF_DESC => 116,
  :DYNAMIC => 117,
  :OMIT => 118,
  :CALL => 119,
  :ENTRY => 120,
  :ATTRIBUTE => 121,
  :CHOICE => 122,
  :VAR => 123,
  :REQUIRE => 124,
  :FACTORY => 125,
  :CTFACTORY => 126,
  :CELL => 127,
  :COMPOSITE => 128,
  "=>" => 129,
  :REGION => 130,
  :IN_THROUGH => 131,
  :OUT_THROUGH => 132,
  :TO_THROUGH => 133,
  :FROM_THROUGH => 134,
  :NODE => 135,
  :LINKUNIT => 136,
  :DOMAIN => 137,
  :CLASS => 138,
  :TOOL_INFO => 139 }

racc_nt_base = 140

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "TRUE",
  "FALSE",
  "INTEGER_CONSTANT",
  "FLOATING_CONSTANT",
  "OCTAL_CONSTANT",
  "HEX_CONSTANT",
  "CHARACTER_LITERAL",
  "\"(\"",
  "\")\"",
  "STRING_LITERAL",
  "\"[\"",
  "\"]\"",
  "\".\"",
  "IDENTIFIER",
  "\"->\"",
  "SIZEOF",
  "\"&\"",
  "\"*\"",
  "\"+\"",
  "\"-\"",
  "\"~\"",
  "\"!\"",
  "\"/\"",
  "\"%\"",
  "\"<<\"",
  "\">>\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "\"^\"",
  "\"|\"",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\":\"",
  "\";\"",
  "\",\"",
  "\"=\"",
  "VOID",
  "FLOAT32_T",
  "DOUBLE64_T",
  "TYPE_NAME",
  "BOOL_T",
  "FLOAT",
  "DOUBLE",
  "DESCRIPTOR",
  "CHAR_T",
  "SCHAR_T",
  "UCHAR_T",
  "CHAR",
  "SHORT",
  "INT",
  "LONG",
  "INT8_T",
  "INT16_T",
  "INT32_T",
  "INT64_T",
  "INT128_T",
  "UINT8_T",
  "UINT16_T",
  "UINT32_T",
  "UINT64_T",
  "UINT128_T",
  "SIGNED",
  "UNSIGNED",
  "STRUCT",
  "\"{\"",
  "\"}\"",
  "STRING",
  "SIZE_IS",
  "COUNT_IS",
  "ENUM",
  "ENUM8",
  "ENUM16",
  "ENUM32",
  "ENUM64",
  "ENUM128",
  "CONST",
  "VOLATILE",
  "\"...\"",
  "IN",
  "OUT",
  "INOUT",
  "SEND",
  "RECEIVE",
  "NULLABLE",
  "C_EXP",
  "ACTIVE",
  "ALLOCATOR",
  "CALLBACK",
  "CONTEXT",
  "DEVIATE",
  "GENERATE",
  "ID",
  "IDX_IS_ID",
  "PROTOTYPE",
  "PSEUDO_ACTIVE",
  "RESTRICT",
  "SINGLETON",
  "THROUGH",
  "IMPORT_C",
  "IMPORT",
  "AB_STRING_LITERAL",
  "TYPEDEF",
  "NAMESPACE",
  "\"::\"",
  "SIGNATURE",
  "ONEWAY",
  "CELLTYPE",
  "INLINE",
  "OPTIONAL",
  "REF_DESC",
  "DYNAMIC",
  "OMIT",
  "CALL",
  "ENTRY",
  "ATTRIBUTE",
  "CHOICE",
  "VAR",
  "REQUIRE",
  "FACTORY",
  "CTFACTORY",
  "CELL",
  "COMPOSITE",
  "\"=>\"",
  "REGION",
  "IN_THROUGH",
  "OUT_THROUGH",
  "TO_THROUGH",
  "FROM_THROUGH",
  "NODE",
  "LINKUNIT",
  "DOMAIN",
  "CLASS",
  "TOOL_INFO",
  "$start",
  "all",
  "component_description",
  "primary_expression",
  "namespace_identifier",
  "string_literal_list",
  "expression",
  "postfix_expression",
  "unary_expression",
  "unary_operator",
  "cast_expression",
  "type_name",
  "multiplicative_expression",
  "additive_expression",
  "shift_expression",
  "relational_expression",
  "equality_expression",
  "and_expression",
  "exclusive_or_expression",
  "inclusive_or_expression",
  "logical_and_expression",
  "logical_or_expression",
  "conditional_expression",
  "constant_expression",
  "declaration",
  "type_specifier_qualifier_list",
  "init_declarator_list",
  "declaration_specifiers",
  "type_specifier",
  "type_qualifier",
  "init_declarator",
  "declarator",
  "initializer",
  "struct_specifier",
  "enum_specifier",
  "sign_int_type",
  "char_type",
  "int_type",
  "sign",
  "struct_tag",
  "struct_declaration_list",
  "@1",
  "@2",
  "struct_declaration",
  "struct_declarator_list",
  "spec_L",
  "pointer_specifier_list",
  "spec_R",
  "pointer_specifier",
  "struct_declarator",
  "enum_type",
  "enumerator_list",
  "enumerator",
  "pointer",
  "direct_declarator",
  "parameter_type_list",
  "parameter_list",
  "parameter_declaration",
  "parameter_specifier_list_bracket",
  "parameter_specifier_list",
  "parameter_specifier",
  "abstract_declarator",
  "direct_abstract_declarator",
  "initializer_list",
  "specified_statement",
  "tool_info",
  "statement",
  "statement_specifier_list",
  "typedef",
  "const_statement",
  "namespace",
  "signature",
  "celltype",
  "cell",
  "composite_celltype",
  "region",
  "import",
  "import_C",
  "generate_statement",
  "statement_specifier",
  "alloc_list",
  "plugin_name",
  "plugin_arg",
  "restrict_list",
  "port_name",
  "alloc",
  "func_name",
  "param_name",
  "restrict",
  "region_name_list",
  "class_name",
  "declarator_list",
  "typedef_specifier",
  "namespace_NAME",
  "statement_list",
  "namespace_name",
  "signature_NAME",
  "function_head_list",
  "function_head",
  "celltype_NAME",
  "celltype_statement_list",
  "specified_celltype_statement",
  "celltype_statement",
  "celltype_statement_specifier_list",
  "port",
  "attribute",
  "var",
  "require",
  "factory",
  "celltype_statement_specifier",
  "alloc_list2",
  "alloc2",
  "port_type",
  "namespace_signature_name",
  "array_size",
  "attribute_declaration_list",
  "attribute_declaration",
  "attribute_specifier",
  "choice_list",
  "choice_element",
  "var_declaration_list",
  "var_declaration",
  "var_specifier",
  "factory_head",
  "factory_function_list",
  "factory_function",
  "factory_function_name",
  "arg_list",
  "namespace_celltype_NAME",
  "cell_NAME",
  "join_list",
  "@3",
  "specified_join",
  "reverse_join",
  "join_specifier_list",
  "join",
  "join_specifier",
  "cae_name",
  "array_index",
  "composite_celltype_NAME",
  "composite_celltype_statement_list",
  "specified_composite_celltype_statement",
  "composite_celltype_statement",
  "composite_celltype_statement_specifier_list",
  "composite_port",
  "composite_attribute",
  "internal_cell",
  "export_join",
  "composite_celltype_statement_specifier",
  "composite_attribute_declaration_list",
  "internal_namespace_celltype_NAME",
  "internal_cell_NAME",
  "internal_join_list",
  "@4",
  "external_join",
  "internal_cell_elem_name",
  "export_name",
  "internal_ref_cell_name",
  "region_specifier_list",
  "region_NAME",
  "region_statement",
  "region_specifier",
  "namespace_region_NAME",
  "domain_type",
  "domain_name",
  "class_type",
  "region_cell",
  "JSON_string",
  "JSON_object",
  "JSON_property_list",
  "JSON_value",
  "JSON_number",
  "JSON_array",
  "JSON_array_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 52)
  def _reduce_2(val, _values, result)
     result = [ :IDENTIFIER, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 54)
  def _reduce_3(val, _values, result)
     result = [ :BOOL_CONSTANT, true ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 56)
  def _reduce_4(val, _values, result)
     result = [ :BOOL_CONSTANT, false ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 58)
  def _reduce_5(val, _values, result)
     result = [ :INTEGER_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 60)
  def _reduce_6(val, _values, result)
     result = [ :FLOATING_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 62)
  def _reduce_7(val, _values, result)
     result = [ :OCTAL_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 64)
  def _reduce_8(val, _values, result)
     result = [ :HEX_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 66)
  def _reduce_9(val, _values, result)
     result = [ :CHARACTER_LITERAL, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 68)
  def _reduce_10(val, _values, result)
     result = [ :STRING_LITERAL_LIST, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 70)
  def _reduce_11(val, _values, result)
     result = [ :PARENTHESES, val[1].get_elements ] 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 76)
  def _reduce_13(val, _values, result)
                # 連接した文字列を1つの文字列にまとめる
            str = "\"" + val[0].val.gsub( /\"(.*)\"/, "\\1" ) + val[1].val.gsub( /\"(.*)\"/, "\\1" ) + "\""
            result = Token.new( str, val[0].file, val[0].lineno, val[0].col )
        
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 85)
  def _reduce_15(val, _values, result)
     result = [ :OP_SUBSC, val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 87)
  def _reduce_16(val, _values, result)
     result = [ :OP_DOT, val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 89)
  def _reduce_17(val, _values, result)
     result = [ :OP_REF, val[0], val[2] ] 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 95)
  def _reduce_19(val, _values, result)
     result = [ val[0], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 97)
  def _reduce_20(val, _values, result)
     result = [ :OP_SIZEOF_EXPR, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 99)
  def _reduce_21(val, _values, result)
     result = [ :OP_SIZEOF_TYPE, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 102)
  def _reduce_22(val, _values, result)
     result = :OP_U_AMP 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 103)
  def _reduce_23(val, _values, result)
     result = :OP_U_ASTER 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 104)
  def _reduce_24(val, _values, result)
     result = :OP_U_PLUS 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 105)
  def _reduce_25(val, _values, result)
     result = :OP_U_MINUS 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 106)
  def _reduce_26(val, _values, result)
     result = :OP_U_TILDE 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 107)
  def _reduce_27(val, _values, result)
     result = :OP_U_EXCLAM 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 112)
  def _reduce_29(val, _values, result)
      result = [ :CAST, val[1], val[3] ] 
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 117)
  def _reduce_31(val, _values, result)
     result = [ :OP_MULT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 119)
  def _reduce_32(val, _values, result)
     result = [ :OP_DIV, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 121)
  def _reduce_33(val, _values, result)
     result = [ :OP_REMAIN, val[0], val[2] ]  
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 126)
  def _reduce_35(val, _values, result)
     result = [ :OP_ADD, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 128)
  def _reduce_36(val, _values, result)
     result = [ :OP_SUB, val[0], val[2] ]  
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 133)
  def _reduce_38(val, _values, result)
     result = [ :OP_LSFT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 135)
  def _reduce_39(val, _values, result)
     result = [ :OP_RSFT, val[0], val[2] ]  
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 140)
  def _reduce_41(val, _values, result)
     result = [ :OP_LT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 142)
  def _reduce_42(val, _values, result)
     result = [ :OP_GT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 144)
  def _reduce_43(val, _values, result)
     result = [ :OP_LE, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 146)
  def _reduce_44(val, _values, result)
     result = [ :OP_GE, val[0], val[2] ]  
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 151)
  def _reduce_46(val, _values, result)
     result = [ :OP_EQ, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 153)
  def _reduce_47(val, _values, result)
     result = [ :OP_NE, val[0], val[2] ]  
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 158)
  def _reduce_49(val, _values, result)
     result = [ :OP_AND, val[0], val[2] ]  
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 163)
  def _reduce_51(val, _values, result)
     result = [ :OP_EOR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 168)
  def _reduce_53(val, _values, result)
     result = [ :OP_OR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 173)
  def _reduce_55(val, _values, result)
     result = [ :OP_LAND, val[0], val[2] ]  
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 178)
  def _reduce_57(val, _values, result)
     result = [ :OP_LOR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 183)
  def _reduce_59(val, _values, result)
     result = [ :OP_CEX, val[0], val[2].get_elements, val[4] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 190)
  def _reduce_60(val, _values, result)
                result = Expression.new( val[0] )
            # result.print
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 197)
  def _reduce_61(val, _values, result)
                result = Expression.new( val[0] )
            # result.print

            # res = result.eval_const( nil )
            # if res then
            #   puts "val: #{res}"
            # else
            #   puts "val: nil"
            # end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 219)
  def _reduce_62(val, _values, result)
                val[1].each { |i|    # i: Decl
                i.set_type( val[0] )
            }
            result = val[1]
        
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 235)
  def _reduce_64(val, _values, result)
                val[1].set_qualifier( val[0] )
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 241)
  def _reduce_65(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 243)
  def _reduce_66(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 248)
  def _reduce_68(val, _values, result)
     val[0].set_initializer( val[2] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 254)
  def _reduce_69(val, _values, result)
     result = VoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 255)
  def _reduce_70(val, _values, result)
     result = FloatType.new(32) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 256)
  def _reduce_71(val, _values, result)
     result = FloatType.new(64) 
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 259)
  def _reduce_74(val, _values, result)
     result = DefinedType.new( val[0].val ) 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 263)
  def _reduce_77(val, _values, result)
     result = BoolType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 269)
  def _reduce_78(val, _values, result)
                Generator.warning( "W5002 float: obsolete type. use float32_t"  )
            result = FloatType.new(32)
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 273)
  def _reduce_79(val, _values, result)
                Generator.warning( "W5003 double: obsolete type. use double64_t"  )
            result = FloatType.new(64)
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 276)
  def _reduce_80(val, _values, result)
          # namespace_identifier: signature name
            result = DescriptorType.new( val[2] )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 281)
  def _reduce_81(val, _values, result)
     result = IntType.new( -1 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 284)
  def _reduce_82(val, _values, result)
                result = IntType.new( -1 )
            result.set_sign( :SIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 289)
  def _reduce_83(val, _values, result)
                result = IntType.new( -1 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 295)
  def _reduce_84(val, _values, result)
                # Generator.warning( "W5004 char: obsolete type. use char_t"  )
            result = IntType.new( -11 )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 298)
  def _reduce_85(val, _values, result)
     result = IntType.new( -2 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 299)
  def _reduce_86(val, _values, result)
     result = IntType.new( -3 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 300)
  def _reduce_87(val, _values, result)
     result = IntType.new( -4 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 324)
  def _reduce_88(val, _values, result)
     result = IntType.new( 8 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 325)
  def _reduce_89(val, _values, result)
     result = IntType.new( 16 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 326)
  def _reduce_90(val, _values, result)
     result = IntType.new( 32 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 327)
  def _reduce_91(val, _values, result)
     result = IntType.new( 64 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 328)
  def _reduce_92(val, _values, result)
     result = IntType.new( 128 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 331)
  def _reduce_93(val, _values, result)
                result = IntType.new( 8 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 336)
  def _reduce_94(val, _values, result)
                result = IntType.new( 16 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 341)
  def _reduce_95(val, _values, result)
                result = IntType.new( 32 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 346)
  def _reduce_96(val, _values, result)
                result = IntType.new( 64 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 351)
  def _reduce_97(val, _values, result)
                result = IntType.new( 128 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 356)
  def _reduce_98(val, _values, result)
     result = :SIGNED 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 357)
  def _reduce_99(val, _values, result)
     result = :UNSIGNED 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 363)
  def _reduce_100(val, _values, result)
                val[1].set_sign( val[0] )
            result = val[1]
        
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 371)
  def _reduce_102(val, _values, result)
     StructType.set_define( true )  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 374)
  def _reduce_103(val, _values, result)
                StructType.end_of_parse
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 379)
  def _reduce_104(val, _values, result)
                # tag が無い場合、内部名を与える
            result = StructType.new( :"TAG__#{@@no_struct_tag_num}__" )
            @@no_struct_tag_num += 1
            StructType.set_define( true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 386)
  def _reduce_105(val, _values, result)
                StructType.end_of_parse
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 391)
  def _reduce_106(val, _values, result)
                StructType.set_define( false )
            StructType.end_of_parse
            result = val[1]
        
    result
  end
.,.,

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 402)
  def _reduce_109(val, _values, result)
     result = StructType.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 408)
  def _reduce_110(val, _values, result)
                val[1].each { |i|    # i: Decl
                i.set_type( val[0] )
                i.set_kind( :MEMBER )
                i.check
                StructType.new_member( i )
            }
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 418)
  def _reduce_111(val, _values, result)
                val[4].each { |i|    # i: Decl
                i.set_type( val[3] )
                i.set_kind( :MEMBER )
                  i.set_specifier_list val[1]
                i.check
                StructType.new_member( i )
            }
            result = val[4]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 429)
  def _reduce_112(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 430)
  def _reduce_113(val, _values, result)
     result <<  val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 433)
  def _reduce_114(val, _values, result)
     result = [:STRING,-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 434)
  def _reduce_115(val, _values, result)
     result = [:STRING,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 435)
  def _reduce_116(val, _values, result)
     result = [:SIZE_IS,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 436)
  def _reduce_117(val, _values, result)
     result = [:COUNT_IS,val[2]] 
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 447)
  def _reduce_119(val, _values, result)
                val[1].set_qualifier( val[0] )
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 456)
  def _reduce_120(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 458)
  def _reduce_121(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 471)
  def _reduce_126(val, _values, result)
     result = EnumType.new( -1 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 472)
  def _reduce_127(val, _values, result)
     result = EnumType.new( 8 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 473)
  def _reduce_128(val, _values, result)
     result = EnumType.new( 16 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 474)
  def _reduce_129(val, _values, result)
     result = EnumType.new( 32 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 475)
  def _reduce_130(val, _values, result)
     result = EnumType.new( 64 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 476)
  def _reduce_131(val, _values, result)
     result = EnumType.new( 128 ) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 487)
  def _reduce_136(val, _values, result)
     result = :CONST 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 488)
  def _reduce_137(val, _values, result)
     result = :VOLATILE 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 493)
  def _reduce_138(val, _values, result)
                val[1].set_type( val[0] )
            result = val[1]
        
    result
  end
.,.,

# reduce 139 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 500)
  def _reduce_140(val, _values, result)
     result = Decl.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 502)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 505)
  def _reduce_142(val, _values, result)
                val[0].set_type( ArrayType.new( val[2] ) )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 510)
  def _reduce_143(val, _values, result)
                val[0].set_type( ArrayType.new )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 515)
  def _reduce_144(val, _values, result)
                val[0].set_type( FuncType.new( val[2] ) )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 521)
  def _reduce_145(val, _values, result)
                Generator.warning( "W5010 need 'void' for no parameter"  )
            val[0].set_type( FuncType.new )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 528)
  def _reduce_146(val, _values, result)
     result = PtrType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 531)
  def _reduce_147(val, _values, result)
                result = PtrType.new
            result.set_qualifier( val[1] )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 536)
  def _reduce_148(val, _values, result)
                val[1].set_type(PtrType.new)
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 541)
  def _reduce_149(val, _values, result)
                ptrtype = PtrType.new
            ptrtype.set_qualifier( val[1] )
            val[2].set_type( ptrtype )
            result = val[2]
        
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 555)
  def _reduce_152(val, _values, result)
     result = ParamList.new( val[0] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 558)
  def _reduce_153(val, _values, result)
                val[0].add_param( val[2] )
            # result = val[0] 不要
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 568)
  def _reduce_154(val, _values, result)
                val[2].set_kind( :PARAMETER )
            paramdecl = ParamDecl.new( val[2], val[1], val[0] )
            val[2].check
            result = paramdecl
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 577)
  def _reduce_155(val, _values, result)
                Generator.error( "G1001 need specifier for \'$1\'" , val[1].get_name )
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 582)
  def _reduce_156(val, _values, result)
                unless val[0].instance_of?( VoidType ) then
                Generator.error( "G1002 need parameter name"  )
            end
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 590)
  def _reduce_157(val, _values, result)
                unless val[1].instance_of?( VoidType ) then
                Generator.error( "G1003 need parameter name"  )
            end
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 597)
  def _reduce_158(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 601)
  def _reduce_159(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 603)
  def _reduce_160(val, _values, result)
     result = result + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 606)
  def _reduce_161(val, _values, result)
     result = [ [:IN]  ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 607)
  def _reduce_162(val, _values, result)
     result = [ [:OUT] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 608)
  def _reduce_163(val, _values, result)
     result = [ [:INOUT] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 609)
  def _reduce_164(val, _values, result)
     result = [ [:SEND,   val[2]] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 610)
  def _reduce_165(val, _values, result)
     result = [ [:RECEIVE,val[2]] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 611)
  def _reduce_166(val, _values, result)
     result = [ [:STRING,nil] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 612)
  def _reduce_167(val, _values, result)
     result = [ [:STRING,  val[2]] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 613)
  def _reduce_168(val, _values, result)
     result = [ [:SIZE_IS, val[2]] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 616)
  def _reduce_169(val, _values, result)
                result = [ [:SIZE_IS,val[2]], [:MAX_IS, val[4]] ]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 618)
  def _reduce_170(val, _values, result)
     result = [ [:COUNT_IS,val[2]] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 619)
  def _reduce_171(val, _values, result)
     result = [ [:NULLABLE] ] 
    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 625)
  def _reduce_173(val, _values, result)
                if val[1] then
                val[1].set_type( val[0] )
                result = val[1]
            else
                # エラー：仮で val[0] を返す
                result = val[0]
            end
        
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 642)
  def _reduce_177(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 645)
  def _reduce_178(val, _values, result)
                Generator.error( "G1004 impossible array type"  )
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 650)
  def _reduce_179(val, _values, result)
                Generator.error( "G1005 impossible array type"  )
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 655)
  def _reduce_180(val, _values, result)
                Generator.error( "G1006 impossible array type"  )
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 660)
  def _reduce_181(val, _values, result)
                Generator.error( "G1007 impossible array type"  )
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 665)
  def _reduce_182(val, _values, result)
                Generator.error( "G1008 impossible function type"  )
            result = nil
        
    result
  end
.,.,

# reduce 183 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 671)
  def _reduce_184(val, _values, result)
                Generator.warning( "W5011 need 'void' for no parameter"  )
            val[0].set_type( FuncType.new )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 677)
  def _reduce_185(val, _values, result)
                val[0].set_type( FuncType.new( val[2] ) )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 684)
  def _reduce_186(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 686)
  def _reduce_187(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 688)
  def _reduce_188(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 691)
  def _reduce_189(val, _values, result)
     result = C_EXP.new( val[2] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 696)
  def _reduce_190(val, _values, result)
                result = [ val[0] ]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 700)
  def _reduce_191(val, _values, result)
                val[0] << val[2]
            result = val[0]
        
    result
  end
.,.,

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 718)
  def _reduce_196(val, _values, result)
                obj = val[3]
            if obj.kind_of?( Cell ) || obj.kind_of?( Signature ) || obj.kind_of?( Celltype ) || obj.kind_of?( CompositeCelltype )then
                # cell, signature 以外は、指定子を置けない
            else
          Generator.get_statement_specifier   # クリア
          Generator.error( "G1009 unexpected specifier"  )
            end
        
    result
  end
.,.,

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 747)
  def _reduce_211(val, _values, result)
     Generator.add_statement_specifier val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 749)
  def _reduce_212(val, _values, result)
     Generator.add_statement_specifier val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 752)
  def _reduce_213(val, _values, result)
     result = [:ACTIVE] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 754)
  def _reduce_214(val, _values, result)
     result = [ :ALLOCATOR, val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 756)
  def _reduce_215(val, _values, result)
     result = [ :CALLBACK ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 758)
  def _reduce_216(val, _values, result)
     result = [ :CONTEXT, val[2].val ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 760)
  def _reduce_217(val, _values, result)
     result = [ :DEVIATE ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 762)
  def _reduce_218(val, _values, result)
     result = [:GENERATE, val[2].val, val[4].val] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 764)
  def _reduce_219(val, _values, result)
     result = [ :ID, val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 765)
  def _reduce_220(val, _values, result)
     result = [:IDX_IS_ID] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 767)
  def _reduce_221(val, _values, result)
     result = [ :PROTOTYPE ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 768)
  def _reduce_222(val, _values, result)
     result = [:PSEUDO_ACTIVE]
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 770)
  def _reduce_223(val, _values, result)
     result = [ :RESTRICT, val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 771)
  def _reduce_224(val, _values, result)
     result = [:SINGLETON] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 773)
  def _reduce_225(val, _values, result)
     result = [ :THROUGH, val[2], val[4], val[6] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 776)
  def _reduce_226(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 777)
  def _reduce_227(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 781)
  def _reduce_228(val, _values, result)
      result = [ :NORMAL_ALLOC, val[0], nil, val[2], val[4], val[6] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 783)
  def _reduce_229(val, _values, result)
      result = [ :NORMAL_ALLOC, val[0], val[2], val[5], val[7], val[9] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 792)
  def _reduce_230(val, _values, result)
        result = [val[0]]        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 794)
  def _reduce_231(val, _values, result)
        result << val[2]        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 798)
  def _reduce_232(val, _values, result)
        result = [ val[0].val, nil, val[3] ]        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 800)
  def _reduce_233(val, _values, result)
        result = [ val[0].val, val[2].val, val[5] ]        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 804)
  def _reduce_234(val, _values, result)
        result = [val[0]]        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 806)
  def _reduce_235(val, _values, result)
        result << val[2]        
    result
  end
.,.,

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 823)
  def _reduce_240(val, _values, result)
                val[0].each { |decl|
                decl.set_kind( :CONSTANT )
                Namespace.new_const_decl( decl )
                decl.check
            }
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 833)
  def _reduce_241(val, _values, result)
                @@import_C = true
            Import_C.new( val[2] )
            @@import_C = false
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 839)
  def _reduce_242(val, _values, result)
                @@import_C = true
            Import_C.new( val[2], val[4] )
            @@import_C = false
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 846)
  def _reduce_243(val, _values, result)
     Import.new( val[2] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 848)
  def _reduce_244(val, _values, result)
     Import.new( val[2], true ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 853)
  def _reduce_245(val, _values, result)
     Generate.new( val[2].val, val[4], val[6] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 858)
  def _reduce_246(val, _values, result)
                val[2].each{ |i|       # i:Decl
                i.set_kind( :TYPEDEF )
            }
            Typedef.new_decl_list( val[1], val[2] )
            val[2].each{ |i|       # i:Decl
                i.check
            }
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 868)
  def _reduce_247(val, _values, result)
                val[5].each{ |i|       # i:Decl
                i.set_kind( :TYPEDEF )
            }
            Typedef.new_decl_list( val[4], val[5] )
            val[5].each{ |i|       # i:Decl
                i.check
            }
        
    result
  end
.,.,

# reduce 248 omitted

# reduce 249 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 885)
  def _reduce_250(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 887)
  def _reduce_251(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 891)
  def _reduce_252(val, _values, result)
    val[1].end_of_parse
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 895)
  def _reduce_253(val, _values, result)
    result = Namespace.new(val[0].val)
    result
  end
.,.,

# reduce 254 omitted

# reduce 255 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 903)
  def _reduce_256(val, _values, result)
     result = NamespacePath.new( val[0].val, false ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 904)
  def _reduce_257(val, _values, result)
     result = NamespacePath.new( val[1].val, true ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 906)
  def _reduce_258(val, _values, result)
     result = val[0].append!( val[2].val ) 
    result
  end
.,.,

# reduce 259 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 914)
  def _reduce_260(val, _values, result)
     result = val[1].end_of_parse( val[3] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 918)
  def _reduce_261(val, _values, result)
    result = Signature.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 924)
  def _reduce_262(val, _values, result)
     result = NamedList.new( nil, "function" ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 926)
  def _reduce_263(val, _values, result)
     result = val[0].add_item( val[1] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 931)
  def _reduce_264(val, _values, result)
                # val[1]: Decl
            if val[1].is_function? then
                result = FuncHead.new( val[1], val[0], false )
                val[1].set_kind :FUNCHEAD
                val[1].check
            else
                # mikan 関数の配列も以下のメッセージになる
                Generator.error( "G1010 Not function"  )
                result = nil
            end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 944)
  def _reduce_265(val, _values, result)
                if val[4].is_function? then
                result = FuncHead.new( val[4], val[3], true )
            else
                Generator.error( "G1011 Not function"  )
                result = nil
            end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 956)
  def _reduce_266(val, _values, result)
                val[1].end_of_parse
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 962)
  def _reduce_267(val, _values, result)
     result = Celltype.new(val[0].val) 
    result
  end
.,.,

# reduce 268 omitted

# reduce 269 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 971)
  def _reduce_270(val, _values, result)
                if val[0].kind_of? Port then
                Celltype.new_port( val[0] )
            end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 977)
  def _reduce_271(val, _values, result)
                if val[3].kind_of? Port then
                val[3].set_specifier val[1]  # 設定順序あり
                Celltype.new_port( val[3] )
            else
                # Port 以外では指定子はエラー
                Generator.error( "G1012 $1 : cannot put specifier here" , val[1] )
            end
        
    result
  end
.,.,

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 996)
  def _reduce_277(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 998)
  def _reduce_278(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1001)
  def _reduce_279(val, _values, result)
     result = [ :INLINE ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1002)
  def _reduce_280(val, _values, result)
     result = [ :ALLOCATOR, val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1003)
  def _reduce_281(val, _values, result)
     result = [ :OPTIONAL ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1004)
  def _reduce_282(val, _values, result)
     result = [ :REF_DESC ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1005)
  def _reduce_283(val, _values, result)
     result = [ :DYNAMIC ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1006)
  def _reduce_284(val, _values, result)
     result = [ :OMIT ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1009)
  def _reduce_285(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1010)
  def _reduce_286(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1011)
  def _reduce_287(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1012)
  def _reduce_288(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1016)
  def _reduce_289(val, _values, result)
      result = [ :INTERNAL_ALLOC, val[0].val, val[2].val, val[4] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1018)
  def _reduce_290(val, _values, result)
      result = [ :RELAY_ALLOC, val[0].val, val[2].val, val[4] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1024)
  def _reduce_291(val, _values, result)
     result = Port.new( val[2].val, val[1], val[0] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1026)
  def _reduce_292(val, _values, result)
     result = Port.new( val[2].val, val[1], val[0], "[]" ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1028)
  def _reduce_293(val, _values, result)
     result = Port.new(val[2].val, val[1], val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1030)
  def _reduce_294(val, _values, result)
     result = Port.new( val[2].val, val[1], val[0], nil, val[4], val[ 6 ].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1033)
  def _reduce_295(val, _values, result)
     result = :CALL 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1034)
  def _reduce_296(val, _values, result)
     result = :ENTRY 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1038)
  def _reduce_297(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 298 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1047)
  def _reduce_299(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1051)
  def _reduce_300(val, _values, result)
     Celltype.new_attribute( val[0] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1053)
  def _reduce_301(val, _values, result)
     Celltype.new_attribute( val[1] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1059)
  def _reduce_302(val, _values, result)
                val[0].each{ |i|       # i:Decl
                i.set_kind( :ATTRIBUTE )
                i.check
            }
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1067)
  def _reduce_303(val, _values, result)
                val[3].each{ |i|       # i:Decl
                i.set_kind( :ATTRIBUTE )   # 設定順序あり
                i.set_specifier_list( [val[1]] )
                i.check
            }
            result = val[3]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1076)
  def _reduce_304(val, _values, result)
     result = [:OMIT] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1077)
  def _reduce_305(val, _values, result)
     result = [:SIZE_IS,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1078)
  def _reduce_306(val, _values, result)
      result = [:CHOICE,val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1081)
  def _reduce_307(val, _values, result)
      result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1082)
  def _reduce_308(val, _values, result)
      result = [ val[0] ] 
    result
  end
.,.,

# reduce 309 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1090)
  def _reduce_310(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1094)
  def _reduce_311(val, _values, result)
     Celltype.new_var( val[0] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1096)
  def _reduce_312(val, _values, result)
     Celltype.new_var( val[1] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1101)
  def _reduce_313(val, _values, result)
                val[0].each{ |i|       # i:Decl
                i.set_kind( :VAR )
                i.check
            }
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1108)
  def _reduce_314(val, _values, result)
                val[3].each{ |i|       # i:Decl
                i.set_kind( :VAR )   # 設定順序あり
                i.set_specifier_list( [val[1]] )
                i.check
            }
            result = val[3]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1117)
  def _reduce_315(val, _values, result)
     result = [:SIZE_IS,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1123)
  def _reduce_316(val, _values, result)
                Celltype.new_require( val[1], val[3] )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1127)
  def _reduce_317(val, _values, result)
                Celltype.new_require( val[3], val[5], val[1].val )
        
    result
  end
.,.,

# reduce 318 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1135)
  def _reduce_319(val, _values, result)
     Factory.set_f_celltype( false ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1136)
  def _reduce_320(val, _values, result)
     Factory.set_f_celltype( true ) 
    result
  end
.,.,

# reduce 321 omitted

# reduce 322 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1144)
  def _reduce_323(val, _values, result)
     Factory.new( val[0].val, val[2], val[4], nil    ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1146)
  def _reduce_324(val, _values, result)
     Factory.new( val[0].val, val[2], val[4], val[6] ) 
    result
  end
.,.,

# reduce 325 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1153)
  def _reduce_326(val, _values, result)
     result = [ [ :IDENTIFIER, val[0].val ] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1155)
  def _reduce_327(val, _values, result)
     result << [ :IDENTIFIER, val[2].val ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1157)
  def _reduce_328(val, _values, result)
     result = [ [ :STRING_LITERAL, val[0].val ] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1159)
  def _reduce_329(val, _values, result)
     result << [ :STRING_LITERAL, val[2].val ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1164)
  def _reduce_330(val, _values, result)
     Cell.new_def 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1166)
  def _reduce_331(val, _values, result)
     result = Cell.end_of_parse true 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1168)
  def _reduce_332(val, _values, result)
     result = Cell.end_of_parse false 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1172)
  def _reduce_333(val, _values, result)
     result = Cell.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1176)
  def _reduce_334(val, _values, result)
     result = Cell.set_name(val[0].val) 
    result
  end
.,.,

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1185)
  def _reduce_338(val, _values, result)
     val[3].set_specifier_list( val[1] )  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1187)
  def _reduce_339(val, _values, result)
     val[0].set_specifier_list( [] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1191)
  def _reduce_340(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1193)
  def _reduce_341(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1197)
  def _reduce_342(val, _values, result)
     result = [ :THROUGH, val[2], val[4] ] 
    result
  end
.,.,

# reduce 343 omitted

# reduce 344 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1214)
  def _reduce_345(val, _values, result)
                result = Join.new( val[0].val,  -1, val[4] )
            Cell.new_join( result, true )
         
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1219)
  def _reduce_346(val, _values, result)
                result = Join.new( val[0].val, val[2], val[5] )
            Cell.new_join( result, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1224)
  def _reduce_347(val, _values, result)
                result = Join.new( val[0].val, nil, val[2] )
            Cell.new_join( result, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1229)
  def _reduce_348(val, _values, result)
                result = Join.new( val[0].val, nil, [ :COMPOSITE, val[4] ] )
            Cell.new_join( result, true )
        
    result
  end
.,.,

# reduce 349 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1240)
  def _reduce_350(val, _values, result)
                rj = ReverseJoin.new( val[0].val, nil, val[2], val[4].val )
            Cell.new_reverse_join( rj )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1246)
  def _reduce_351(val, _values, result)
                rj = ReverseJoin.new( val[0].val, nil, val[2], val[4].val, val[6] )
            Cell.new_reverse_join( rj )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1252)
  def _reduce_352(val, _values, result)
                rj = ReverseJoin.new( val[0].val, val[2], val[5], val[7].val )
            Cell.new_reverse_join( rj )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1258)
  def _reduce_353(val, _values, result)
                rj = ReverseJoin.new( val[0].val, val[2], val[5], val[7].val, val[9] )
            Cell.new_reverse_join( rj )
        
    result
  end
.,.,

# reduce 354 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1270)
  def _reduce_355(val, _values, result)
                CompositeCelltype.end_of_parse
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1276)
  def _reduce_356(val, _values, result)
     result = CompositeCelltype.new(val[0].val) 
    result
  end
.,.,

# reduce 357 omitted

# reduce 358 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1285)
  def _reduce_359(val, _values, result)
                if val[0].kind_of?( Port ) then
                CompositeCelltype.new_port( val[0] )   # 遅延して登録
            end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1291)
  def _reduce_360(val, _values, result)
                if val[3].kind_of?( Port ) then
                # port 以外 val[3] に有効な値が入っていないので、以下のメソッドを適用できない
                # 現状 port, cell 以外は指定子を受け付けない
                # （しかし将来他の文も指定子を受け付ける可能性があるので、この位置に記述する）
                val[3].set_specifier( Generator.get_statement_specifier )
                CompositeCelltype.new_port( val[3] )   # 遅延して登録 (set_specifier 後)
            elsif val[3].kind_of?( Cell ) then
                # Cell.end_of_parse にて設定
            else
          Generator.get_statement_specifier   # クリア
          Generator.error( "G1013 unexpected specifier"  )
            end
        
    result
  end
.,.,

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1315)
  def _reduce_365(val, _values, result)
                Generator.add_statement_specifier val[0]
            result = [ val[0] ]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1320)
  def _reduce_366(val, _values, result)
                Generator.add_statement_specifier val[2]
            result = val[0] << val[2]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1325)
  def _reduce_367(val, _values, result)
     result = [ :ALLOCATOR, val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1326)
  def _reduce_368(val, _values, result)
     result = [ :OMIT ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1327)
  def _reduce_369(val, _values, result)
     result = [ :OPTIONAL ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1328)
  def _reduce_370(val, _values, result)
     result = [ :REF_DESC ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1329)
  def _reduce_371(val, _values, result)
     result = [ :DYNAMIC ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1334)
  def _reduce_372(val, _values, result)
                # CompositeCelltype.new_port( val[0] )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1341)
  def _reduce_373(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1345)
  def _reduce_374(val, _values, result)
     CompositeCelltype.new_attribute( val[0] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1347)
  def _reduce_375(val, _values, result)
     CompositeCelltype.new_attribute( val[1] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1352)
  def _reduce_376(val, _values, result)
     Cell.new_def 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1354)
  def _reduce_377(val, _values, result)
     result = Cell.end_of_parse true 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1356)
  def _reduce_378(val, _values, result)
     result = Cell.end_of_parse false 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1360)
  def _reduce_379(val, _values, result)
     Cell.new(val[0],true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1364)
  def _reduce_380(val, _values, result)
     Cell.set_name(val[0].val) 
    result
  end
.,.,

# reduce 381 omitted

# reduce 382 omitted

# reduce 383 omitted

# reduce 384 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1374)
  def _reduce_385(val, _values, result)
        Cell.external_join( val[0].val, val[4].val, true )    
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1376)
  def _reduce_386(val, _values, result)
        Cell.external_join( val[0].val, val[2].val, false )    
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1383)
  def _reduce_387(val, _values, result)
                CompositeCelltype.new_join( val[0].val,
                        val[2].val, val[4].val, :ENTRY )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1388)
  def _reduce_388(val, _values, result)
                CompositeCelltype.new_join( val[2].val,
                        val[4].val, val[6].val, :ENTRY )
        
    result
  end
.,.,

# reduce 389 omitted

# reduce 390 omitted

# reduce 391 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1404)
  def _reduce_392(val, _values, result)
     Region.end_of_parse 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1406)
  def _reduce_393(val, _values, result)
     Region.end_of_parse 
    result
  end
.,.,

# reduce 394 omitted

# reduce 395 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1414)
  def _reduce_396(val, _values, result)
     Region.new_in_through( val[2].val, val[4].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1416)
  def _reduce_397(val, _values, result)
     Region.new_in_through 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1418)
  def _reduce_398(val, _values, result)
     Region.new_out_through( val[2].val, val[4].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1420)
  def _reduce_399(val, _values, result)
     Region.new_out_through() 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1422)
  def _reduce_400(val, _values, result)
     Region.new_to_through( val[2], val[4].val, val[6].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1424)
  def _reduce_401(val, _values, result)
     Region.new_to_through( val[2], nil, nil ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1426)
  def _reduce_402(val, _values, result)
     Region.new_from_through( val[2], val[4].val, val[6].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1428)
  def _reduce_403(val, _values, result)
     Region.new_from_through( val[2], nil, nil ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1430)
  def _reduce_404(val, _values, result)
     Region.set_type( :NODE ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1432)
  def _reduce_405(val, _values, result)
     Region.set_type( :LINKUNIT ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1434)
  def _reduce_406(val, _values, result)
     Region.set_domain( val[2].val, val[4] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1436)
  def _reduce_407(val, _values, result)
     Region.set_class( val[2].val, val[4] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1440)
  def _reduce_408(val, _values, result)
     result = Region.new( val[0].val ) 
    result
  end
.,.,

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

# reduce 412 omitted

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1461)
  def _reduce_417(val, _values, result)
                obj = val[3]
            if obj.kind_of?( Cell ) then
            else
          Generator.get_statement_specifier   # クリア
          Generator.error( "G9999 unexpected specifier"  )
            end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1482)
  def _reduce_418(val, _values, result)
     result = [ val[0].val ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1487)
  def _reduce_419(val, _values, result)
     set_in_specifier 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1489)
  def _reduce_420(val, _values, result)
     unset_in_specifier 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1494)
  def _reduce_421(val, _values, result)
     TOOL_INFO.new( val[2].to_sym, val[4] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1495)
  def _reduce_422(val, _values, result)
      result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1496)
  def _reduce_423(val, _values, result)
     result = { val[0].to_sym => val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1498)
  def _reduce_424(val, _values, result)
     val[0][ val[2].to_sym ] = val[4] 
    result
  end
.,.,

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1500)
  def _reduce_429(val, _values, result)
     result=val[0].val 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1500)
  def _reduce_430(val, _values, result)
     result=val[0].val 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1501)
  def _reduce_431(val, _values, result)
     result = val[1]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1502)
  def _reduce_432(val, _values, result)
     result = []  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1503)
  def _reduce_433(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1504)
  def _reduce_434(val, _values, result)
     val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1505)
  def _reduce_435(val, _values, result)
     result = val[0].val.gsub!( /\"(.*)\"/, "\\1" ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1506)
  def _reduce_436(val, _values, result)
     result = val[0].val.to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1507)
  def _reduce_437(val, _values, result)
     result = val[0].val.to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1508)
  def _reduce_438(val, _values, result)
     result = - val[0].val.to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1509)
  def _reduce_439(val, _values, result)
     result = - val[0].val.to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1510)
  def _reduce_440(val, _values, result)
     result = val[0].val.to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1511)
  def _reduce_441(val, _values, result)
     result = val[0].val.to_f 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Generator



# ファイル => INCLUDE("header")の配列
Include = Hash.new {|hash, key| hash[key] = []}


class Token

  attr_accessor :val, :file, :lineno, :col

  def initialize(val, file, lineno, col)
    @val = val
    @file = file
    @lineno = lineno
    @col = col

  end

  def to_s
    @val.to_s
  end

  def to_sym
    @val.to_sym
  end

  def get_name
    @val
  end

  def locale
    [@file, @lineno, @col]
  end

  def eql?(other)
    if other.is_a? Symbol
      @val == other
    elsif other.is_a? Token
      @val == other.val
    elsif other.is_a? String
      @val.to_s == other
    else
      raise ArgumentError
    end
  end

  alias == eql?

  def show_tree( indent )
    indent.times { print "  " }
    print "#{@val}\n"
  end

end

#= TECSIO
#  Ruby2.0(1.9) 対応に伴い導入したクラス
#  SJIS 以外では、ASCII-8BIT として入力する
class TECSIO
  def self.foreach(file, &pr) # ブロック引数 { |line| }
    # obsolete Ruby 3.0 では使えなくなった
    # pr = Proc.new   # このメソッドのブロック引数を pr に代入
    if $b_no_kcode then
      msg = "E".encode $Ruby19_File_Encode
      if( $Ruby19_File_Encode == "Shift_JIS" )

    # Shift JIS は、いったん Windows-31J として読み込ませ、Shift_JIS に変換させる．
    # コメント等に含まれる SJIS に不適切な文字コードは '?' または REPLACEMENT CHARACTER に変換される．
    # EUC や UTF-8 で記述された CDL が混在していても、Ruby 例外が発生することなく処理を進めることができる．
    # 文字コード指定が SJIS であって、文字列リテラルの中に、文字コードがSJIS 以外の非 ASCII が含まれている場合、
    # Ruby 1.8 の tecsgen では文字コード指定に影響なく処理されたものが、Ruby 1.9 以降では '?' に置き換わる可能性がある．

    mode = "r:Windows-31J"
      else
    mode = "r:#{$Ruby19_File_Encode}"
      end
      # mode = "r"
    else
      msg = "E"
      mode = "r"
    end

    f = File.open( file, mode )
    begin
      f.each{ |line|
        # dbgPrint line
        line = str_code_convert( msg, line )
        pr.call( line )
      }
    ensure
      f.close
    end
  end

  #=== 文字コードが相違する場合一致させる
  # msg と str の文字コードが相違する場合、str を msg の文字コードに変換する
  # 変換不可の文字コードは '?' (utf-8 の場合 U+FFFD (REPLACEMENT CHARACTER )) に変換
  #
  # このメソッドは、エラーメッセージ出力でも使用されていることに注意．
  #
  #msg_enc::Encode | String
  def self.str_code_convert( msg, str )
    if $b_no_kcode == false then
      return str              # Ruby V1.8 まで
    end
    if msg.encoding != str.encoding then
      begin
        # option = { :invalid => :replace, :undef => :replace }   # 例外を発生させず、'?' に変換する(utf-8 は 0xfffd)
        # return str.encode( msg.encoding, option )
        # Ruby 3.0: option を Hash で指定すると例外(?)
        #  option の指定は、デフォルトと同じであるため、option の指定をとりやめる
        return str.encode( msg.encoding )
      rescue
        return str
      end
    else
      return str
    end
  end
end
