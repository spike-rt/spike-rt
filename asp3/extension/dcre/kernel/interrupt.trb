# -*- coding: utf-8 -*-
#
#   TOPPERS/ASP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       Advanced Standard Profile Kernel
# 
#   Copyright (C) 2015 by FUJI SOFT INCORPORATED, JAPAN
#   Copyright (C) 2015-2020 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
#   $Id: interrupt.trb 1437 2020-05-20 12:12:16Z ertl-hiro $
# 

#
#		割込み管理機能の生成スクリプト
#

#
#  kernel_cfg.cの生成
#
$kernelCfgC.comment_header("Interrupt Management Functions")

#
#  CRE_ISRで使用できる割込み番号とそれに対応する割込みハンドラ番号のデ
#  フォルト定義
#
if !defined?($INTNO_CREISR_VALID)
  $INTNO_CREISR_VALID = $INTNO_VALID
end
if !defined?($INHNO_CREISR_VALID)
  $INHNO_CREISR_VALID = $INHNO_VALID
end

#
#  CFG_INTで使用できる割込み優先度のデフォルト定義
# 
if !defined?($INTPRI_CFGINT_VALID)
  $INTPRI_CFGINT_VALID = $TMIN_INTPRI.upto($TMAX_INTPRI).to_a
end

#
#  割込み番号と割込みハンドラ番号の変換テーブルの作成
#
if $INTNO_CREISR_VALID.length != $INHNO_CREISR_VALID.length
  error_exit("length of `INTNO_CREISR_VALID' is different from" \
									" length of `INHNO_CREISR_VALID'")
end
$toInhnoVal = {}
$toIntnoVal = {}
inhno_creisr_valid = $INHNO_CREISR_VALID.dup
$INTNO_CREISR_VALID.each do |intnoVal|
  inhnoVal = inhno_creisr_valid.shift
  $toInhnoVal[intnoVal] = inhnoVal
  $toIntnoVal[inhnoVal] = intnoVal
end

#
#  割込み要求ラインに関するエラーチェック
#
$cfgData[:CFG_INT].each do |_, params|
  # intnoが有効範囲外の場合（E_PAR）［NGKI2972］
  if !$INTNO_VALID.include?(params[:intno])
    error_illegal("E_PAR", params, :intno)
  end

  # intatrが無効の場合（E_RSATR）［NGKI2969］［NGKI2944］［NGKI2945］
  #（TA_ENAINT，TA_EDGE，TARGET_INTATR以外のビットがセットされている場合）
  if (params[:intatr] & ~($TA_ENAINT|$TA_EDGE|$TARGET_INTATR)) != 0
    error_illegal_sym("E_RSATR", params, :intatr, :intno)
  end

  # intpriがCFG_INTに対する割込み優先度として正しくない場合（E_PAR）
  # ［NGKI2973］
  if !$INTPRI_CFGINT_VALID.include?(params[:intpri])
    error_illegal_sym("E_PAR", params, :intpri, :intno)
  end

  # カーネル管理外に固定されているintnoに対して，intpriにTMIN_INTPRI以
  # 上の値が指定された場合（E_OBJ）［NGKI2983］
  if defined?($INTNO_FIX_NONKERNEL) \
				&& $INTNO_FIX_NONKERNEL.include?(params[:intno])
    if params[:intpri] >= $TMIN_INTPRI
      error_ercd("E_OBJ", params, "%%intno must have higher priority " \
											"than TMIN_INTPRI in %apiname")
    end
  end

  # カーネル管理に固定されているintnoに対して，intpriにTMIN_INTPRIより
  # も小さい値が指定された場合（E_OBJ）［NGKI2984］
  if defined?($INTNO_FIX_KERNEL) \
				&& $INTNO_FIX_KERNEL.include?(params[:intno])
    if params[:intpri] < $TMIN_INTPRI
      error_ercd("E_OBJ", params, "%%intno must have lower or equal " \
									"priority to TMIN_INTPRI in %apiname")
    end
  end

  # ターゲット依存のエラーチェック［NGKI2985］
  if defined? TargetCheckCfgInt()
    TargetCheckCfgInt(params)
  end
end

#
#  割込みハンドラに関するエラーチェック
#
$cfgData[:DEF_INH].each do |_, params|
  # inhnoが有効範囲外の場合（E_PAR）［NGKI3055］
  if !$INHNO_VALID.include?(params[:inhno])
    error_illegal("E_PAR", params, :inhno)
  end

  # inhatrが無効の場合（E_RSATR）［NGKI3052］［NGKI2957］［NGKI2959］
  #（TARGET_INHATR以外のビットがセットされている場合）
  if (params[:inhatr] & ~($TARGET_INHATR)) != 0
    error_illegal_sym("E_RSATR", params, :inhatr, :inhno)
  end

  # カーネル管理外に固定されているinhnoに対して，inhatrにTA_NONKERNELが
  # 指定されていない場合（E_RSATR）［NGKI3067］
  if defined?($INHNO_FIX_NONKERNEL) \
				&& $INHNO_FIX_NONKERNEL.include?(params[:inhno])
    if (params[:inhatr] & $TA_NONKERNEL) == 0
      error_ercd("E_RSATR", params, "%%inhno must be " \
								"non-kernel interrupt in %apiname")
      # 以降のエラーの抑止
      next
    end
  end

  # カーネル管理に固定されているinhnoに対して，inhatrにTA_NONKERNELが指
  # 定されている場合（E_RSATR）［NGKI3068］
  if defined?($INHNO_FIX_KERNEL) \
				&& $INHNO_FIX_KERNEL.include?(params[:inhno])
    if (params[:inhatr] & $TA_NONKERNEL) != 0
      error_ercd("E_RSATR", params, "%%inhno must not be " \
								"non-kernel interrupt in %apiname")
      # 以降のエラーの抑止
      next
    end
  end

  if $INHNO_CREISR_VALID.include?(params[:inhno])
    # 割込みハンドラ番号に対応する割込み番号がある場合
    intnoVal = $toIntnoVal[params[:inhno].val]

    # inhnoに対応するintnoに対するCFG_INTがない場合（E_OBJ）［NGKI3062］
    if !$cfgData[:CFG_INT].has_key?(intnoVal)
      error_ercd("E_OBJ", params, "intno `#{intnoVal}' corresponding to " \
					"%%inhno in %apiname is not configured with CFG_INT")
    else
      intnoParams = $cfgData[:CFG_INT][intnoVal]

      if intnoParams[:intpri] < $TMIN_INTPRI
        # inhnoに対応するintnoに対してCFG_INTで設定された割込み優先度
        # がTMIN_INTPRIよりも小さく，inhatrにTA_NONKERNELが指定されて
        # いない場合（E_OBJ）［NGKI3065］
        if (params[:inhatr] & $TA_NONKERNEL) == 0
          error_ercd("E_OBJ", params, "TA_NONKERNEL must be set for " \
						"non-kernel interrupt handler in %apiname of %%inhno")
        end
      else
		# inhnoに対応するintnoに対してCFG_INTで設定された割込み優先度
		# がTMIN_INTPRI以上で，inhatrにTA_NONKERNELが指定されている場
		# 合（E_OBJ）［NGKI3066］
        if (params[:inhatr] & $TA_NONKERNEL) != 0
          error_ercd("E_OBJ", params, "TA_NONKERNEL must not be set for " \
						"kernel interrupt handler in %apiname of %%inhno")
        end
      end
    end
  end

  # ターゲット依存のエラーチェック［NGKI3078］
  if defined? TargetCheckDefInh()
    TargetCheckDefInh(params)
  end
end

#
#  割込みサービスルーチン（ISR）に関するエラーチェック
#
$cfgData[:CRE_ISR].sort.each do |_, params|
  # isratrが無効の場合（E_RSATR）［NGKI2998］［NGKI2952］［NGKI5176］
  #（TARGET_ISRATR以外のビットがセットされている場合）
  if (params[:isratr] & ~($TARGET_ISRATR)) != 0
    error_illegal("E_RSATR", params, "isratr")
  end

  # intnoが有効範囲外の場合（E_PAR）［NGKI3003］
  if !$INTNO_CREISR_VALID.include?(params[:intno])
    error_illegal("E_PAR", params, "intno")
  end

  # isrpriが有効範囲外の場合（E_PAR）［NGKI3005］
  #（TMIN_ISRPRI <= isrpri && isrpri <= TMAX_ISRPRIでない場合）
  if !($TMIN_ISRPRI <= params[:isrpri] && params[:isrpri] <= $TMAX_ISRPRI)
    error_illegal("E_PAR", params, "isrpri")
  end

  # intnoに対応するinhnoに対してDEF_INHがある場合（E_OBJ）［NGKI3013］
  inhnoVal = $toInhnoVal[params[:intno].val]
  if $cfgData[:DEF_INH].has_key?(inhnoVal)
    error_ercd("E_OBJ", params, "%%intno in %apiname is duplicated " \
					"with inhno #{$cfgData[:DEF_INH][inhnoVal][:inhno]}")
  end

  # intnoに対するCFG_INTがない場合（E_OBJ）［NGKI3012］
  if !$cfgData[:CFG_INT].has_key?(params[:intno])
    error_ercd("E_OBJ", params, "%%intno in %apiname " \
									"is not configured with CFG_INT")
  else
    intnoParams = $cfgData[:CFG_INT][params[:intno]]

    # intnoでカーネル管理外の割込み（intnoに対してCFG_INTで設定された
    # 割込み優先度がTMIN_INTPRIよりも小さい場合）を指定した場合（E_OBJ）
    # ［NGKI3014］
    if intnoParams[:intpri] < $TMIN_INTPRI
      error_ercd("E_OBJ", params, "interrupt service routine cannot handle " \
								"non-kernel interrupt in %apiname of %isrid")
    end
  end

  # ターゲット依存のエラーチェック
  if defined? TargetCheckCreIsr()
    TargetCheckCreIsr(params)
  end
end

#
#  割込みサービスルーチン（ISR）管理のデータ構造
#
intnoIsrList = []
$INTNO_CREISR_VALID.each do |intnoVal|
  inhnoVal = $toInhnoVal[intnoVal]
  if $cfgData[:CFG_INT].has_key?(intnoVal) \
							&& !$cfgData[:DEF_INH].has_key?(inhnoVal)
    intnoIsrList.push(intnoVal)
  end
end

intnoIsrList.sort!
$isrQueueHeader = {}
intnoIsrList.each_with_index do |intnoVal, index|
  $isrQueueHeader[intnoVal] = "&(_kernel_isr_queue_table[#{index}])"
end

$kernelCfgC.add2("const uint_t _kernel_tnum_isr_queue = #{intnoIsrList.size};")

if intnoIsrList.size > 0
  $kernelCfgC.add("const ISR_ENTRY _kernel_isr_queue_list" \
										"[#{intnoIsrList.size}] = {")
  intnoIsrList.each_with_index do |intnoVal, index|
    $kernelCfgC.add(",") if index > 0
    $kernelCfgC.append("\t{ #{intnoVal}, #{$isrQueueHeader[intnoVal]} }")
  end
  $kernelCfgC.add
  $kernelCfgC.add2("};")
  $kernelCfgC.add2("QUEUE _kernel_isr_queue_table[#{intnoIsrList.size}];")
else
  $kernelCfgC.add("TOPPERS_EMPTY_LABEL(const ISR_ENTRY, " \
											"_kernel_isr_queue_list);")
  $kernelCfgC.add2("TOPPERS_EMPTY_LABEL(QUEUE, _kernel_isr_queue_table);")
end

#
#  割込みサービスルーチン（ISR）呼出しのための割込みハンドラ
#
intnoIsrList.each do |intnoVal|
  inhnoVal = $toInhnoVal[intnoVal]

  # 次の静的APIに相当するデータを生成
  # DEF_INH(inhno, { TA_NULL, _kernel_inthdr_<intno> } );
  $cfgData[:DEF_INH][inhnoVal] = {
    inhno: NumStr.new(inhnoVal),
    inhatr: NumStr.new($TA_NULL, "TA_NULL"),
    inthdr: "_kernel_inthdr_#{intnoVal}"
  }

  # 割込みサービスルーチンを呼び出す割込みハンドラの生成［NGKI2941］
  $kernelCfgC.add("void")
  $kernelCfgC.add("_kernel_inthdr_#{intnoVal}(void)")
  $kernelCfgC.add("{")
  $kernelCfgC.add("\t_kernel_call_isr(#{$isrQueueHeader[intnoVal]});");
  $kernelCfgC.add2("}")
end

#
#  割込みサービスルーチンに関する一般的な情報の生成
#
class IsrObject < KernelObject
  def initialize()
    super("isr", "isr")
  end

  def prepare(key, params)
    # エラーチェックは実施済みなので，ここでの処理は不要
  end

  def generateInib(key, params)
    return("(#{params[:isratr]}), (EXINF)(#{params[:exinf]}), " \
						"(#{$isrQueueHeader[params[:intno].val]}), " \
						"(ISR)(#{params[:isr]}), (#{params[:isrpri]})")
  end
end
IsrObject.new.generate()

# 割込みサービスルーチン生成順序テーブルの生成
$kernelCfgC.add("const ID _kernel_isrorder_table[TNUM_SISRID] = { ")
$kernelCfgC.append("\t")
$cfgData[:CRE_ISR].each_with_index do |(_, params), index|
  $kernelCfgC.append(", ") if index > 0
  $kernelCfgC.append("#{params[:isrid]}")
end
$kernelCfgC.add
$kernelCfgC.add2("};")

#
#  割込みハンドラのための標準的な初期化情報の生成
#
if !$OMIT_INITIALIZE_INTERRUPT || $USE_INHINIB_TABLE
  #
  #  定義する割込みハンドラの数
  #
  $kernelCfgC.add(<<EOS)
#define TNUM_DEF_INHNO	#{$cfgData[:DEF_INH].size}
const uint_t _kernel_tnum_def_inhno = TNUM_DEF_INHNO;
EOS

  if $cfgData[:DEF_INH].size != 0
    #
    #  割込みハンドラのエントリ
    #
    $cfgData[:DEF_INH].each do |_, params|
      if (params[:inhatr] & $TA_NONKERNEL) == 0
        $kernelCfgC.add("INTHDR_ENTRY(#{params[:inhno]}, " \
						"#{params[:inhno].val}, #{params[:inthdr]})")
      end
    end
    $kernelCfgC.add("")

    #
    #  割込みハンドラ初期化ブロック
    #
    $kernelCfgC.add("const INHINIB _kernel_inhinib_table[TNUM_DEF_INHNO] = {")
    $cfgData[:DEF_INH].each_with_index do |(_, params), index|
      $kernelCfgC.add(",") if index > 0
      if (params[:inhatr] & $TA_NONKERNEL) == 0
        inthdr = "(FP)(INT_ENTRY(#{params[:inhno]}, #{params[:inthdr]}))"
      else
        inthdr = "(FP)(#{params[:inthdr]})"
      end
      $kernelCfgC.append("\t{ (#{params[:inhno]}), (#{params[:inhatr]}), " \
															"#{inthdr} }")
    end
    $kernelCfgC.add
    $kernelCfgC.add2("};")
  else
    $kernelCfgC.add2("TOPPERS_EMPTY_LABEL(const INHINIB, " \
										"_kernel_inhinib_table);")
  end
end

#
#  割込み要求ラインのための標準的な初期化情報の生成
#
if !$OMIT_INITIALIZE_INTERRUPT || $USE_INTINIB_TABLE
  #
  #  設定する割込み要求ラインの数
  #
  $kernelCfgC.add(<<EOS)
#define TNUM_CFG_INTNO	#{$cfgData[:CFG_INT].size}
const uint_t _kernel_tnum_cfg_intno = TNUM_CFG_INTNO;
EOS

  #
  #  割込み要求ライン初期化ブロック
  #
  if $cfgData[:CFG_INT].size != 0
    $kernelCfgC.add("const INTINIB _kernel_intinib_table[TNUM_CFG_INTNO] = {")
    $cfgData[:CFG_INT].each_with_index do |(_, params), index|
      $kernelCfgC.add(",") if index > 0
      $kernelCfgC.append("\t{ (#{params[:intno]}), (#{params[:intatr]}), " \
													"(#{params[:intpri]}) }")
    end
    $kernelCfgC.add
    $kernelCfgC.add2("};")
  else
    $kernelCfgC.add2("TOPPERS_EMPTY_LABEL(const INTINIB, " \
										"_kernel_intinib_table);")
  end
end

#
#  割込み管理機能初期化関数の追加
#
$initializeFunctions.push("_kernel_initialize_interrupt();")
