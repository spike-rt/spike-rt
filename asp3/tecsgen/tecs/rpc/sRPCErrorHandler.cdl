/*
 *  TECS Generator
 *      Generator for TOPPERS Embedded Component System
 *  
 *   Copyright (C) 2008-2013 by TOPPERS Project
 *--
 *   上記著作権者は，以下の(1)(4)の条件を満たす場合に限り，本ソフトウェ
 *   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *       スコード中に含まれていること．
 *   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *       の無保証規定を掲載すること．
 *   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *       と．
 *     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *         作権表示，この利用条件および下記の無保証規定を掲載すること．
 *     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *         報告すること．
 *   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *       免責すること．
 *  
 *   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *   の責任を負わない．
 *  
 *   $Id: sRPCErrorHandler.cdl 2640 2017-06-03 11:27:12Z okuma-top $
 */


/* client side state */
const	int16_t	RPCSTATE_CLIENT_GET_SEM		= 1;
const	int16_t	RPCSTATE_CLIENT_SEND_SOP	= 2;
const	int16_t	RPCSTATE_CLIENT_SEND_BODY	= 3;
const	int16_t	RPCSTATE_CLIENT_SEND_EOP	= 4;
const	int16_t	RPCSTATE_CLIENT_EXEC		= 5;
const	int16_t	RPCSTATE_CLIENT_RECV_SOP	= 6;
const	int16_t	RPCSTATE_CLIENT_RECV_BODY	= 7;
const	int16_t	RPCSTATE_CLIENT_RECV_EOP	= 8;
const	int16_t	RPCSTATE_CLIENT_RELEASE_SEM	= 9;

/* server side state */
const	int16_t	RPCSTATE_SERVER_GET_SEM		= 11;
const	int16_t	RPCSTATE_SERVER_RECV_SOP	= 12;
const	int16_t	RPCSTATE_SERVER_RECV_BODY	= 13;
const	int16_t	RPCSTATE_SERVER_RECV_EOP	= 14;
const	int16_t	RPCSTATE_SERVER_EXEC		= 15;
const	int16_t	RPCSTATE_SERVER_SEND_SOP	= 16;
const	int16_t	RPCSTATE_SERVER_SEND_BODY	= 17;
const	int16_t	RPCSTATE_SERVER_SEND_EOP	= 18;
const	int16_t	RPCSTATE_SERVER_RELEASE_SEM	= 19;

/* error hadler */
signature sRPCErrorHandler {
	ER	errorOccured( [in]int16_t func_id, [in]ER er, [in]int16_t state );
};

/*
 * 呼び元側では state が RPCSTATE_CLIENT_EXEC と等しいか大きい場合、
 * 呼び先側では state が RPCSTATE_SERVER_EXEC と等しいか大きい場合、
 * 呼び先関数の呼び出しには成功している。
 *
 * RPCErrorHandler が呼び出された時点で、send/receive 引数の解放は終わっている。
 * このため、RPCErrorHandler の中で処理を打ち切っても(タスクの再起動などを行っても)、それらによるメモリリークが起きない。
 */
