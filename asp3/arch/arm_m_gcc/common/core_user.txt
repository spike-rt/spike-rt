=====================================================================
                         ARM-Mプロセッサ依存部
  @(#) $Id: core_user.txt 1799 2023-04-01 00:50:30Z ertl-komori $
=====================================================================


(1) 対応しているターゲットシステムの種類・構成

ARM-M依存部は，ARMVx-Mアーキテクチャをターゲットとしている．ARMVx-Mは，
ARMとは異なり，ARM命令を実行できないため，ARM依存部と分けている．


(2) 使用する開発環境と動作検証した条件（バージョン，オプション等）

カーネルはGCCを用いてコンパイルする．動作確認したバージョンは各ターゲ
ット依存部のドキュメントに記載する．


(3) ターゲット定義事項の規定

(3-1) データ型に関する規定

データ型は arch/gcc/tool_stddef.h で定義されている内容で，float型と
double型は，それぞれIEEE754準拠の単精度浮動小数点数と倍精度浮動小数点
数である．

(3-2) 割込み処理に関する規定

○割込みハンドラ番号と割込み番号の割当て，両者の対応

割込みハンドラ番号と割込み番号は，例外発生時にIPSRにセットされる例外番
号を用いる．SYSTICKは15番で，外部割込みは16番からの番号が割り付けられ
ている．

○割込み優先度の段階数とTMIN_INTPRIの値

割込み優先度の段階数は，SoC毎にハードウェア的にサポートする割込み優先
度ビット幅が異なるので，ターゲット依存部毎に異なる．ターゲット依存部で
は，割込み優先度のビット幅（TBITW_IPRI）とその割込み優先度中のサブ優先
度のビット幅（TBITW_SUBPRI）を定義する．

各ビット幅の値とCFG_INTで使用可能な割込み優先度の範囲は次の通りである．

   -(2^(TBIW_IPRI)) 〜 -1

優先度のビット幅(TBITW_IPRI)が3bitの場合は，-8 〜 -1 の範囲である．

最大優先度(3bitの例では-8)は，内部優先度としては"0x00"となる．この優先
度はCPUロックで用いるBASEPRIレジスタではマスクできないため，カーネル管
理内の割込みの最高優先度（TMIN_INTPRI）は，最大値より1つ優先度が低い値
以下の値を指定する．

この範囲で，カーネル管理内の割込みの最高優先度（TMIN_INTPRI）をターゲ
ット依存部で設定する．

○dis_intとena_intのサポートの有無，その制限事項

dis_intとena_intをサポートする．制限事項は特にない．

○CFG_INTの制限事項と拡張（ターゲット定義で使用できる割込み属性）

CFG_INTの制限事項はない．ターゲット定義で使用可能な割り込み属性として
TA_NONKERNELがある．TA_NONKERNEL属性が付与された割り込みはカーネル
内部の出入り口処理を経由せずに直接呼び出される．カーネル管理外の割り込み
にはTA_NONKERNEL属性を付与しなくてはならない．

○カーネル管理外の割込み

カーネル管理外の割込みをサポートする．指定方法は，割込み優先度の段階数
で指定した，サポートする割込み優先度の最高値（最小値）より，
TMIN_INTPRIの値を大きく（優先度を低く）設定すると，TMIN_INTPRIより値が
小い（高優先度）な割込み優先度を設定した割込みを割込み優先度として扱う．

カーネル管理外の割込みはOS実行中も禁止になることはなく（厳密には割り込み
によりプリエンプトされたタスクへ自発的なディスパッチから復帰する際の
スーパバイザ呼び出しで禁止される），割込み発生時は，カーネルのコードを
経由せずに呼び出される．

なお，ARMv6-MではSysTickをカーネル管理外の割り込みとしてのみサポートする．

カーネル管理外の割込みに対する，DEF_INH,CFG_INTはサポートする．

(3-3) CPU例外処理に関する規定

○CPU例外ハンドラ番号

CPU例外ハンドラ番号としては，例外発生時にIPSRにセットされる，例外番号
を用いる．各例外の例外番号は以下の通りである．

        例外              例外番号
  Reset                      1
  Non-maskable Interrupt     2
  Hard Fault                 3
  Memory Management          4
  Bus Fault                  5
  Usage Fault                6
  SVCall                    11
  Debug Monitor             12
  PendSV                    14

なお，Resetと，SVCall，PendSVについては，カーネルが使用するため，
ユーザーは使用することができない．

ARM-MアーキテクチャではCPU例外に優先度を設定することが可能である．
ARM-M依存部では，全てのCPU例外の優先度をCPUロックではマスクできないマ
スク出来ない値（内部優先度0）に初期化している．

(3-4) CPUロック・割込みロック

CPUロックは，basepriをTMIN_INTPRIの優先度の割込みを禁止する値に設定す
る．basepriが存在しないARMv6-MではNVICの割り込み許可ビットを操作する．
割込みロックは，PRIMASKを'1'に設定することで実現している．

(3-5) 性能評価用システム時刻の参照に関する規定

get_utmをサポートする．精度に関しては，ターゲット毎に異なる．

(3-6) スタートアップルーチンでの初期化内容

スタートアップルーチンは，Threadモードで呼び出されることを前提としてい
る．実行後，割込みロック状態（FAULTMASKをセット）とする．割込みロック
状態は，カーネルの初期化終了時に解除する．スタートアップルーチンで，
MSPをアクティブなスタックとし，MSPの内容を初期化するためには，INIT_MSP
をターゲット依存部で定義する．

(4) ターゲット依存部での設定項目

ターゲット依存部では以下のマクロを定義する必要がある．

   ・TMAX_INTNO     : 割込み番号の最大値(通常の割込み番号 + 15)
   ・TBITW_IPRI     : 割込み優先度のビット幅
   ・TMIN_INTPRI    : 割込み優先度の最小値（最高値）
   ・INTPRI_TIMER   : タイマ割込み割込み優先度
   ・INTATR_TIMER   : タイマ割込みの割込み属性
   ・INIT_MSP       : スタートアップルーチンでMSPを初期化する場合は定義
   ・DEFAULT_ISTKSZ : スタックサイズ（8byte単位で指定）
   ・SIL_DLY_TIM1   : 微少時間待ちのための定義
   ・SIL_DLY_TIM2   : 微少時間待ちのための定義

(5) ディレクトリ構成・ファイル構成
  ./arch/arm_m_gcc/common
    ./Makefile.core
    ./arm_m.h
    ./core_asm.inc
    ./core_cfg1_out.h
    ./core_check.trb
    ./core_design.txt
    ./core_insn.h
    ./core_kernel.h
    ./core_kernel.trb
    ./core_kernel_impl.c
    ./core_kernel_impl.h
    ./core_kernel_v6m.h
    ./core_offset.trb
    ./core_offset_v6m.trb
    ./core_rename.def
    ./core_rename.h
    ./core_sil.h
    ./core_stddef.h
    ./core_support.S
    ./core_support_v6m.S
    ./core_sym.def
    ./core_sym_v6m.def
    ./core_test.h
    ./core_unrename.h
    ./core_user.txt
    ./start.S
    ./core_kernel.trb
    ./core_check.trb
    ./core_offset.trb
    ./core_timer.c
    ./core_timer.cfg
    ./core_timer.h

(6)ARMCC共有コードの記述方法

ARMCCと共有するコードは，次のルールに従ってコードを記述する必要がある．

1.メモリバリア命令(Asm("":::"memory"))のマクロ化

ターゲット依存部 ポーティングガイドの(1-6-2)(c)には，次のように記述さ
れている．

-----
(c) クリティカルセクションの出入処理の本質的な部分が，マクロやインライ
	ン関数呼出しで実現している場合には，クリティカルセクションに入る処
	理の最後と出る処理の先頭に，Asm("":::"memory")という記述を入れる．
-----

メモリバリア命令(Asm("":::"memory"))は，ARMCCと互換性がないため，この
記述をする箇所は，次のマクロで記述すると，コンパイル時に適切なメモリバ
リア命令に置き換えられる．

  ARM_MEMORY_CHANGED

2.インクルード方法

ターゲット依存部 ポーティングガイドの1.5には，次のように記述されている．

-----
その他のヘッダファイルは，「#include "..."」によりインクルードする．ヘッ
ダファイルが，カレントディレクトリやインクルードするファイルと同じディ
レクトリ以外のディレクトリに置かれている場合には，次のようにパス指定を
行う．
-----

GCC依存部とARMCC依存部でヘッダファイルを共有できない場合には，それぞれ
で同じ名前のファイルを持つ．そして，コンパイルオプションでインクルード
すべきファイルを先に指定している．そのため，ARMCCと共有するファイルで
これらのファイルをインクルードする場合には，「#include "..."」ではなく，
「#include <...>」で記述し，相対パスではなくファイル名のみを記載するこ
と．

3.アセンブラディレクティブ

GCCとARMCCのアセンブラディレクティブは互換性がない．そのため，ARMCCと
共有するファイルは次に示すマクロディレクティブで記述すること．

マクロディレクティブ     GCCディレクティブ
 ASECTION(name)          .section name,"a"
 ATEXT                   .text
 AGLOBAL(name)           .global name
 AALIGN(x)               .align x
 ALONG                   .long
 ALABEL(label)           label:
 AOR                       |
 ATHUMB(name)            __athumb name


(7)ARMCC共有コードの記述方法

○アイドル処理

実行するべきタスクがない場合は，ディスパッチャーでCPUロックを解除して，割
込みを待つ．ARM-M依存部のコードでは，次のようになっている．

       CPUロックを解除
       _idle_loop_1:
       wfi
       b _idle_loop_1

ターゲット依存で，上記の処理の代わりに，省電力モード等に移行する処理を
記述したい場合には，ターゲット依存部で，TOPPERS_CUSTOM_IDLEを定義し，
代わりに実行した処理を toppers_asm_custom_idle というアセンブラマクロ
として記述する．

アセンブラマクロはC言語記述中に展開するとエラーとなる．core_support.S で
は，TOPPERS_ASM_MACRO というマクロを定義しているため，ターゲット依存部
で toppers_asm_custom_idle アセンブラマクロを定義する際には，
TOPPERS_ASM_MACRO を条件コンパイルの条件として用いること．


(8) バージョン履歴
2023/3/1
・ASP3.6.0に追従
・core_support.S
  ・exit_and_dispatchにおいてFPUコンテキストを破棄するよう修正

2022/04/28
・core_kernel_impl.h, core_kernel_impl_v6m.h
  ・probe_int() 内のビット演算を修正
・core_timer.c
  ・タイマの初期値を修正

2021/12/10
・core_support.S
  ・古いバージョンのGNU ASで動作しない問題を修正．

2021/11/01
・core_kernel.trb
  ・CPU例外番号の修正
・core_support.S
  ・FPU依存処理の切り分けを修正

2020/09/11
・core_kernel_impl.c
  ・カーネル動作開始時にカーネル管理の割り込みが禁止されていない問題を修正

2020/09/09
・core_kernel.trb, core_kernel_impl.c
  ・カーネル管理外の割り込みに関する不具合を修正

2020/04/14
・core_kernel_impl.h
  ・t_get_ipm, t_set_ipm の処理を簡略化．
  ・バリア同期の見直し．

2020/04/12
・core_kernel_impl.h
  ・basepri レジスタの操作方法を変更．

2020/04/10
・core_kernel.trb
  ・割り込み優先度に-1を指定できるよう変更．
・core_kernel_impl.c
  ・割り込み出口でCPUロックフラグを解除するタイミングを修正．
・core_support.S
  ・pendsv_handler でカーネル管理の割り込みを禁止するよう変更．

2020/04/02
・core_kernel_impl.c
  ・割り込みの出入り口処理をC言語に変更．

2020/03/28
・core_support.S
  ・例外/割り込みの出入り口処理の見直し．

2020/03/22
・core_support.S
  ・return_to_threadにおいてCONTROL.FPCAがセットされるよう修正．
  ・dispatcher_1においてスタックオーバーフローが誤検出されないよう修正．

2020/01/22
・core_kernel_impl.c
  ・core_initialize()呼び出し時は，tcb_table[i].p_tinib は初期化されていなため，tinib_tableを使うように修正．

2019/12/7
・3.5.0対応
・core_support.S, core_kernel.h, core_kernel.c
  ・ディスパッチャの実装を大幅に変更．

2019/06/21
・3.4.0対応
・core_support.S
  ・カーネル管理の例外・割込みからのリターン時にCPUロック解除
    (lock_flag=0)とするように修正．
  ・start_dispatchにおいて，タスクID1のスタックをsvcで破壊しないようす
    るためのスタック値の調整を修正（addをsubに修正）．

2018/05/02
・3.3.1対応

2017/07/25
・core_kernel.trb
  _kernel_bitpat_cfgintの出力に問題があったため修正．
・ASP3.2.0に追従  

2015/01/07
・ASP3カーネル対応
