# ======================================================================
#
#   TOPPERS/ASP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       Advanced Standard Profile Kernel
#
#   Copyright (C) 2000-2003 by Embedded and Real-Time Systems Laboratory
#                               Toyohashi Univ. of Technology, JAPAN
#   Copyright (C) 2005-2015 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
#
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
#
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
#
#   @(#) $Id: core_kernel.trb 1799 2023-04-01 00:50:30Z ertl-komori $
#
# =====================================================================

#
#     パス2のアーキテクチャ依存テンプレート（ARM-M用）
#

#
#  有効な割込み番号，割込みハンドラ番号
#
$INTNO_VALID = Array(15..$TMAX_INTNO)
$INHNO_VALID = $INTNO_VALID

#
#  有効なCPU例外番号
#
$EXCNO_VALID = [ 2, 3, 4, 5, 6, 7, 12 ]

#
#  CRE_ISRで使用できる割込み番号とそれに対応する割込みハンドラ番号
#
$INTNO_CREISR_VALID = $INTNO_VALID
$INHNO_CREISR_VALID = $INHNO_VALID

#
#  DEF_INT／DEF_EXCで使用できる割込みハンドラ番号／CPU例外ハンドラ番号
#
$INHNO_DEFINH_VALID = $INHNO_VALID
$EXCNO_DEFEXC_VALID = $EXCNO_VALID

#
#  CFG_INTで使用できる割込み番号と割込み優先度
#  最大優先度はBASEPRIレジスタでマスクできない優先度（内部優先度'0'）
#  そのため，カーネル管理外の割込みでのみ指定可能．
$INTNO_CFGINT_VALID = $INTNO_VALID
$INTPRI_CFGINT_VALID = Array(-(1 << $TBITW_IPRI)..-1)

#
#  kernel/kernel.tf のターゲット依存部
#

#
#  TSKINICTXBの初期化情報を生成
#
def GenerateTskinictxb(key, params)
   return("{" \
          "\t(void *)(#{params[:tinib_stk]}), " \
          "\t((void *)((char *)(#{params[:tinib_stk]}) + " \
          "(#{params[:tinib_stksz]}))), " \
          "},")
end

#
#  ベクタテーブルの予約領域はデフォルトで0にする
#
unless defined?($GenResVectVal)
    $GenResVectVal = lambda do |num|
        0
    end
end

#
#  標準テンプレートファイルのインクルード
#
IncludeTrb("kernel/kernel.trb")

$kernelCfgC.append(<<EOS)
/*
 *  Target-dependent Definitions (ARM-M)
 */

/*
 *  ベクターテーブル
 */
__attribute__ ((section(".vector")))
const FP _kernel_vector_table[] = {
    (FP)(TOPPERS_ISTKPT(_kernel_istack, ROUND_STK_T(DEFAULT_ISTKSZ))),   /* 0 The initial stack pointer */
    (FP)_kernel_start,                 /* 1 The reset handler */
EOS
Array(2..14).each { |excno|
    if excno == 8
        $kernelCfgC.add("    (FP)(#{$GenResVectVal.call 8}),")
    elsif excno == 9
        $kernelCfgC.add("    (FP)(#{$GenResVectVal.call 9}),")
    elsif excno == 10
        $kernelCfgC.add("    (FP)(#{$GenResVectVal.call 10}),")
    elsif excno == 11
        $kernelCfgC.add("    (FP)(_kernel_svc_handler),      /* 11 SVCall handler */")
    elsif excno == 13
        $kernelCfgC.add("    (FP)(#{$GenResVectVal.call 13}),")
    elsif excno == 14
        $kernelCfgC.add("    (FP)(_kernel_pendsv_handler),      /* 14 PendSV handler */")
    else
        if exc = $cfgData[:DEF_EXC][excno]
            if (exc[:excatr] & $TA_DIRECT) != 0
                $kernelCfgC.add("    (FP)(#{exc[:exchdr]}), /* #{excno} */")
                next
            end
        end
        $kernelCfgC.add("    (FP)(_kernel_core_exc_entry), /* #{excno} */")
    end
}
$INTNO_VALID.each { |inhno|
    if inh = $cfgData[:DEF_INH][inhno]
        if (inh[:inhatr] & $TA_NONKERNEL) != 0
            $kernelCfgC.add("    (FP)(#{inh[:inthdr]}), /* #{inhno} */")
            next
        end
    end
    $kernelCfgC.add("    (FP)(_kernel_core_int_entry), /* #{inhno} */")
}
$kernelCfgC.add2("};")

$kernelCfgC.add("const FP _kernel_exc_tbl[] = {")
Array(0..14).each { |excno|
    if exc = $cfgData[:DEF_EXC][excno]
        $kernelCfgC.add("   (FP)(#{exc[:exchdr]}), /* #{excno} */")
    else
        $kernelCfgC.add("   (FP)(_kernel_default_exc_handler), /* #{excno} */")
    end
}
$INTNO_VALID.each { |inhno|
    if inh = $cfgData[:DEF_INH][inhno]
        $kernelCfgC.add("   (FP)(#{inh[:inthdr]}), /* #{inhno} */")
    else
        $kernelCfgC.add("   (FP)(_kernel_default_int_handler), /* #{inhno} */")
    end
}
$kernelCfgC.add2("};")

#
#  _kernel_bitpat_cfgintの生成
#

bitpat_cfgint_num = 0
bitpat_cfgint = 0
if ($TMAX_INTNO & 0x0f) == 0x00
    bitpat_cfgint_num = ($TMAX_INTNO >> 4)
else
    bitpat_cfgint_num = ($TMAX_INTNO >> 4) + 1
end

$kernelCfgC.add
$kernelCfgC.add("const uint32_t _kernel_bitpat_cfgint[#{bitpat_cfgint_num}] = {")
Array(0..(bitpat_cfgint_num-1)).each { |num|
    bitpat_cfgint = 0;
    Array((num*32)..((num*32)+31)).each { |inhno|
        inh = $cfgData[:DEF_INH].select { |k,v|
            (v[:inhno] == inhno)
        }
        if !inh.empty?
            bitpat_cfgint = bitpat_cfgint | (1 << (inhno & 0x01f))
        end
    }
    $kernelCfgC.add(sprintf("   UINT32_C(0x%08x),", bitpat_cfgint))
}
$kernelCfgC.add2("};")
