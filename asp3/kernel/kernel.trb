# -*- coding: utf-8 -*-
#
#   TOPPERS/ASP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       Advanced Standard Profile Kernel
# 
#   Copyright (C) 2015 by FUJI SOFT INCORPORATED, JAPAN
#   Copyright (C) 2015-2022 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
#   $Id: kernel.trb 1716 2022-10-20 06:41:10Z ertl-hiro $
# 

#
#		コンフィギュレータのパス2の生成スクリプト
#

#
#  タイムスタンプファイルの指定
#
$timeStampFileName = "kernel_cfg.timestamp"

#
#  kernel_cfg.hの先頭部分の生成
#
$kernelCfgH = GenFile.new("kernel_cfg.h")
$kernelCfgH.add(<<EOS)
/* kernel_cfg.h */
#ifndef TOPPERS_KERNEL_CFG_H
#define TOPPERS_KERNEL_CFG_H
EOS

#
#  kernel_cfg.cの先頭部分の生成
#
$kernelCfgC = GenFile.new("kernel_cfg.c")
$kernelCfgC.add(<<EOS)
/* kernel_cfg.c */
#include "kernel/kernel_int.h"
#include "kernel_cfg.h"

#if !(TKERNEL_PRID == 0x0007U && (TKERNEL_PRVER & 0xf000U) == 0x3000U)
#error The kernel does not match this configuration file.
#endif
EOS

#
#  インクルードディレクティブ（#include）の生成
#
$kernelCfgC.comment_header("Include Directives")
GenerateIncludes($kernelCfgC)
$kernelCfgC.add()

#
#  スタック領域の確保
#
#  スタック領域の定義分と，スタック領域のサイズ記述を配列で返す．
#
unless defined? AllocStack()
  def AllocStack(stack, size)
    # 大きい方に丸めたサイズで確保する［NGKI1050］［NGKI3220］
    $kernelCfgC.add("static STK_T #{stack}[COUNT_STK_T(#{size})];")
    return("ROUND_STK_T(#{size})")
  end
end

#
#  カーネルオブジェクトに関する情報の生成（仮想クラス）
#
class KernelObject
  def initialize(obj, object, obj_s = obj)
    @obj = obj
    @OBJ = obj.tr("a-z", "A-Z")
    @object = object
    @obj_s = obj_s
    @OBJ_S = obj_s.tr("a-z", "A-Z")
    @objid = (obj + "id").to_sym
    @api = "CRE_#{@OBJ}".to_sym
  end

  def generate()
    # オブジェクトの数のマクロ定義の生成（kernel_cfg.h）
    # ［NGKI1022］［NGKI1451］［NGKI1557］［NGKI1664］［NGKI1799］
    # ［NGKI2020］［NGKI2220］［NGKI2378］［NGKI2486］［NGKI3612］
    $kernelCfgH.add("#define TNUM_#{@OBJ}ID\t#{$cfgData[@api].size}")

    # オブジェクトのID番号のマクロ定義の生成（kernel_cfg.h）
    $cfgData[@api].sort.each do |_, params|
      $kernelCfgH.add("#define #{params[@objid]}\t#{params[@objid].val}")
    end
    $kernelCfgH.add()

    # オブジェクトのID番号を保持する変数
    if $USE_EXTERNAL_ID
      $cfgData[@api].sort.each do |_, params|
        $kernelCfgC.add("const ID #{params[@objid]}_id" \
										" = #{params[@objid].val};")
      end
      $kernelCfgC.add()
    end

    # オブジェクトID番号の最大値
    $kernelCfgC.add2("const ID _kernel_tmax_#{@obj}id" \
							" = (TMIN_#{@OBJ}ID + TNUM_#{@OBJ}ID - 1);")

    # データ構造
    if $cfgData[@api].size > 0
      # 事前準備（エラーチェック，メモリ領域の生成）
      $cfgData[@api].sort.each do |key, params|
        prepare(key, params)
      end

      # オブジェクト全体に対して必要なメモリ領域の生成（オプション）
      if respond_to?(:generateData)
        generateData()
      end

      # オブジェクト初期化ブロックの生成
      $kernelCfgC.add("const #{@OBJ_S}INIB _kernel_#{@obj_s}inib_table" \
													"[TNUM_#{@OBJ}ID] = {")
      $cfgData[@api].sort.each_with_index do |(key, params), index|
        $kernelCfgC.add(",") if index > 0
        $kernelCfgC.append("\t{ " + generateInib(key, params) + " }")
      end
      $kernelCfgC.add
      $kernelCfgC.add2("};")

      # オブジェクト管理ブロックの生成
      $kernelCfgC.add2("#{@OBJ_S}CB _kernel_#{@obj_s}cb_table" \
													"[TNUM_#{@OBJ}ID];")

      # オブジェクト初期化関数の追加
      $initializeFunctions.push("_kernel_initialize_#{@object}();")
    else
      # オブジェクトが1つもない場合
      $kernelCfgC.add("TOPPERS_EMPTY_LABEL(const #{@OBJ_S}INIB, " \
										"_kernel_#{@obj_s}inib_table);")
      $kernelCfgC.add2("TOPPERS_EMPTY_LABEL(#{@OBJ_S}CB, " \
										"_kernel_#{@obj_s}cb_table);")
    end
  end
end

#
#  通知ハンドラの生成関数
#
def generateNotifyHandler(key, params, objid)
  # パラメータを変数に格納
  nfymode = params[:nfymode]
  nfymode1 = nfymode & 0x0f
  nfymode2 = nfymode & ~0x0f
  # par1 = params[:par1]
  par2 = params[:par2]

  # 通知処理のパラメータ数による補正処理
  if nfymode == $TNFY_HANDLER || nfymode1 == $TNFY_SETVAR \
								|| nfymode1 == $TNFY_SETFLG \
								|| nfymode1 == $TNFY_SNDDTQ
    # 通知処理のパラメータが2つの場合
    numpar = 2
    epar1 = params[:par3]
    epar2 = params[:par4]
  else
    # 通知処理のパラメータが1つの場合
    numpar = 1
    epar1 = params[:par2]
    epar2 = params[:par3]
  end

  # パラメータ数のチェック
  if (numpar == 2 && par2.nil?) || (nfymode2 != 0 && epar1.nil?) \
								|| (nfymode2 == $TENFY_SETFLG && epar2.nil?)
    # パラメータが足りない場合
    error_sapi(nil, params,
					"too few parameters for nfymode `#{nfymode}'", objid)
  elsif (nfymode2 == 0 && !epar1.nil?) \
					|| (nfymode2 != $TENFY_SETFLG && !epar2.nil?)
    # パラメータが多すぎる場合
    error_sapi(nil, params,
					"too many parameters for nfymode `#{nfymode}'", objid)
  elsif nfymode1 == $TNFY_HANDLER && nfymode2 == 0		#［NGKI3721］
    # タイムイベントハンドラの呼出し（通知ハンドラ名を上書き）
    params[:nfyhdr] = "(NFYHDR)(#{par2})"
  else
    # エラー通知のための変数のアドレスとオブジェクトIDを格納する
    # 変数の生成（エラーチェックのために必要）
    if nfymode2 == $TENFY_SETVAR || nfymode2 == $TENFY_INCVAR
      $kernelCfgC.add2("intptr_t *const #{params[:nfyhdr]}_p_evar =" \
											" (intptr_t *)(#{epar1});")
    elsif nfymode2 == $TENFY_ACTTSK || nfymode2 == $TENFY_WUPTSK
      $kernelCfgC.add2("const ID #{params[:nfyhdr]}_etskid = #{epar1};")
    elsif nfymode2 == $TENFY_SIGSEM
      $kernelCfgC.add2("const ID #{params[:nfyhdr]}_esemid = #{epar1};")
    elsif nfymode2 == $TENFY_SETFLG
      $kernelCfgC.add2("const ID #{params[:nfyhdr]}_eflgid = #{epar1};")
    elsif nfymode2 == $TENFY_SNDDTQ
      $kernelCfgC.add2("const ID #{params[:nfyhdr]}_edtqid = #{epar1};")
    end

    # 関数の先頭部分の生成
    $kernelCfgC.add("static void")
    $kernelCfgC.add("#{params[:nfyhdr]}(EXINF exinf)")
    $kernelCfgC.add("{")

    if nfymode2 == 0
      # エラー通知がない場合
      errorCode = "(void) "
    else
      # エラー通知がある場合
      $kernelCfgC.add2("\tER\tercd;")
      errorCode = "ercd = "
    end

    # イベント通知処理の処理
    if nfymode1 == $TNFY_SETVAR && nfymode2 == 0		#［NGKI3721］
      # 変数の設定
      $kernelCfgC.add("\t*((intptr_t *) exinf) = (#{par2});")
    elsif nfymode1 == $TNFY_INCVAR && nfymode2 == 0		#［NGKI3721］
      # 変数のインクリメント
      $kernelCfgC.add("\t(void) loc_cpu();")
      $kernelCfgC.add("\t*((intptr_t *) exinf) += 1;")
      $kernelCfgC.add("\t(void) unl_cpu();")
    elsif nfymode1 == $TNFY_ACTTSK
      # タスクの起動
      $kernelCfgC.add("\t#{errorCode}act_tsk((ID) exinf);")
    elsif nfymode1 == $TNFY_WUPTSK
      # タスクの起床
      $kernelCfgC.add("\t#{errorCode}wup_tsk((ID) exinf);")
    elsif nfymode1 == $TNFY_SIGSEM
      # セマフォの返却
      $kernelCfgC.add("\t#{errorCode}sig_sem((ID) exinf);")
    elsif nfymode1 == $TNFY_SETFLG
      # イベントフラグのセット
      $kernelCfgC.add("\t#{errorCode}set_flg(((ID) exinf), #{par2});")
    elsif nfymode1 == $TNFY_SNDDTQ
      # データキューへの送信
      $kernelCfgC.add("\t#{errorCode}psnd_dtq(((ID) exinf), #{par2});")
    else
      # nfymodeの値が正しくない場合（E_PAR）［NGKI3730］
      error_sapi("E_PAR", params, "illegal %%nfymode", objid)
    end

    if nfymode2 != 0
      # エラー通知処理の処理
      $kernelCfgC.add("\tif (ercd != E_OK) {")

      if nfymode2 == $TENFY_SETVAR
        # 変数の設定
        $kernelCfgC.add("\t\t*#{params[:nfyhdr]}_p_evar = (intptr_t) ercd;")
      elsif nfymode2 == $TENFY_INCVAR
        # 変数のインクリメント
        $kernelCfgC.add("\t\t(void) loc_cpu();")
        $kernelCfgC.add("\t\t*#{params[:nfyhdr]}_p_evar += 1;")
        $kernelCfgC.add("\t\t(void) unl_cpu();")
      elsif nfymode2 == $TENFY_ACTTSK
        # タスクの起動
        $kernelCfgC.add("\t\t(void) act_tsk(#{params[:nfyhdr]}_etskid);")
      elsif nfymode2 == $TENFY_WUPTSK
        # タスクの起床
        $kernelCfgC.add("\t\t(void) wup_tsk(#{params[:nfyhdr]}_etskid);")
      elsif nfymode2 == $TENFY_SIGSEM
        # セマフォの返却
        $kernelCfgC.add("\t\t(void) sig_sem(#{params[:nfyhdr]}_esemid);")
      elsif nfymode2 == $TENFY_SETFLG
        # イベントフラグのセット
        $kernelCfgC.add("\t\t(void) set_flg(#{params[:nfyhdr]}_eflgid, " \
															"#{epar2});")
      elsif nfymode2 == $TENFY_SNDDTQ
        # データキューへの送信
        $kernelCfgC.add("\t\t(void) psnd_dtq(#{params[:nfyhdr]}_edtqid," \
													" (intptr_t) ercd);")
      else
        # nfymodeの値が正しくない場合（E_PAR）［NGKI3730］
        error_sapi("E_PAR", params, "illegal %%nfymode", objid)
      end
      $kernelCfgC.add("\t}")
    end

    # 関数の末尾部分の生成
    $kernelCfgC.add2("}")
  end
end

#
#  各機能モジュールのコンフィギュレーション
#
$initializeFunctions = []
IncludeTrb("kernel/task.trb")
IncludeTrb("kernel/semaphore.trb")
IncludeTrb("kernel/eventflag.trb")
IncludeTrb("kernel/dataqueue.trb")
IncludeTrb("kernel/pridataq.trb")
IncludeTrb("kernel/mutex.trb")
IncludeTrb("kernel/mempfix.trb")
IncludeTrb("kernel/cyclic.trb")
IncludeTrb("kernel/alarm.trb")
IncludeTrb("kernel/interrupt.trb")
IncludeTrb("kernel/exception.trb")

#
#  非タスクコンテキスト用のスタック領域
#
if !$OMIT_ISTACK
  $kernelCfgC.comment_header("Stack Area for Non-task Context")

  if $cfgData[:DEF_ICS].size == 0
    # DEF_ICSがない場合のデフォルト値の設定
    if !defined?($DEFAULT_ISTK)
      # スタック領域の自動割付け
      istksz = AllocStack("_kernel_istack", "DEFAULT_ISTKSZ")
      istk = "_kernel_istack"
    else
      istksz = "DEFAULT_ISTKSZ"
      istk = "DEFAULT_ISTK"
    end
  else
    $cfgData[:DEF_ICS].each_with_index do |(_, params), index|
      # パラメータが省略された時のデフォルト値の設定
      params[:istk] ||= "NULL"

      # istkszがターゲット定義の最小値（TARGET_MIN_ISTKSZ，未定義の場合は1）
      # よりも小さい場合（E_PAR）［NGKI3254］
      if params[:istksz] < $TARGET_MIN_ISTKSZ
        error_wrong("E_PAR", params, :istksz, "too small")
      end

      # istkszがターゲット定義の制約に合致しない場合（E_PAR）［NGKI3222］
      if params[:istk] != "NULL" \
					&& (params[:istksz] & ($CHECK_STKSZ_ALIGN - 1)) != 0
        error_wrong("E_PAR", params, :istksz, "not aligned")
      end

      # 非タスクコンテキスト用スタック領域が設定済みの場合（E_OBJ）［NGKI3216］
      if index > 0
        error_ercd("E_OBJ", params, "%apiname is duplicated")
      end

      if params[:istk] == "NULL"
        # スタック領域の自動割付け
        istksz = AllocStack("_kernel_istack", params[:istksz])
        istk = "_kernel_istack"
      else
        istksz = "(#{params[:istksz]})"
        istk = "(void *)(#{params[:istk]})"
      end
    end
  end

  $kernelCfgC.add(<<EOS)
const size_t _kernel_istksz = #{istksz};
STK_T *const _kernel_istk = #{istk};

#ifdef TOPPERS_ISTKPT
STK_T *const _kernel_istkpt = TOPPERS_ISTKPT(#{istk}, #{istksz});
#endif /* TOPPERS_ISTKPT */
EOS
end

#
#  タイムイベント管理
#
$kernelCfgC.comment_header("Time Event Management")
$kernelCfgC.add(<<EOS)
TMEVTN   _kernel_tmevt_heap[1 + TNUM_TSKID + TNUM_CYCID + TNUM_ALMID];
EOS

#
#  各モジュールの初期化関数
#
$kernelCfgC.comment_header("Module Initialization Function")
$kernelCfgC.append(<<EOS)
void
_kernel_initialize_object(void)
{
EOS
$initializeFunctions.each do |func|
  $kernelCfgC.add("\t#{func}")
end
$kernelCfgC.add2("}")

#
#  初期化ルーチン機能
#

# kernel_cfg.hの生成
$kernelCfgH.add2("#define TNUM_INIRTN\t#{$cfgData[:ATT_INI].size}")

# kernel_cfg.cの生成
$kernelCfgC.comment_header("Initialization Routine")

# エラーチェック
$cfgData[:ATT_INI].each do |_, params|
  # iniatrが無効の場合（E_RSATR）［NGKI3241］［NGKI3202］［NGKI3203］
  #（TA_NULLでない場合）
  if (params[:iniatr] != $TA_NULL)
    error_illegal_sym("E_RSATR", params, :iniatr, :inirtn)
  end
end

# 初期化ルーチンの数の定義
$kernelCfgC.add2("const uint_t _kernel_tnum_inirtn = TNUM_INIRTN;");

# 初期化ルーチンテーブルの生成
if $cfgData[:ATT_INI].size > 0
  $kernelCfgC.add("const INIRTNB _kernel_inirtnb_table[TNUM_INIRTN] = {")
  $cfgData[:ATT_INI].each_with_index do |(_, params), index|
    $kernelCfgC.add(",") if index > 0
    $kernelCfgC.append("\t{ (INIRTN)(#{params[:inirtn]}), " \
								"(EXINF)(#{params[:exinf]}) }")
  end
  $kernelCfgC.add
  $kernelCfgC.add2("};")
else
  $kernelCfgC.add2("TOPPERS_EMPTY_LABEL(const INIRTNB, " \
										"_kernel_inirtnb_table);")
end

#
#  終了処理ルーチン機能
#

# kernel_cfg.hの生成
$kernelCfgH.add2("#define TNUM_TERRTN\t#{$cfgData[:ATT_TER].size}")

# kernel_cfg.cの生成
$kernelCfgC.comment_header("Termination Routine")

# エラーチェック
$cfgData[:ATT_TER].each do |_, params|
  # teratrが無効の場合（E_RSATR）［NGKI3248］［NGKI3208］［NGKI3209］
  #（TA_NULLでない場合）
  if (params[:teratr] != $TA_NULL)
    error_illegal_sym("E_RSATR", params, :teratr, :terrtn)
  end
end

# 終了処理ルーチンの数の定義
$kernelCfgC.add2("const uint_t _kernel_tnum_terrtn = TNUM_TERRTN;");

# 終了処理ルーチンテーブルの生成
if $cfgData[:ATT_TER].size > 0
  $kernelCfgC.add("const TERRTNB _kernel_terrtnb_table[TNUM_TERRTN] = {")
  $cfgData[:ATT_TER].reverse_each.each_with_index do |(_, params), index|
    $kernelCfgC.add(",") if index > 0
    $kernelCfgC.append("\t{ (TERRTN)(#{params[:terrtn]}), " \
								"(EXINF)(#{params[:exinf]}) }")
  end
  $kernelCfgC.add
  $kernelCfgC.add2("};")
else
  $kernelCfgC.add2("TOPPERS_EMPTY_LABEL(const TERRTNB, " \
										"_kernel_terrtnb_table);")
end

#
#  kernel_cfg.hの末尾部分の生成
#
$kernelCfgH.append(<<EOS)
#endif /* TOPPERS_KERNEL_CFG_H */
EOS
