/*
 *		全静的APIのテスト(1)
 *
 *  $Id: cfg_all1.cfg 1329 2019-12-01 01:55:06Z ertl-hiro $
 */

#include "cfg_common.h"

CRE_TSK(TASK1, { TA_ACT, 1, task1, MID_PRIORITY, STACK_SIZE, NULL });
CRE_TSK(TASK2, { TA_NULL, 2, task2, HIGH_PRIORITY, STACK_SIZE, stack_TASK2 });
CRE_SEM(SEM1, { TA_NULL, 1, 1 });
CRE_SEM(SEM2, { TA_TPRI, 0, 2 });
CRE_FLG(FLG1, { TA_NULL, 0U });
CRE_FLG(FLG2, { TA_TPRI, 0x0001U });
CRE_DTQ(DTQ1, { TA_NULL, 10, NULL });
CRE_DTQ(DTQ2, { TA_TPRI, 0, NULL });
CRE_PDQ(PDQ1, { TA_NULL, 10, 16, NULL });
CRE_PDQ(PDQ2, { TA_TPRI, 0, 2, NULL });
CRE_MTX(MTX1, { TA_NULL });
CRE_MTX(MTX2, { TA_CEILING, MID_PRIORITY });
CRE_MPF(MPF1, { TA_NULL, 10, 100, NULL, NULL });
CRE_MPF(MPF2, { TA_NULL, 20, 200, mpf_MPF2, NULL });
CRE_CYC(CYC1, { TA_NULL, { TNFY_HANDLER, 1, cyclic1_handler }, 1000, 1000 });
CRE_CYC(CYC2, { TA_STA, { TNFY_SETVAR, &nvar1, 1 }, 1000, 1000 });
CRE_CYC(CYC3, { TA_NULL, { TNFY_INCVAR, &nvar2 }, 1000, 1000 });
CRE_CYC(CYC4, { TA_NULL, { TNFY_ACTTSK|TENFY_ACTTSK, TASK1, TASK2 },
														1000, 1000 });
CRE_CYC(CYC5, { TA_NULL, { TNFY_WUPTSK|TENFY_WUPTSK, TASK1, TASK2 },
														1000, 1000 });
CRE_CYC(CYC6, { TA_NULL, { TNFY_SIGSEM|TENFY_SIGSEM, SEM1, SEM2 },
														1000, 1000 });
CRE_CYC(CYC7, { TA_NULL, { TNFY_SETFLG|TENFY_SETFLG, FLG1, 0x01, FLG1, 0x02 },
														1000, 1000 });
CRE_CYC(CYC8, { TA_NULL, { TNFY_SNDDTQ|TENFY_SNDDTQ, DTQ1, 0x00, DTQ2 },
														1000, 1000 });
CRE_CYC(CYC9, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR, TASK1, &nvar1 },
														1000, 1000 });
CRE_CYC(CYC10, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR, TASK1, &nvar2 },
														1000, 1000 });
CRE_ALM(ALM1, { TA_NULL, { TNFY_HANDLER, 1, alarm1_handler }});
CRE_ALM(ALM2, { TA_NULL, { TNFY_SETVAR, &nvar1, 1 }});
CRE_ALM(ALM3, { TA_NULL, { TNFY_INCVAR, &nvar2 }});
CRE_ALM(ALM4, { TA_NULL, { TNFY_ACTTSK|TENFY_ACTTSK, TASK1, TASK2 }});
CRE_ALM(ALM5, { TA_NULL, { TNFY_WUPTSK|TENFY_WUPTSK, TASK1, TASK2 }});
CRE_ALM(ALM6, { TA_NULL, { TNFY_SIGSEM|TENFY_SIGSEM, SEM1, SEM2 }});
CRE_ALM(ALM7, { TA_NULL, { TNFY_SETFLG|TENFY_SETFLG, FLG1, 0x01, FLG1, 0x02 }});
CRE_ALM(ALM8, { TA_NULL, { TNFY_SNDDTQ|TENFY_SNDDTQ, DTQ1, 0x00, DTQ2 }});
CRE_ALM(ALM9, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR, TASK1, &nvar1 }});
CRE_ALM(ALM10, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR, TASK1, &nvar2 }});
CFG_INT(INTNO1, { TA_NULL, TMAX_INTPRI });
CFG_INT(INTNO2, { TA_ENAINT, TMIN_INTPRI });
CFG_INT(INTNO3, { TA_NULL, TMAX_INTPRI });
CRE_ISR(ISR1, { TA_NULL, 1, INTNO2, isr1, 2 });
CRE_ISR(ISR2, { TA_NULL, 2, INTNO2, isr2, 2 });
CRE_ISR(ISR3, { TA_NULL, 3, INTNO2, isr3, 1 });
DEF_INH(INHNO1, { TA_NULL, int1_handler });
DEF_EXC(CPUEXC1, { TA_NULL, cpuexc1_handler });
DEF_EXC(CPUEXC2, { TA_NULL, cpuexc2_handler });
DEF_ICS({ 10 * STACK_SIZE, istack });
ATT_INI({ TA_NULL, 1, initialize1_routine });
ATT_INI({ TA_NULL, 2, initialize2_routine });
ATT_TER({ TA_NULL, 1, terminate1_routine });
ATT_TER({ TA_NULL, 2, terminate2_routine });
