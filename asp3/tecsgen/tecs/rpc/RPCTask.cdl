/*
 *  TECS Generator
 *      Generator for TOPPERS Embedded Component System
 *  
 *   Copyright (C) 2008-2013 by TOPPERS Project
 *--
 *   上記著作権者は，以下の(1)(4)の条件を満たす場合に限り，本ソフトウェ
 *   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *       スコード中に含まれていること．
 *   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *       の無保証規定を掲載すること．
 *   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *       と．
 *     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *         作権表示，この利用条件および下記の無保証規定を掲載すること．
 *     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *         報告すること．
 *   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *       免責すること．
 *  
 *   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *   の責任を負わない．
 *  
 *   $Id: RPCTask.cdl 2027 2014-01-20 08:36:17Z okuma-top $
 */

/*
 * unmarshaler の main のシグニチャ
 */
signature sUnmarshalerMain {
	ER	main(void);
};

///////////////// 専有チャンネル用の定義 ////////////////
/*
 * CELLTYPE: 専有チャンネル用のタスクメイン
 */
celltype tRPCDedicatedTaskMain {			// Transparent RPC で用いる
	entry	sTaskBody			eMain;
	call	sUnmarshalerMain	cMain;
};

celltype tRPCDedicatedTaskMainWithOpener {	// Opaque RPC で用いる
	entry	sTaskBody				eMain;
	call	sUnmarshalerMain		cMain;
	call	sServerChannelOpener	cOpener;
	attr {
		RELTIM	initialDelay = 0;	// sec
		RELTIM	reopenDelay = 1;	// sec
	};
	require tKernel.eKernel;
};

///////////////// 共有チャンネル用の定義 ////////////////
/*
 * CONST: 共有チャンネルヘッダのマジック
 */
const uint16_t RPC_CHANNEL_MAN_SOP_MAGIC   = (0x3141);  // Beginning of using shared channel
const uint16_t RPC_CHANNEL_MAN_EOP_MAGIC   = (0x2718);  // End of using shared channel

/*
 * CELLTYPE: 共有チャンネルマネージャ
 * REM:      呼び元側に置くチャンネルマネージャ
 *           eSemaphore が呼び出されたときチャンネルをロックするとともに、
 *           チャンネル番号を送出する
 */
celltype tRPCSharedChannelMan {
	entry	sSemaphore	eSemaphore[];
	call	sSemaphore	cSemaphore;
	call	sTDR		cClientSideTDR;
};


/*
 * CELLTYPE: 共有チャンネル用のタスクメイン
 * REM:      呼び先側に置くタスク
 *           チャンネル番号を取り出し、チャンネル番号の cTaskBody を呼び出す
 */
celltype tRPCSharedTaskMain {
	entry	sTaskBody	eMain;

	call	sUnmarshalerMain	cUnmarshalAndCallFunction[];
	call	sTDR		cServerSideTDR;

	require	tSysLog.eSysLog;

	var {
		int16_t	channelNo;	/* 配列添数 + 1 */
	};
};

celltype tRPCSharedTaskMainWithOpener {	// Opaque RPC で用いる
	entry	sTaskBody			eMain;
	call	sUnmarshalerMain	cUnmarshalAndCallFunction[];
	call	sTDR				cServerSideTDR;
	call	sServerChannelOpener cOpener;
	require	tSysLog.eSysLog;
	require tKernel.eKernel;

	attr {
		RELTIM	initialDelay = 0;	// sec
		RELTIM	reopenDelay = 1;	// sec
	};
	var {
		int16_t	channelNo;	/* 配列添数 + 1 */
	};
};
